(()=>{var __defProp=Object.defineProperty;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var require_macros=__commonJS({"user-route/keybr.com/_macros_/macros.js"(exports,module){var _c="color: cornflowerblue";var rbuttons={"Right|#1445d733":async function(){console.log('%cMacro: Clicked on "Right" button',"color:#bc0099")}};module.exports=()=>{const hello="world";async function observeOnce(){console.log("%cMacro: execute after observer once",_c)}return{"/"(){console.log("%cMacro: olleh >< hello",_c,hello);window.mitm.macrokeys={"code:KeyA"(_e){console.log(`%cMacro: ${_e.code}`,_c,_e)},"code:{KeyA}"(_e){console.log(`%cAlt Macro: ${_e.code}`,_c,_e)},"key:us"(_e){console.log(`%cUS Country`,_c,_e)},"key:u"(_e){console.log(`%cU Char`,_c,_e)}};window.mitm.autofill=['input[type="password"] => password'];window.mitm.autobuttons=rbuttons;return observeOnce},zero:"0"}}}});var require_macros2=__commonJS({"user-route/_global_/_macros_/macros.js"(exports,module){module.exports=()=>{const hello="global";window.mitm.macros={global:hello};return window.mitm.macros}}});var{macros}=window.mitm;var _body1=require_macros();if(typeof _body1==="function"){_body1=_body1()}var global=require_macros2();if(typeof global==="function"){global=global()}window.mitm.macros=__spreadValues(__spreadValues(__spreadValues({},global),macros),_body1);})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vX21hY3Jvc18vbWFjcm9zLmpzIiwgIi4uLy4uL19nbG9iYWxfL19tYWNyb3NfL21hY3Jvcy5qcyIsICIuLi9fbWFjcm9zXy9idWlsZC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gY29uc3Qge2RlZmF1bHQ6QXBwfSA9IHJlcXVpcmUoJy4uL19zdmVsdGVfL1ZCb3guc3ZlbHRlJylcclxuY29uc3QgX2MgPSAnY29sb3I6IGNvcm5mbG93ZXJibHVlJ1xyXG5cclxuY29uc3QgcmJ1dHRvbnMgPSB7XHJcbiAgJ1JpZ2h0fCMxNDQ1ZDczMyc6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKCclY01hY3JvOiBDbGlja2VkIG9uIFwiUmlnaHRcIiBidXR0b24nLCAnY29sb3I6I2JjMDA5OScpXHJcbiAgfSxcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgaGVsbG8gPSAnd29ybGQnXHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIG9ic2VydmVPbmNlKCkge1xyXG4gICAgY29uc29sZS5sb2coJyVjTWFjcm86IGV4ZWN1dGUgYWZ0ZXIgb2JzZXJ2ZXIgb25jZScsIF9jKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgICcvJygpIHtcclxuICAgICAgLy8gbmV3IEFwcCh7IHRhcmdldDogZG9jdW1lbnQuYm9keSB9KVxyXG4gICAgICBjb25zb2xlLmxvZygnJWNNYWNybzogb2xsZWggPjwgaGVsbG8nLCBfYywgaGVsbG8pXHJcbiAgICAgIHdpbmRvdy5taXRtLm1hY3Jva2V5cyA9IHtcclxuICAgICAgICAnY29kZTpLZXlBJyhfZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCVjTWFjcm86ICR7X2UuY29kZX1gLCBfYywgX2UpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY29kZTp7S2V5QX0nKF9lKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJWNBbHQgTWFjcm86ICR7X2UuY29kZX1gLCBfYywgX2UpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAna2V5OnVzJyhfZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCVjVVMgQ291bnRyeWAsIF9jLCBfZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgICdrZXk6dScoX2UpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAlY1UgQ2hhcmAsIF9jLCBfZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHdpbmRvdy5taXRtLmF1dG9maWxsID0gWydpbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0gPT4gcGFzc3dvcmQnXVxyXG4gICAgICB3aW5kb3cubWl0bS5hdXRvYnV0dG9ucyAgPSByYnV0dG9uc1xyXG4gICAgICAvLyB3aW5kb3cubWl0bS5yaWdodGJ1dHRvbnMgPSByYnV0dG9uc1xyXG4gICAgICAvLyB3aW5kb3cubWl0bS5sZWZ0YnV0dG9ucyAgPSByYnV0dG9uc1xyXG4gICAgICByZXR1cm4gb2JzZXJ2ZU9uY2VcclxuICAgIH0sXHJcbiAgICB6ZXJvOiAnMCdcclxuICB9XHJcbn1cclxuIiwgIm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGhlbGxvID0gJ2dsb2JhbCdcclxuXHJcbiAgd2luZG93Lm1pdG0ubWFjcm9zID0ge2dsb2JhbDogaGVsbG99XHJcbiAgcmV0dXJuIHdpbmRvdy5taXRtLm1hY3Jvc1xyXG59XHJcbiIsICIvLyBbQ3RybF0gKyBbQWx0XSArIFtBXSA9PiBydW4gaG90a2V5IEtleUFcbi8vIFtDdHJsXSArIFtTaGlmdF0gPT4gSGlkZSAvIFNob3cgQnV0dG9uc1xuY29uc3Qge21hY3Jvc30gPSB3aW5kb3cubWl0bVxubGV0IF9ib2R5MSA9IHJlcXVpcmUoJy4vbWFjcm9zJylcbmlmICh0eXBlb2YgX2JvZHkxPT09J2Z1bmN0aW9uJykge1xuICBfYm9keTEgPSBfYm9keTEoKVxufVxubGV0IGdsb2JhbCA9IHJlcXVpcmUoJy4uLy4uL19nbG9iYWxfL19tYWNyb3NfL21hY3JvcycpXG5pZiAodHlwZW9mIGdsb2JhbD09PSdmdW5jdGlvbicpIHsgXG4gIGdsb2JhbCA9IGdsb2JhbCgpXG59XG53aW5kb3cubWl0bS5tYWNyb3MgPSB7XG4gIC4uLmdsb2JhbCxcbiAgLi4ubWFjcm9zLFxuICAuLi5fYm9keTEsXG59XG4iXSwKICAibWFwcGluZ3MiOiAiMnNCQUFBLHlGQUNBLEdBQU0sSUFBSyx3QkFFWCxHQUFNLFVBQVcsQ0FDZixrQkFBbUIsZ0JBQWtCLENBQ25DLFFBQVEsSUFBSSxxQ0FBc0MsbUJBSXRELE9BQU8sUUFBVSxJQUFNLENBQ3JCLEtBQU0sT0FBUSxRQUVkLDRCQUE2QixDQUMzQixRQUFRLElBQUksdUNBQXdDLElBR3RELE1BQU8sQ0FDTCxLQUFNLENBRUosUUFBUSxJQUFJLDBCQUEyQixHQUFJLE9BQzNDLE9BQU8sS0FBSyxVQUFZLENBQ3RCLFlBQVksR0FBSSxDQUNkLFFBQVEsSUFBSSxZQUFZLEdBQUcsT0FBUSxHQUFJLEtBRXpDLGNBQWMsR0FBSSxDQUNoQixRQUFRLElBQUksZ0JBQWdCLEdBQUcsT0FBUSxHQUFJLEtBRTdDLFNBQVMsR0FBSSxDQUNYLFFBQVEsSUFBSSxlQUFnQixHQUFJLEtBRWxDLFFBQVEsR0FBSSxDQUNWLFFBQVEsSUFBSSxXQUFZLEdBQUksTUFJaEMsT0FBTyxLQUFLLFNBQVcsQ0FBQyxzQ0FDeEIsT0FBTyxLQUFLLFlBQWUsU0FHM0IsTUFBTyxjQUVULEtBQU0sU0N6Q1YsZ0dBQU8sUUFBVSxJQUFNLENBQ3JCLEtBQU0sT0FBUSxTQUVkLE9BQU8sS0FBSyxPQUFTLENBQUMsT0FBUSxPQUM5QixNQUFPLFFBQU8sS0FBSyxXQ0ZyQixHQUFNLENBQUMsUUFBVSxPQUFPLEtBQ3hCLEdBQUksUUFBUyxpQkFDYixHQUFJLE1BQU8sVUFBUyxXQUFZLENBQzlCLE9BQVMsU0FFWCxHQUFJLFFBQVMsa0JBQ2IsR0FBSSxNQUFPLFVBQVMsV0FBWSxDQUM5QixPQUFTLFNBRVgsT0FBTyxLQUFLLE9BQVMsZ0RBQ2hCLFFBQ0EsUUFDQSIsCiAgIm5hbWVzIjogW10KfQo=
