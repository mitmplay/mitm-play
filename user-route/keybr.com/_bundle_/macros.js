var app = (function () {
  'use strict';

  const _c = 'color: cornflowerblue';

  const rbuttons = {
    'Right|#1445d733': async function () {
      console.log('%cMacro: Clicked on "Right" button', 'color:#bc0099');
    },
    'Two|#1445d733': async function () {
      console.log('%cMacro: Clicked on "Right" button', 'color:#bc0099');
    },
  };

  var macros$2 = () => {
    const hello = 'world';

    async function observeOnce() {
      console.log('%cMacro: execute after observer once', _c);
    }
    return {
      '/'() {
        console.log('%cMacro: olleh >< hello', _c, hello);
        const keys = {
          'code:KeyA'(_e) {
            console.log(`%cMacro: ${_e.code}`, _c, _e);
          },
          'code:{KeyA}'(_e) {
            console.log(`%cAlt Macro: ${_e.code}`, _c, _e);
          },
          'key:us'(_e) {
            console.log(`%cUS Country`, _c, _e);
          },
          'key:u'(_e) {
            console.log(`%cU Char`, _c, _e);
          }
        };
        keys['code:KeyA'  ]._title = 'this is KeyA';
        keys['code:{KeyA}']._title = 'this is {KeyA}';
        keys['key:us'     ]._title = 'this is us';
        keys['key:u'      ]._title = 'this is u';

        window.mitm.macrokeys = keys;
        window.mitm.autofill = ['input[type="password"] => password'];
        window.mitm.autobuttons  = rbuttons;
        window.mitm.rightbuttons = rbuttons;
        window.mitm.leftbuttons  = rbuttons;
        return observeOnce
      },
      zero: '0'
    }
  };

  var macros$1 = () => {
    const hello = 'global';

    window.mitm.macros = {global: hello};
    return window.mitm.macros
  };

  // [Ctrl] + [Alt] + [A] => run hotkey KeyA
  // [Ctrl] + [Shift] => Hide / Show Buttons
  const {macros} = window.mitm;
  let _body1 = macros$2;
  if (typeof _body1==='function') {
    _body1 = _body1();
  }
  let global = macros$1;
  if (typeof global==='function') { 
    global = global();
  }
  window.mitm.macros = {
    ...global,
    ...macros,
    ..._body1,
  };

  var build = {

  };

  return build;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFjcm9zLmpzIiwic291cmNlcyI6WyIuLi9fbWFjcm9zXy9tYWNyb3MuanMiLCIuLi8uLi9fZ2xvYmFsXy9fbWFjcm9zXy9tYWNyb3MuanMiLCIuLi9fbWFjcm9zXy9idWlsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7ZGVmYXVsdDpBcHB9ID0gcmVxdWlyZSgnLi4vX3N2ZWx0ZV8vVkJveC5zdmVsdGUnKVxyXG5jb25zdCBfYyA9ICdjb2xvcjogY29ybmZsb3dlcmJsdWUnXHJcblxyXG5jb25zdCByYnV0dG9ucyA9IHtcclxuICAnUmlnaHR8IzE0NDVkNzMzJzogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coJyVjTWFjcm86IENsaWNrZWQgb24gXCJSaWdodFwiIGJ1dHRvbicsICdjb2xvcjojYmMwMDk5JylcclxuICB9LFxyXG4gICdUd298IzE0NDVkNzMzJzogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coJyVjTWFjcm86IENsaWNrZWQgb24gXCJSaWdodFwiIGJ1dHRvbicsICdjb2xvcjojYmMwMDk5JylcclxuICB9LFxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBjb25zdCBoZWxsbyA9ICd3b3JsZCdcclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gb2JzZXJ2ZU9uY2UoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnJWNNYWNybzogZXhlY3V0ZSBhZnRlciBvYnNlcnZlciBvbmNlJywgX2MpXHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICAnLycoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCclY01hY3JvOiBvbGxlaCA+PCBoZWxsbycsIF9jLCBoZWxsbylcclxuICAgICAgY29uc3Qga2V5cyA9IHtcclxuICAgICAgICAnY29kZTpLZXlBJyhfZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCVjTWFjcm86ICR7X2UuY29kZX1gLCBfYywgX2UpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY29kZTp7S2V5QX0nKF9lKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJWNBbHQgTWFjcm86ICR7X2UuY29kZX1gLCBfYywgX2UpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAna2V5OnVzJyhfZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCVjVVMgQ291bnRyeWAsIF9jLCBfZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgICdrZXk6dScoX2UpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAlY1UgQ2hhcmAsIF9jLCBfZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAga2V5c1snY29kZTpLZXlBJyAgXS5fdGl0bGUgPSAndGhpcyBpcyBLZXlBJ1xyXG4gICAgICBrZXlzWydjb2RlOntLZXlBfSddLl90aXRsZSA9ICd0aGlzIGlzIHtLZXlBfSdcclxuICAgICAga2V5c1sna2V5OnVzJyAgICAgXS5fdGl0bGUgPSAndGhpcyBpcyB1cydcclxuICAgICAga2V5c1sna2V5OnUnICAgICAgXS5fdGl0bGUgPSAndGhpcyBpcyB1J1xyXG5cclxuICAgICAgd2luZG93Lm1pdG0ubWFjcm9rZXlzID0ga2V5c1xyXG4gICAgICB3aW5kb3cubWl0bS5hdXRvZmlsbCA9IFsnaW5wdXRbdHlwZT1cInBhc3N3b3JkXCJdID0+IHBhc3N3b3JkJ11cclxuICAgICAgd2luZG93Lm1pdG0uYXV0b2J1dHRvbnMgID0gcmJ1dHRvbnNcclxuICAgICAgd2luZG93Lm1pdG0ucmlnaHRidXR0b25zID0gcmJ1dHRvbnNcclxuICAgICAgd2luZG93Lm1pdG0ubGVmdGJ1dHRvbnMgID0gcmJ1dHRvbnNcclxuICAgICAgcmV0dXJuIG9ic2VydmVPbmNlXHJcbiAgICB9LFxyXG4gICAgemVybzogJzAnXHJcbiAgfVxyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGhlbGxvID0gJ2dsb2JhbCdcclxuXHJcbiAgd2luZG93Lm1pdG0ubWFjcm9zID0ge2dsb2JhbDogaGVsbG99XHJcbiAgcmV0dXJuIHdpbmRvdy5taXRtLm1hY3Jvc1xyXG59XHJcbiIsIi8vIFtDdHJsXSArIFtBbHRdICsgW0FdID0+IHJ1biBob3RrZXkgS2V5QVxuLy8gW0N0cmxdICsgW1NoaWZ0XSA9PiBIaWRlIC8gU2hvdyBCdXR0b25zXG5jb25zdCB7bWFjcm9zfSA9IHdpbmRvdy5taXRtXG5sZXQgX2JvZHkxID0gcmVxdWlyZSgnLi9tYWNyb3MnKVxuaWYgKHR5cGVvZiBfYm9keTE9PT0nZnVuY3Rpb24nKSB7XG4gIF9ib2R5MSA9IF9ib2R5MSgpXG59XG5sZXQgZ2xvYmFsID0gcmVxdWlyZSgnLi4vLi4vX2dsb2JhbF8vX21hY3Jvc18vbWFjcm9zJylcbmlmICh0eXBlb2YgZ2xvYmFsPT09J2Z1bmN0aW9uJykgeyBcbiAgZ2xvYmFsID0gZ2xvYmFsKClcbn1cbndpbmRvdy5taXRtLm1hY3JvcyA9IHtcbiAgLi4uZ2xvYmFsLFxuICAuLi5tYWNyb3MsXG4gIC4uLl9ib2R5MSxcbn1cbiJdLCJuYW1lcyI6WyJyZXF1aXJlJCQwIiwicmVxdWlyZSQkMSJdLCJtYXBwaW5ncyI6Ijs7O0VBQ0EsTUFBTSxFQUFFLEdBQUcsd0JBQXVCO0FBQ2xDO0VBQ0EsTUFBTSxRQUFRLEdBQUc7RUFDakIsRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0I7RUFDdkMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxFQUFFLGVBQWUsRUFBQztFQUN0RSxHQUFHO0VBQ0gsRUFBRSxlQUFlLEVBQUUsa0JBQWtCO0VBQ3JDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxlQUFlLEVBQUM7RUFDdEUsR0FBRztFQUNILEVBQUM7QUFDRDtFQUNBLFlBQWMsR0FBRyxNQUFNO0VBQ3ZCLEVBQUUsTUFBTSxLQUFLLEdBQUcsUUFBTztBQUN2QjtFQUNBLEVBQUUsZUFBZSxXQUFXLEdBQUc7RUFDL0IsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLEVBQUUs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
