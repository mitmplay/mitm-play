var app = (function () {
  'use strict';

  const _c = 'color: cornflowerblue';

  const rbuttons = {
    'Right|#1445d733': async function () {
      console.log('%cMacro: Clicked on "Right" button', 'color:#bc0099');
    },
    'Two|#1445d733': async function () {
      console.log('%cMacro: Clicked on "Right" button', 'color:#bc0099');
    },
  };

  var macros$2 = () => {
    const hello = 'world';

    async function observeOnce() {
      console.log('%cMacro: execute after observer once', _c);
    }
    return {
      '/'() {
        console.log('%cMacro: olleh >< hello', _c, hello);
        const keys = {
          'code:KeyA'(_e) {
            console.log(`%cMacro: ${_e.code}`, _c, _e);
          },
          'code:{KeyA}'(_e) {
            console.log(`%cAlt Macro: ${_e.code}`, _c, _e);
          },
          'key:us'(_e) {
            console.log(`%cUS Country`, _c, _e);
          },
          'key:u'(_e) {
            console.log(`%cU Char`, _c, _e);
          }
        };
        keys['code:KeyA'  ]._title = 'this is KeyA';
        keys['code:{KeyA}']._title = 'this is {KeyA}';
        keys['key:us'     ]._title = 'this is us';
        keys['key:u'      ]._title = 'this is u';

        window.mitm.macrokeys = keys;
        window.mitm.autofill = ['input[type="password"] => password'];
        window.mitm.autobuttons  = rbuttons;
        window.mitm.rightbuttons = rbuttons;
        window.mitm.leftbuttons  = rbuttons;
        return observeOnce
      },
      zero: '0'
    }
  };

  const dodol = 'lipret';
  console.log(dodol);
  var test = dodol;

  var hi_macros = () => {
    const lol = test;

    window.mitm.macros = {
        one: '1',
        two: '2',
        thr: '3',
        fou: '4',
    };
    console.log(lol);
    return window.mitm.macros
  };

  var macros$1 = () => {
    const hello = 'global';

    window.mitm.macros = {global: hello};
    return window.mitm.macros
  };

  // [Ctrl] + [Alt] + [A] => run hotkey KeyA
  // [Ctrl] + [Shift] => Hide / Show Buttons
  const {macros} = window.mitm;
  let _body1 = macros$2;
  if (typeof _body1==='function') { 
    _body1 = _body1();
  }
  let _body2 = hi_macros;
  if (typeof _body2==='function') {
    _body2 = _body2();
  }
  let global = macros$1;
  if (typeof global==='function') { 
    global = global();
  }
  window.mitm.macros = {
    ...global,
    ...macros,
    ..._body1,
    ..._body2
  };

  var hi_build = {

  };

  return hi_build;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlAbWFjcm9zLmpzIiwic291cmNlcyI6WyIuLi9fbWFjcm9zXy9tYWNyb3MuanMiLCIuLi9fbWFjcm9zXy90ZXN0LmpzIiwiLi4vX21hY3Jvc18vaGlAbWFjcm9zLmpzIiwiLi4vLi4vX2dsb2JhbF8vX21hY3Jvc18vbWFjcm9zLmpzIiwiLi4vX21hY3Jvc18vaGlAYnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge2RlZmF1bHQ6QXBwfSA9IHJlcXVpcmUoJy4uL19zdmVsdGVfL1ZCb3guc3ZlbHRlJylcclxuY29uc3QgX2MgPSAnY29sb3I6IGNvcm5mbG93ZXJibHVlJ1xyXG5cclxuY29uc3QgcmJ1dHRvbnMgPSB7XHJcbiAgJ1JpZ2h0fCMxNDQ1ZDczMyc6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKCclY01hY3JvOiBDbGlja2VkIG9uIFwiUmlnaHRcIiBidXR0b24nLCAnY29sb3I6I2JjMDA5OScpXHJcbiAgfSxcclxuICAnVHdvfCMxNDQ1ZDczMyc6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKCclY01hY3JvOiBDbGlja2VkIG9uIFwiUmlnaHRcIiBidXR0b24nLCAnY29sb3I6I2JjMDA5OScpXHJcbiAgfSxcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgaGVsbG8gPSAnd29ybGQnXHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIG9ic2VydmVPbmNlKCkge1xyXG4gICAgY29uc29sZS5sb2coJyVjTWFjcm86IGV4ZWN1dGUgYWZ0ZXIgb2JzZXJ2ZXIgb25jZScsIF9jKVxyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgJy8nKCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnJWNNYWNybzogb2xsZWggPjwgaGVsbG8nLCBfYywgaGVsbG8pXHJcbiAgICAgIGNvbnN0IGtleXMgPSB7XHJcbiAgICAgICAgJ2NvZGU6S2V5QScoX2UpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAlY01hY3JvOiAke19lLmNvZGV9YCwgX2MsIF9lKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2NvZGU6e0tleUF9JyhfZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCVjQWx0IE1hY3JvOiAke19lLmNvZGV9YCwgX2MsIF9lKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2tleTp1cycoX2UpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAlY1VTIENvdW50cnlgLCBfYywgX2UpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAna2V5OnUnKF9lKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJWNVIENoYXJgLCBfYywgX2UpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGtleXNbJ2NvZGU6S2V5QScgIF0uX3RpdGxlID0gJ3RoaXMgaXMgS2V5QSdcclxuICAgICAga2V5c1snY29kZTp7S2V5QX0nXS5fdGl0bGUgPSAndGhpcyBpcyB7S2V5QX0nXHJcbiAgICAgIGtleXNbJ2tleTp1cycgICAgIF0uX3RpdGxlID0gJ3RoaXMgaXMgdXMnXHJcbiAgICAgIGtleXNbJ2tleTp1JyAgICAgIF0uX3RpdGxlID0gJ3RoaXMgaXMgdSdcclxuXHJcbiAgICAgIHdpbmRvdy5taXRtLm1hY3Jva2V5cyA9IGtleXNcclxuICAgICAgd2luZG93Lm1pdG0uYXV0b2ZpbGwgPSBbJ2lucHV0W3R5cGU9XCJwYXNzd29yZFwiXSA9PiBwYXNzd29yZCddXHJcbiAgICAgIHdpbmRvdy5taXRtLmF1dG9idXR0b25zICA9IHJidXR0b25zXHJcbiAgICAgIHdpbmRvdy5taXRtLnJpZ2h0YnV0dG9ucyA9IHJidXR0b25zXHJcbiAgICAgIHdpbmRvdy5taXRtLmxlZnRidXR0b25zICA9IHJidXR0b25zXHJcbiAgICAgIHJldHVybiBvYnNlcnZlT25jZVxyXG4gICAgfSxcclxuICAgIHplcm86ICcwJ1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBkb2RvbCA9ICdsaXByZXQnXHJcbmNvbnNvbGUubG9nKGRvZG9sKVxyXG5tb2R1bGUuZXhwb3J0cyA9IGRvZG9sXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGxvbCA9IHJlcXVpcmUoJy4vdGVzdCcpXHJcbiAgY29uc3QgaGVsbG8gPSAnaGkgbWFjcm9zJ1xyXG5cclxuICB3aW5kb3cubWl0bS5tYWNyb3MgPSB7XHJcbiAgICAgIG9uZTogJzEnLFxyXG4gICAgICB0d286ICcyJyxcclxuICAgICAgdGhyOiAnMycsXHJcbiAgICAgIGZvdTogJzQnLFxyXG4gIH1cclxuICBjb25zb2xlLmxvZyhsb2wpXHJcbiAgcmV0dXJuIHdpbmRvdy5taXRtLm1hY3Jvc1xyXG59IiwibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgaGVsbG8gPSAnZ2xvYmFsJ1xyXG5cclxuICB3aW5kb3cubWl0bS5tYWNyb3MgPSB7Z2xvYmFsOiBoZWxsb31cclxuICByZXR1cm4gd2luZG93Lm1pdG0ubWFjcm9zXHJcbn1cclxuIiwiLy8gW0N0cmxdICsgW0FsdF0gKyBbQV0gPT4gcnVuIGhvdGtleSBLZXlBXG4vLyBbQ3RybF0gKyBbU2hpZnRdID0+IEhpZGUgLyBTaG93IEJ1dHRvbnNcbmNvbnN0IHttYWNyb3N9ID0gd2luZG93Lm1pdG1cbmxldCBfYm9keTEgPSByZXF1aXJlKCcuL21hY3JvcycpXG5pZiAodHlwZW9mIF9ib2R5MT09PSdmdW5jdGlvbicpIHsgXG4gIF9ib2R5MSA9IF9ib2R5MSgpXG59XG5sZXQgX2JvZHkyID0gcmVxdWlyZSgnLi9oaUBtYWNyb3MuanMnKVxuaWYgKHR5cGVvZiBfYm9keTI9PT0nZnVuY3Rpb24nKSB7XG4gIF9ib2R5MiA9IF9ib2R5MigpXG59XG5sZXQgZ2xvYmFsID0gcmVxdWlyZSgnLi4vLi4vX2dsb2JhbF8vX21hY3Jvc18vbWFjcm9zJylcbmlmICh0eXBlb2YgZ2xvYmFsPT09J2Z1bmN0aW9uJykgeyBcbiAgZ2xvYmFsID0gZ2xvYmFsKClcbn1cbndpbmRvdy5taXRtLm1hY3JvcyA9IHtcbiAgLi4uZ2xvYmFsLFxuICAuLi5tYWNyb3MsXG4gIC4uLl9ib2R5MSxcbiAgLi4uX2JvZHkyXG59XG4iXSwibmFtZXMiOlsicmVxdWlyZSQkMCIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIl0sIm1hcHBpbmdzIjoiOzs7RUFDQSxNQUFNLEVBQUUsR0FBRyx3QkFBdUI7QUFDbEM7RUFDQSxNQUFNLFFBQVEsR0FBRztFQUNqQixFQUFFLGlCQUFpQixFQUFFLGtCQUFrQjtFQUN2QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEVBQUUsZUFBZSxFQUFDO0VBQ3RFLEdBQUc7RUFDSCxFQUFFLGVBQWUsRUFBRSxrQkFBa0I7RUFDckMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxFQUFFLGVBQWUsRUFBQztFQUN0RSxHQUFHO0VBQ0gsRUFBQztBQUNEO0VBQ0EsWUFBYyxHQUFHLE1BQU07RUFDdkIsRUFBRSxNQUFNLEtBQUssR0FBRyxRQUFPO0FBQ3ZCO0VBQ0EsRUFBRSxlQUFlLFdBQVcsR0FBRztFQUMvQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLEVBQUUsRUFBRSxFQUFDO0VBQzNELEdBQUc7RUFDSCxFQUFFLE9BQU87RUFDVCxJQUFJLEdBQUcsR0FBRztFQUNWLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFDO0VBQ3ZELE1BQU0sTUFBTSxJQUFJLEdBQUc7RUFDbkIsUUFBUSxXQUFXLENBQUMsRUFBRSxFQUFFO0VBQ3hCLFVBQVUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFDO0VBQ3BELFNBQVM7RUFDVCxRQUFRLGFBQWEsQ0FBQyxFQUFFLEVBQUU7RUFDMUIsVUFBVSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FB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
