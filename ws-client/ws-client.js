(()=>{var __defProp=Object.defineProperty;var __defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var require_ws_postmessage=__commonJS({"ws-client/_src/_ws_postmessage.js"(exports,module){module.exports=()=>{function receiveMessage(event){if(window.mitm.client.postmessage){console.log(`>>> Postmessage: ${event.origin} => https://${location.host}`,event.data)}}window.addEventListener("message",receiveMessage,false)}}});var require_ws_client=__commonJS({"ws-client/_src/_ws_client.js"(exports,module){var _c2="color: #bada55";module.exports=()=>{let windowRef;return{_help({data}){console.log(data)},_ping({data}){console.log(data)},_open({data}){const features="directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,width=800,height=600";windowRef=window.open(data.url,"_logs",features);windowRef.blur()},_style({data}){const{q,css}=data;document.querySelectorAll(q).forEach(node=>node.style.cssText=css)},_saveTags({routes}){if(!location.origin.match("chrome-extension")){console.log("%cWs: Update routes",_c2);window.mitm.routes=routes}},_files({data,typ}){const{files}=window.mitm;console.warn(`receive brodcast ${typ}`);for(const key in files[`${typ}_events`]){console.warn(files[`${typ}_events`][key]+"");files[`${typ}_events`][key](data)}},_setClient({data}){console.log("%cWs: _setClient",_c2,data);window.mitm.client=data}}}}});var require_ws_msg_parser=__commonJS({"ws-client/_src/_ws_msg-parser.js"(exports,module){var _ws_client=require_ws_client();var _ws_wccmd=_ws_client();module.exports=(event,msg)=>{if(window.mitm.argv.debug){if(msg.length>40){console.log(">>> ws-message: `%s...`",msg.slice(0,40))}else{console.log(">>> ws-message: `%s`",msg)}}const arr=msg.replace(/\s+$/,"").match(/^ *([\w:]+) *(\{.*)/);if(arr){let[,cmd,json]=arr;try{if(typeof json==="string"){json=JSON.parse(json)}}catch(error){console.error(json,error)}if(window._ws_queue[cmd]){const handler=window._ws_queue[cmd];delete window._ws_queue[cmd];handler(json.data)}else if(_ws_wccmd[cmd]){_ws_wccmd[cmd].call(event,json)}}}}});var require_ws_in_iframe=__commonJS({"ws-client/_src/_ws_in-iframe.js"(exports,module){module.exports=()=>{let ifrm;try{ifrm=window.self!==window.top}catch(e){ifrm=true}return ifrm?"iframe":"window"}}});var require_ws_vendor=__commonJS({"ws-client/_src/_ws_vendor.js"(exports,module){module.exports=()=>{const{vendor}=navigator;const browser={"":"firefox","Google Inc.":"chromium","Apple Computer, Inc.":"webkit"}[vendor];return browser}}});var require_ws_init_socket=__commonJS({"ws-client/_src/_ws_init-socket.js"(exports,module){var _ws_msgParser=require_ws_msg_parser();var _ws_inIframe=require_ws_in_iframe();var _ws_vendor=require_ws_vendor();var _c2="color: #bada55";module.exports=()=>{window._ws_queue={};window._ws_connected=false;const{__args,__flag}=window.mitm;if(window._ws_connect===void 0){window._ws_connect={}}const onopen=data=>{function ws_send(){for(const key in window._ws_connect){const fn=window._ws_connect[key];window._ws_connected_send=true;console.log(`%cWs: ${fn+""}`,_c2);fn(data)}}if(__flag["ws-connect"]){console.log("%cWs: open connection",_c2)}console.timeEnd("ws");window._ws_connected=true;setTimeout(ws_send,1);setTimeout(()=>{if(!window._ws_connected_send){console.error("RETRY..........");ws_send()}},10)};const onclose=function(){if(__flag["ws-connect"]){console.log("%cWs: close connection",_c2)}};const onmessage=function(e){if(__flag["on-message"]){console.log("%cWs: on-message:",_c2,e.data)}_ws_msgParser(e,e.data)};const connect=__args.nosocket===void 0;if(connect||window.chrome&&chrome.tabs){const vendor=["firefox","webkit"].includes(_ws_vendor());const pre=vendor?"ws":"wss";const prt=vendor?"3002":"3001";const url=`${pre}://localhost:${prt}/ws?page=${_ws_inIframe()}&url=${document.URL.split("?")[0]}`;let ws;try{ws=new WebSocket(url)}catch(error){console.error(error)}console.time("ws");window._ws=ws;ws.onopen=onopen;ws.onclose=onclose;ws.onmessage=onmessage}if(__flag["ws-connect"]){console.log(`%cWs: ${connect?"init":"off"} connection`,_c2)}}}});var require_screenshot=__commonJS({"ws-client/_src/_screenshot.js"(exports,module){async function screnshot(json){const{__args}=window.mitm;if([true,"off"].includes(__args.nosocket)){return new Promise(function(resolve,reject){try{const config={method:"POST",headers:{"Accept":"application/json","Content-Type":"application/json"},body:JSON.stringify(json)};fetch("/mitm-play/screnshot.json",config).then(function(response){resolve(response.json())}).then(function(data){resolve(data)})}catch(error){reject(error)}})}else{return new Promise(function(resolve,reject){try{window.ws__send("screenshot",json,resolve)}catch(error){reject(error)}})}}module.exports=screnshot}});var require_ws_namespace=__commonJS({"ws-client/_src/_ws_namespace.js"(exports,module){module.exports=()=>{const{hostname:host}=location;let namespace;function toRegex(str){return str.replace(/\./g,"\\.").replace(/\?/g,"\\?")}for(const key in window.mitm.routes){if(host.match(toRegex(key.replace(/~/g,"[^.]*")))){namespace=key;break}}return namespace}}});var require_ws_screenshot=__commonJS({"ws-client/_src/_ws_screenshot.js"(exports,module){var _screenshot=require_screenshot();var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var _c2="color: #bada55";var act;function screenshot(e){if(mitm.argv.lazyclick){if(mitm.screenshot){window.mitm.screenshot=void 0;console.log(">>> delay action");return}if(act){act=void 0;return}}const namespace=_ws_namespace();const browser=_ws_vendor();const host=location.origin.replace("://","~~");const route=window.mitm.routes[namespace];const{selector}=route.screenshot;const arr=document.body.querySelectorAll(selector);const fname=location.pathname.replace(/^\//g,"~");const delay=mitm.argv.lazyclick===true?700:mitm.argv.lazyclick;for(const el of arr){let node=e.target;while(el!==node&&node!==null&&node!==document.body){node=node.parentNode}if(node!==document.body){const _page=window["xplay-page"];const params={namespace,_page,host,browser};params.fname=fname==="~"?"~_":fname;_screenshot(params);if(mitm.argv.lazyclick){window.mitm.screenshot=e.target;e.stopImmediatePropagation();e.stopPropagation();e.preventDefault();mitm.lastEvent=e;setTimeout(()=>{act=window.mitm.screenshot;if(act){act.click();act=void 0}else{console.log("%cWs: delay action undefined",_c2)}},delay)}else{mitm.lastEvent=e}return}}}function eventclick(e){mitm.lastEvent=e}module.exports=()=>{const route=window.mitm.routes[_ws_namespace()];window.addEventListener("DOMContentLoaded",()=>{const body=document.querySelector("body");if(route&&route.screenshot){body.addEventListener("click",screenshot)}else{body.addEventListener("click",eventclick)}})}}});var require_ws_location=__commonJS({"ws-client/_src/_ws_location.js"(exports,module){var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var wait=ms=>new Promise(resolve=>setTimeout(resolve,ms));var _c2="color: #bada55";module.exports=()=>{const containerStyle1="position: fixed;z-index: 99999;right: 3px;";const containerStyle2="position: fixed;z-index: 99999;left:  3px;";const containerStyle3="position: fixed;z-index: 99999;right: 3px; top: 20px; text-align: end;";const buttonStyle="";const style=`
  .mitm-btn {
    border: none;
    font-size: 8px;
    cursor: pointer;
    border-radius: 3px;
    font-family: monaco, Consolas, "Lucida Console", monospace;
  }
  .mitm-btn:hover{
    text-decoration:underline;
  }
  .bgroup-right .mitm-br,
  .bgroup-left .mitm-br{
    display:table;
  }`;const event=new Event("urlchanged");let container={right3:{},right:{},left:{}};let ctrl=false;let button={};let bgroup={right3:{},right:{},left:{}};let intervId;let observerfn=[];function toRegex(pathMsg){let[path,msg]=pathMsg.split("=>").map(item=>item.trim());path=path.replace(/\./g,"\\.").replace(/\?/g,"\\?");return{path,msg}}function createButton(buttons,pos){let br;for(const id in buttons){const[caption,color,klas]=id.split("|");const btn=document.createElement("button");const fn2=buttons[id];btn.onclick=async e=>{let arr=fn2(e);if(arr instanceof Promise){arr=await arr}if(Array.isArray(arr)){await play(arr)}};btn.innerText=caption;btn.classList.add("mitm-btn");btn.classList.add(`${pos}`);btn.classList.add(klas||caption);btn.style=buttonStyle+(color?`background: ${color};`:"");if(pos==="right"){br=document.createElement("span");br.innerHTML="&nbsp;";bgroup[pos].appendChild(br);bgroup[pos].appendChild(btn)}else{br=document.createElement("span");br.className="mitm-br";bgroup[pos].appendChild(btn);bgroup[pos].appendChild(br)}}}function setButtons(buttons,position){if(bgroup[position]){bgroup[position].innerHTML="";createButton(buttons,position)}}let debunk;let onces={};async function urlChange(event2){const namespace=_ws_namespace();if(window.mitm.autofill){delete window.mitm.autofill}if(window.mitm.autointerval){clearInterval(intervId);delete window.mitm.autointerval}if(window.mitm.autobuttons){delete window.mitm.autobuttons}if(window.mitm.rightbuttons){delete window.mitm.rightbuttons}if(window.mitm.leftbuttons){delete window.mitm.leftbuttons}if(window.mitm.macrokeys){delete window.mitm.macrokeys}if(namespace){const{href,origin}=location2;const _href=href.replace(origin,"");const{_macros_,macros}=window.mitm;observerfn=[];for(const key in macros){const{path,msg}=toRegex(key);if(_href.match(path)){button.innerHTML=msg||"Entry";_macros_&&_macros_();let fn2=macros[key]();if(fn2 instanceof Promise){fn2=await fn2}if(typeof fn2==="function"){observerfn.push(fn2)}debunk&&clearTimeout(debunk);debunk=setTimeout(()=>{onces={};debunk=void 0;const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");if(window.mitm.autofill){autobuttons&&setButtons(__spreadProps(__spreadValues({},autobuttons),{"Entry"(){let{autofill}=window.mitm;if(typeof autofill==="function"){autofill=autofill()}play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},0)}}}container.right3.style=containerStyle3;container.right.style=containerStyle1;container.left.style=containerStyle2;const visible=window.mitm.autofill;button.style=buttonStyle+(visible?"background-color: azure;":"display: none;");if(typeof window.mitm.autointerval==="function"){intervId=setInterval(window.mitm.autointerval,500)}ctrl=false}const vendor=_ws_vendor();if(["firefox","webkit"].includes(vendor)||chrome&&!chrome.tabs){document.querySelector("html").addEventListener("keydown",keybCtrl);window.addEventListener("urlchanged",urlChange);if(document.readyState!=="loading"){init()}else{window.addEventListener("DOMContentLoaded",init)}}else{return}const fn=history.pushState;history.pushState=function(){fn.apply(history,arguments);compareHref()};_play=json=>{return new Promise(function(resolve,reject){try{window.ws__send("autofill",json,resolve)}catch(error){reject(error)}})};_post=json=>{return new Promise(function(resolve,reject){try{const config={method:"POST",headers:{"Accept":"application/json","Content-Type":"application/json"},body:JSON.stringify(json)};fetch("/mitm-play/play.json",config).then(function(response){resolve(response.json())}).then(function(data){resolve(data)})}catch(error){reject(error)}})};async function play(autofill){const{__args}=window.mitm;if(autofill){if(typeof autofill==="function"){autofill=autofill()}const browser=_ws_vendor();const lenth=autofill.length;const _page=window["xplay-page"];const _frame=window["xplay-frame"];const _json={autofill,browser,_page,_frame};const msg=lenth===1?`  ${autofill}`:JSON.stringify(autofill,null,2);console.log(`%cMacros: ${msg}`,_c2);let result;if([true,"off"].includes(__args.nosocket)){result=await _post(_json)}else{result=await _play(_json)}return result}}window.mitm.fn.play=play;window.mitm.fn.wait=wait;function keybCtrl(e){const{macrokeys}=window.mitm;if(e.ctrlKey&&e.key==="Shift"){ctrl=!ctrl;container.right3.style=containerStyle3+(!ctrl?"":"display: none;");container.right.style=containerStyle1+(!ctrl?"":"display: none;");container.left.style=containerStyle2+(!ctrl?"":"display: none;")}else if(e.ctrlKey&&e.altKey){const msg=`ctrl + alt + ${e.code}`;console.log(`%cMacros: ${msg}`,_c2);if(macrokeys){let macro=macrokeys[e.code];if(macro){macro=macro(e);if(Array.isArray(macro)){let macroIndex=0;const interval=setInterval(()=>{let selector=macro[macroIndex];if(selector.match(/^ *[=-]>/)){const activeElement=CssSelectorGenerator.getCssSelector(document.activeElement);selector=`${activeElement} ${selector}`}play([selector]);macroIndex+=1;if(macroIndex>=macro.length){clearInterval(interval)}},100)}}}}}const{location:location2}=document;let oldHref=location2.href;let oDebunk=void 0;function compareHref(nodes){if(oldHref!=location2.href){window.dispatchEvent(event);oldHref=location2.href}else{if(observerfn.length){oDebunk&&clearTimeout(oDebunk);oDebunk=setTimeout(()=>{oDebunk=void 0;for(const fn2 of observerfn){const name=fn2.name;if(name&&name.match(/Once$/)){if(onces[name]){continue}else{onces[name]=true}}fn2(nodes)}const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");const{autofill}=window.mitm;if(autofill){autobuttons&&setButtons(__spreadProps(__spreadValues({},autobuttons),{"Entry"(){play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},100)}}}function init(){const html=document.querySelector("html");const htmlref=html.firstElementChild;const styleButtons=document.createElement("style");const divTopRight3=document.createElement("div");const divTopRight=document.createElement("div");const divTopLeft=document.createElement("div");styleButtons.innerHTML=style;divTopRight3.innerHTML=`<span class="bgroup-right"></span>`;divTopRight.innerHTML=`<span class="bgroup-right"></span>`;divTopLeft.innerHTML=`<span class="bgroup-left"></span>`;divTopRight.className="mitm autofill-container";divTopLeft.className="mitm autofill-container";divTopRight3.style=containerStyle3;divTopRight.style=containerStyle1;divTopLeft.style=containerStyle2;html.insertBefore(styleButtons,htmlref);html.insertBefore(divTopRight3,htmlref);html.insertBefore(divTopRight,htmlref);html.insertBefore(divTopLeft,htmlref);setTimeout(()=>{container.right3=divTopRight3;container.right=divTopRight;container.left=divTopLeft;button.style=`${buttonStyle}background-color: azure;`;bgroup.right3=divTopRight3.children[0];bgroup.right=divTopRight.children[0];bgroup.left=divTopLeft.children[0];urlChange(event);observed()},0)}const observer=new MutationObserver(compareHref);window.observer=observer;function observed(){observer.disconnect();observer.observe(document.body,{subtree:true,childList:true})}}}});var require_ws_debounce=__commonJS({"ws-client/_src/_ws_debounce.js"(exports,module){function debounce(fn,delay=500){let _timeout;return function(){const _this=this;const args=arguments;_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{fn.apply(_this,args)},delay)}}module.exports=debounce}});var require_ws_route=__commonJS({"ws-client/_src/_ws_route.js"(exports,module){var _ws_namespace=require_ws_namespace();module.exports=()=>{const namespace=_ws_namespace();let route=window.mitm.routes[namespace];const{_subns:s}=route._childns;if(s&&mitm.routes[s]){route=mitm.routes[s]}return route}}});var require_ws_observer=__commonJS({"ws-client/_src/_ws_observer.js"(exports,module){var _screenshot=require_screenshot();var _ws_namespace=require_ws_namespace();var _ws_debounce=require_ws_debounce();var _ws_vendor=require_ws_vendor();var _ws_route=require_ws_route();module.exports=()=>{if(location.origin.match("chrome-extension")){return}const host=location.origin.replace("://","~~");const sshot={};const nodes={};let route=_ws_route();if(route&&route.screenshot){const{observer:ob2}=route.screenshot;for(const id in ob2){let el={};if(ob2[id]===true){el={title:"notitle",insert:true,remove:true}}if(typeof ob2[id]!=="string"){el={title:"nocapture",insert:false,remove:false}}else{const arr=ob2[id].split(":");arr[1].split(",").map(e=>{el[e]=true});el.title=arr[0]}sshot[id]=el;nodes[id]={insert:false,remove:true}}}let ob;let fname;const namespace=_ws_namespace();const browser=_ws_vendor();const callback=function(){if(route&&route.screenshot){ob=route.screenshot.observer}const _page=window["xplay-page"];for(const id in nodes){const el=document.body.querySelectorAll(id);if(el.length){if(!nodes[id].insert){nodes[id].insert=true;if(nodes[id].remove!==void 0){nodes[id].remove=false}if(ob&&typeof ob[id]==="function"){const nod=el[0]||el;if(nod._ws_count===void 0){nod._ws_count=0}nod._ws_count+=1;if(nod._ws_count<2){ob[id](nod)}}if(sshot[id].insert){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`~${fname}-${sshot[id].title}-insert`;const params={namespace,_page,host,fname,browser};_screenshot(params)}}}else{if(!nodes[id].remove){nodes[id].remove=true;nodes[id].insert=false;if(sshot[id].remove){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`~${fname}-${sshot[id].title}-remove`;const params={namespace,_page,host,fname,browser};_screenshot(params)}}}}};document.addEventListener("DOMContentLoaded",()=>{const observer=new MutationObserver(_ws_debounce(callback,100));observer.observe(document.body,{attributes:true,childList:true,subtree:true})})}}});var require_ws_general=__commonJS({"ws-client/_src/_ws_general.js"(exports,module){var t64="Wabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZh";var _c2="color: #bada55";var nanoid=(size=8)=>{let id="";while(size-- >0){id+=t64[Math.random()*64|0]}return id};module.exports=()=>{const{_ws}=window;window.ws_broadcast=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`broadcast${JSON.stringify(msg)}`)};window.ws_emitpage=(json,regex="")=>{const msg={data:json,regex};_ws.send(`emitpage${JSON.stringify(msg)}`)};window.ws__style=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`_style${JSON.stringify(msg)}`)};window.ws__ping=json=>{const msg={data:json};_ws.send(`_ping${JSON.stringify(msg)}`)};window.ws__help=()=>{_ws.send("_help{}")};window.ws__open=json=>{const msg={data:json};_ws.send(`_open${JSON.stringify(msg)}`)};window.ws__send=(cmd,data,handler)=>{const{__flag}=window.mitm;const id=nanoid();const key=`${cmd}:${id}`;window._ws_queue[key]=handler||(w=>{});setTimeout(function(){if(window._ws_queue[key]){delete window._ws_queue[key];console.log("%cWs: ws timeout!",_c2,key)}},5e3);const params=`${key}${JSON.stringify({data})}`;_ws.send(params)}}}});var require_ws_csp_err=__commonJS({"ws-client/_src/_ws_csp-err.js"(exports,module){var _ws_namespace=require_ws_namespace();var _timeout;var _csp={};module.exports=()=>{const cspError=function(e){const{hostname:host}=location;const namespace=_ws_namespace();const path=location.pathname.replace(/^\//,"").replace(/\//g,"-");const{blockedURI,disposition,documentURI,effectiveDirective,originalPolicy,timeStamp,type,violatedDirective}=e;const typ=`[${disposition}] ${documentURI}`;if(!_csp[typ]){_csp[typ]={}}if(!_csp[typ]._general_){_csp[typ]._general_={policy:originalPolicy,namespace,host,path}}const _doc=_csp[typ];if(!_doc[violatedDirective]){_doc[violatedDirective]={}}const _err=_doc[violatedDirective];if(!_err[blockedURI]){_err[blockedURI]={}}const _match=originalPolicy.match(`${violatedDirective} [^;]+;`);const directive=_match?_match[0]:effectiveDirective;_err[blockedURI]={directive,timeStamp,type};_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{console.log(">>> CSP:",_csp);_csp={}},4e3)};if(window.mitm.client.csp){document.addEventListener("securitypolicyviolation",cspError)}}}});var require_ws_macros=__commonJS({"ws-client/_src/_ws_macros.js"(exports,module){var _c2="color: #bada55";module.exports=function(){if(window._ws_connect===void 0){window._ws_connect={}}window.mitm.fn.hotKeys=obj=>{window.mitm.macrokeys=__spreadValues(__spreadValues({},window.mitm.macrokeys),obj)};window.mitm.fn.autoclick=()=>{setTimeout(()=>{document.querySelector(".btn-autofill").click()},1e3)};window.mitm.fn.getCookie=name=>{const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2)return parts.pop().split(";").shift()};window.mitm._macros_=()=>{window.mitm.macrokeys={}};function init(_d){let msg="Macros: executed after ws open";console.log(`%c${msg}`,_c2,_d)}window._ws_connect.macrosOnMount=init}}});var _ws_postmessage=require_ws_postmessage();var _ws_initSocket=require_ws_init_socket();var _ws_screenshot=require_ws_screenshot();var _ws_location=require_ws_location();var _ws_observer=require_ws_observer();var _ws_general=require_ws_general();var _ws_cspErr=require_ws_csp_err();var _ws_macros=require_ws_macros();var _c="color: red";_ws_postmessage();_ws_initSocket();_ws_screenshot();_ws_location();_ws_observer();_ws_general();_ws_cspErr();_ws_macros();console.log("%cWs: ws-client loaded...",_c);})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiX3NyYy9fd3NfcG9zdG1lc3NhZ2UuanMiLCAiX3NyYy9fd3NfY2xpZW50LmpzIiwgIl9zcmMvX3dzX21zZy1wYXJzZXIuanMiLCAiX3NyYy9fd3NfaW4taWZyYW1lLmpzIiwgIl9zcmMvX3dzX3ZlbmRvci5qcyIsICJfc3JjL193c19pbml0LXNvY2tldC5qcyIsICJfc3JjL19zY3JlZW5zaG90LmpzIiwgIl9zcmMvX3dzX25hbWVzcGFjZS5qcyIsICJfc3JjL193c19zY3JlZW5zaG90LmpzIiwgIl9zcmMvX3dzX2xvY2F0aW9uLmpzIiwgIl9zcmMvX3dzX2RlYm91bmNlLmpzIiwgIl9zcmMvX3dzX3JvdXRlLmpzIiwgIl9zcmMvX3dzX29ic2VydmVyLmpzIiwgIl9zcmMvX3dzX2dlbmVyYWwuanMiLCAiX3NyYy9fd3NfY3NwLWVyci5qcyIsICJfc3JjL193c19tYWNyb3MuanMiLCAiX3NyYy93cy1jbGllbnQuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qIGdsb2JhbCBsb2NhdGlvbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZSAoZXZlbnQpIHtcclxuICAgIGlmICh3aW5kb3cubWl0bS5jbGllbnQucG9zdG1lc3NhZ2UpIHtcclxuICAgICAgY29uc29sZS5sb2coYD4+PiBQb3N0bWVzc2FnZTogJHtldmVudC5vcmlnaW59ID0+IGh0dHBzOi8vJHtsb2NhdGlvbi5ob3N0fWAsIGV2ZW50LmRhdGEpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgcmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKVxyXG5cclxuICAvLyBpZiAoIWNocm9tZS53aW5kb3dzKSB7XHJcbiAgLy8gICBmdW5jdGlvbiByZXBvcnRXaW5kb3dTaXplKCkge1xyXG4gIC8vICAgICBjb25zdCB7aW5uZXJXaWR0aCwgaW5uZXJIZWlnaHR9ID0gd2luZG93O1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyh7aW5uZXJXaWR0aCwgaW5uZXJIZWlnaHR9KTtcclxuICAvLyAgIH1cclxuICAvLyAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlcG9ydFdpbmRvd1NpemUpO1xyXG4gIC8vIH1cclxufVxyXG4iLCAiY29uc3QgX2MgPSAnY29sb3I6ICNiYWRhNTUnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBsZXQgd2luZG93UmVmXHJcbiAgcmV0dXJuIHtcclxuICAgIC8vIGV4OiB3c19faGVscCgpXHJcbiAgICBfaGVscCAoeyBkYXRhIH0pIHtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgIH0sXHJcbiAgICAvLyBleDogd3NfX3BpbmcoXCJ0aGVyZVwiKVxyXG4gICAgX3BpbmcgKHsgZGF0YSB9KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcbiAgICB9LFxyXG4gICAgLy8gZXg6IHdzX19vcGVuKHt1cmw6IFwiaHR0cHM6Ly9nb29nbGUuY29tXCJ9KVxyXG4gICAgX29wZW4gKHsgZGF0YSB9KSB7XHJcbiAgICAgIGNvbnN0IGZlYXR1cmVzID0gJ2RpcmVjdG9yaWVzPTAsdGl0bGViYXI9MCx0b29sYmFyPTAsbG9jYXRpb249MCxzdGF0dXM9MCxtZW51YmFyPTAsd2lkdGg9ODAwLGhlaWdodD02MDAnXHJcbiAgICAgIHdpbmRvd1JlZiA9IHdpbmRvdy5vcGVuKGRhdGEudXJsLCAnX2xvZ3MnLCBmZWF0dXJlcylcclxuICAgICAgd2luZG93UmVmLmJsdXIoKVxyXG4gICAgfSxcclxuICAgIC8vIGV4OiB3c19fc3R5bGUoJy5pbnRybz0+YmFja2dyb3VuZDpyZWQ7JylcclxuICAgIF9zdHlsZSAoeyBkYXRhIH0pIHtcclxuICAgICAgY29uc3QgeyBxLCBjc3MgfSA9IGRhdGFcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxKS5mb3JFYWNoKFxyXG4gICAgICAgIG5vZGUgPT4gKG5vZGUuc3R5bGUuY3NzVGV4dCA9IGNzcylcclxuICAgICAgKVxyXG4gICAgfSxcclxuICAgIC8vIGV4OiB3c19fXHJcbiAgICBfc2F2ZVRhZ3MgKHsgcm91dGVzIH0pIHtcclxuICAgICAgaWYgKCFsb2NhdGlvbi5vcmlnaW4ubWF0Y2goJ2Nocm9tZS1leHRlbnNpb24nKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCclY1dzOiBVcGRhdGUgcm91dGVzJywgX2MpXHJcbiAgICAgICAgd2luZG93Lm1pdG0ucm91dGVzID0gcm91dGVzXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBleDogd3NfX1xyXG4gICAgX2ZpbGVzICh7IGRhdGEsIHR5cCB9KSB7XHJcbiAgICAgIGNvbnN0IHsgZmlsZXMgfSA9IHdpbmRvdy5taXRtXHJcbiAgICAgIGNvbnNvbGUud2FybihgcmVjZWl2ZSBicm9kY2FzdCAke3R5cH1gKVxyXG4gICAgICAvKipcclxuICAgICAgICogZXZlbnQgaGFuZGxlciBhZnRlciByZWNlaXZpbmcgd3MgcGFja2V0XHJcbiAgICAgICAqIGllOiB3aW5kb3cubWl0bS5maWxlcy5yb3V0ZV9ldmVudHMgPSB7ZXZlbnRPYmplY3QuLi59XHJcbiAgICAgICAqL1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWxlc1tgJHt0eXB9X2V2ZW50c2BdKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGZpbGVzW2Ake3R5cH1fZXZlbnRzYF1ba2V5XSArICcnKVxyXG4gICAgICAgIGZpbGVzW2Ake3R5cH1fZXZlbnRzYF1ba2V5XShkYXRhKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3NldENsaWVudCAoeyBkYXRhIH0pIHtcclxuICAgICAgY29uc29sZS5sb2coJyVjV3M6IF9zZXRDbGllbnQnLCBfYywgZGF0YSlcclxuICAgICAgd2luZG93Lm1pdG0uY2xpZW50ID0gZGF0YVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCAiLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXHJcbmNvbnN0IF93c19jbGllbnQgPSByZXF1aXJlKCcuL193c19jbGllbnQnKVxyXG5jb25zdCBfd3Nfd2NjbWQgPSBfd3NfY2xpZW50KClcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGV2ZW50LCBtc2cpID0+IHtcclxuICBpZiAod2luZG93Lm1pdG0uYXJndi5kZWJ1Zykge1xyXG4gICAgaWYgKG1zZy5sZW5ndGggPiA0MCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnPj4+IHdzLW1lc3NhZ2U6IGAlcy4uLmAnLCBtc2cuc2xpY2UoMCwgNDApKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJz4+PiB3cy1tZXNzYWdlOiBgJXNgJywgbXNnKVxyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBhcnIgPSBtc2cucmVwbGFjZSgvXFxzKyQvLCAnJykubWF0Y2goL14gKihbXFx3Ol0rKSAqKFxcey4qKS8pXHJcbiAgaWYgKGFycikge1xyXG4gICAgbGV0IFssIGNtZCwganNvbl0gPSBhcnJcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICh0eXBlb2YgKGpzb24pID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb24pXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoanNvbiwgZXJyb3IpXHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Ll93c19xdWV1ZVtjbWRdKSB7XHJcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSB3aW5kb3cuX3dzX3F1ZXVlW2NtZF1cclxuICAgICAgZGVsZXRlIHdpbmRvdy5fd3NfcXVldWVbY21kXVxyXG4gICAgICBoYW5kbGVyKGpzb24uZGF0YSlcclxuICAgIH0gZWxzZSBpZiAoX3dzX3djY21kW2NtZF0pIHtcclxuICAgICAgX3dzX3djY21kW2NtZF0uY2FsbChldmVudCwganNvbilcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwgIm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGxldCBpZnJtXHJcbiAgdHJ5IHtcclxuICAgIGlmcm0gPSB3aW5kb3cuc2VsZiAhPT0gd2luZG93LnRvcFxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGlmcm0gPSB0cnVlXHJcbiAgfVxyXG4gIHJldHVybiBpZnJtID8gJ2lmcmFtZScgOiAnd2luZG93J1xyXG59XHJcbiIsICJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBjb25zdCB7IHZlbmRvciB9ID0gbmF2aWdhdG9yXHJcbiAgY29uc3QgYnJvd3NlciA9IHtcclxuICAgICcnOiAnZmlyZWZveCcsXHJcbiAgICAnR29vZ2xlIEluYy4nOiAnY2hyb21pdW0nLFxyXG4gICAgJ0FwcGxlIENvbXB1dGVyLCBJbmMuJzogJ3dlYmtpdCdcclxuICB9W3ZlbmRvcl1cclxuICByZXR1cm4gYnJvd3NlclxyXG59XHJcbiIsICIvKiBnbG9iYWwgV2ViU29ja2V0ICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfd3NfbXNnUGFyc2VyID0gcmVxdWlyZSgnLi9fd3NfbXNnLXBhcnNlcicpXHJcbmNvbnN0IF93c19pbklmcmFtZSA9IHJlcXVpcmUoJy4vX3dzX2luLWlmcmFtZScpXHJcbmNvbnN0IF93c192ZW5kb3IgPSByZXF1aXJlKCcuL193c192ZW5kb3InKVxyXG5jb25zdCBfYyA9ICdjb2xvcjogI2JhZGE1NSdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIHdpbmRvdy5fd3NfcXVldWUgPSB7fVxyXG4gIHdpbmRvdy5fd3NfY29ubmVjdGVkID0gZmFsc2VcclxuICBjb25zdCB7X19hcmdzLCBfX2ZsYWd9ID0gd2luZG93Lm1pdG1cclxuXHJcbiAgaWYgKHdpbmRvdy5fd3NfY29ubmVjdD09PXVuZGVmaW5lZCkge1xyXG4gICAgd2luZG93Ll93c19jb25uZWN0ID0ge31cclxuICB9XHJcblxyXG4gIGNvbnN0IG9ub3BlbiA9IGRhdGEgPT4ge1xyXG4gICAgZnVuY3Rpb24gd3Nfc2VuZCgpIHtcclxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2luZG93Ll93c19jb25uZWN0KSB7XHJcbiAgICAgICAgY29uc3QgZm4gPSB3aW5kb3cuX3dzX2Nvbm5lY3Rba2V5XVxyXG4gICAgICAgIHdpbmRvdy5fd3NfY29ubmVjdGVkX3NlbmQgPSB0cnVlXHJcbiAgICAgICAgY29uc29sZS5sb2coYCVjV3M6ICR7Zm4rJyd9YCwgX2MpXHJcbiAgICAgICAgZm4oZGF0YSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChfX2ZsYWdbJ3dzLWNvbm5lY3QnXSkge1xyXG4gICAgICBjb25zb2xlLmxvZygnJWNXczogb3BlbiBjb25uZWN0aW9uJywgX2MpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS50aW1lRW5kKCd3cycpXHJcbiAgICB3aW5kb3cuX3dzX2Nvbm5lY3RlZCA9IHRydWVcclxuXHJcbiAgICBzZXRUaW1lb3V0KHdzX3NlbmQsIDEpIC8vIG1pbmltaXplIGludGVybWl0dGVuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaWYgKCF3aW5kb3cuX3dzX2Nvbm5lY3RlZF9zZW5kKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignUkVUUlkuLi4uLi4uLi4uJylcclxuICAgICAgICB3c19zZW5kKClcclxuICAgICAgfVxyXG4gICAgfSwgMTApIC8vIG1pbmltaXplIGludGVybWl0dGVuICAgICBcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoX19mbGFnWyd3cy1jb25uZWN0J10pIHtcclxuICAgICAgY29uc29sZS5sb2coJyVjV3M6IGNsb3NlIGNvbm5lY3Rpb24nLCBfYylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IG9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoX19mbGFnWydvbi1tZXNzYWdlJ10pIHtcclxuICAgICAgY29uc29sZS5sb2coJyVjV3M6IG9uLW1lc3NhZ2U6JywgX2MsIGUuZGF0YSlcclxuICAgIH1cclxuICAgIF93c19tc2dQYXJzZXIoZSwgZS5kYXRhKVxyXG4gIH1cclxuICBcclxuICBjb25zdCBjb25uZWN0ID0gX19hcmdzLm5vc29ja2V0PT09dW5kZWZpbmVkXHJcbiAgaWYgKGNvbm5lY3QgfHwgKHdpbmRvdy5jaHJvbWUgJiYgY2hyb21lLnRhYnMpKSB7XHJcbiAgICBjb25zdCB2ZW5kb3IgPSBbJ2ZpcmVmb3gnLCAnd2Via2l0J10uaW5jbHVkZXMoX3dzX3ZlbmRvcigpKVxyXG4gICAgY29uc3QgcHJlID0gdmVuZG9yID8gJ3dzJyA6ICd3c3MnXHJcbiAgICBjb25zdCBwcnQgPSB2ZW5kb3IgPyAnMzAwMicgOiAnMzAwMSdcclxuICAgIGNvbnN0IHVybCA9IGAke3ByZX06Ly9sb2NhbGhvc3Q6JHtwcnR9L3dzP3BhZ2U9JHtfd3NfaW5JZnJhbWUoKX0mdXJsPSR7ZG9jdW1lbnQuVVJMLnNwbGl0KCc/JylbMF19YFxyXG4gICAgbGV0IHdzXHJcbiAgICB0cnkge1xyXG4gICAgICB3cyA9IG5ldyBXZWJTb2NrZXQodXJsKSAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLnRpbWUoJ3dzJylcclxuICAgIHdpbmRvdy5fd3MgPSB3c1xyXG4gIFxyXG4gICAgd3Mub25vcGVuID0gb25vcGVuXHJcbiAgICB3cy5vbmNsb3NlID0gb25jbG9zZVxyXG4gICAgd3Mub25tZXNzYWdlID0gb25tZXNzYWdlICBcclxuICB9XHJcbiAgaWYgKF9fZmxhZ1snd3MtY29ubmVjdCddKSB7XHJcbiAgICBjb25zb2xlLmxvZyhgJWNXczogJHtjb25uZWN0ID8gJ2luaXQnIDogJ29mZid9IGNvbm5lY3Rpb25gLCBfYylcclxuICB9XHJcbn1cclxuIiwgImFzeW5jIGZ1bmN0aW9uIHNjcmVuc2hvdChqc29uKSB7XHJcbiAgY29uc3Qge19fYXJnc30gPSB3aW5kb3cubWl0bVxyXG4gIGlmIChbdHJ1ZSwgJ29mZiddLmluY2x1ZGVzKF9fYXJncy5ub3NvY2tldCkpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoanNvbilcclxuICAgICAgICB9XHJcbiAgICAgICAgZmV0Y2goJy9taXRtLXBsYXkvc2NyZW5zaG90Lmpzb24nLCBjb25maWcpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgcmVzb2x2ZShyZXNwb25zZS5qc29uKCkpfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhICAgICkgeyByZXNvbHZlKGRhdGEpICAgICAgICAgICB9KVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcilcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgeyAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgd2luZG93LndzX19zZW5kKCdzY3JlZW5zaG90JywganNvbiwgcmVzb2x2ZSlcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgIH1cclxuICAgIH0pICBcclxuICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBzY3JlbnNob3QiLCAiLyogZ2xvYmFsIGxvY2F0aW9uICovXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgaG9zdG5hbWU6IGhvc3QgfSA9IGxvY2F0aW9uXHJcbiAgbGV0IG5hbWVzcGFjZVxyXG5cclxuICBmdW5jdGlvbiB0b1JlZ2V4IChzdHIpIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFwuL2csICdcXFxcLicpLnJlcGxhY2UoL1xcPy9nLCAnXFxcXD8nKVxyXG4gIH1cclxuXHJcbiAgZm9yIChjb25zdCBrZXkgaW4gd2luZG93Lm1pdG0ucm91dGVzKSB7XHJcbiAgICBpZiAoaG9zdC5tYXRjaCh0b1JlZ2V4KGtleS5yZXBsYWNlKC9+L2csICdbXi5dKicpKSkpIHtcclxuICAgICAgbmFtZXNwYWNlID0ga2V5XHJcbiAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuYW1lc3BhY2VcclxufVxyXG4iLCAiLyogZ2xvYmFsIGxvY2F0aW9uLCBtaXRtICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfc2NyZWVuc2hvdCA9IHJlcXVpcmUoJy4vX3NjcmVlbnNob3QnKVxyXG5jb25zdCBfd3NfbmFtZXNwYWNlID0gcmVxdWlyZSgnLi9fd3NfbmFtZXNwYWNlJylcclxuY29uc3QgX3dzX3ZlbmRvciA9IHJlcXVpcmUoJy4vX3dzX3ZlbmRvcicpXHJcbmNvbnN0IF9jID0gJ2NvbG9yOiAjYmFkYTU1J1xyXG5cclxubGV0IGFjdFxyXG5mdW5jdGlvbiBzY3JlZW5zaG90IChlKSB7XHJcbiAgaWYgKG1pdG0uYXJndi5sYXp5Y2xpY2spIHtcclxuICAgIGlmIChtaXRtLnNjcmVlbnNob3QpIHtcclxuICAgICAgd2luZG93Lm1pdG0uc2NyZWVuc2hvdCA9IHVuZGVmaW5lZFxyXG4gICAgICBjb25zb2xlLmxvZygnPj4+IGRlbGF5IGFjdGlvbicpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgaWYgKGFjdCkge1xyXG4gICAgICBhY3QgPSB1bmRlZmluZWRcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnN0IG5hbWVzcGFjZSA9IF93c19uYW1lc3BhY2UoKVxyXG4gIGNvbnN0IGJyb3dzZXIgPSBfd3NfdmVuZG9yKClcclxuICBjb25zdCBob3N0ID0gbG9jYXRpb24ub3JpZ2luLnJlcGxhY2UoJzovLycgLCd+ficpXHJcbiAgY29uc3Qgcm91dGUgPSB3aW5kb3cubWl0bS5yb3V0ZXNbbmFtZXNwYWNlXVxyXG4gIGNvbnN0IHsgc2VsZWN0b3IgfSA9IHJvdXRlLnNjcmVlbnNob3RcclxuXHJcbiAgY29uc3QgYXJyID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKVxyXG4gIGNvbnN0IGZuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy9nLCAnficpXHJcbiAgY29uc3QgZGVsYXkgPSBtaXRtLmFyZ3YubGF6eWNsaWNrID09PSB0cnVlID8gNzAwIDogbWl0bS5hcmd2LmxhenljbGlja1xyXG4gIGZvciAoY29uc3QgZWwgb2YgYXJyKSB7XHJcbiAgICBsZXQgbm9kZSA9IGUudGFyZ2V0XHJcbiAgICB3aGlsZSAoZWwgIT09IG5vZGUgJiYgbm9kZSAhPT0gbnVsbCAmJiBub2RlICE9PSBkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcclxuICAgIH1cclxuICAgIGlmIChub2RlICE9PSBkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgIGNvbnN0IF9wYWdlID0gd2luZG93Wyd4cGxheS1wYWdlJ11cclxuICAgICAgY29uc3QgcGFyYW1zID0geyBuYW1lc3BhY2UsIF9wYWdlLCBob3N0LCBicm93c2VyIH1cclxuICAgICAgcGFyYW1zLmZuYW1lID0gZm5hbWU9PT0nficgPyAnfl8nIDogZm5hbWVcclxuICAgICAgX3NjcmVlbnNob3QocGFyYW1zKVxyXG4gICAgICBpZiAobWl0bS5hcmd2LmxhenljbGljaykge1xyXG4gICAgICAgIC8vIGRlbGF5IGFjdGlvbiB0byBmaW5pc2ggc2NyZWVuc2hvdFxyXG4gICAgICAgIHdpbmRvdy5taXRtLnNjcmVlbnNob3QgPSBlLnRhcmdldFxyXG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgbWl0bS5sYXN0RXZlbnQgPSBlXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBhY3QgPSB3aW5kb3cubWl0bS5zY3JlZW5zaG90XHJcbiAgICAgICAgICBpZiAoYWN0KSB7XHJcbiAgICAgICAgICAgIGFjdC5jbGljaygpXHJcbiAgICAgICAgICAgIGFjdCA9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJyVjV3M6IGRlbGF5IGFjdGlvbiB1bmRlZmluZWQnLCBfYyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZGVsYXkpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbWl0bS5sYXN0RXZlbnQgPSBlXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBldmVudGNsaWNrKGUpIHtcclxuICBtaXRtLmxhc3RFdmVudCA9IGVcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3Qgcm91dGUgPSB3aW5kb3cubWl0bS5yb3V0ZXNbX3dzX25hbWVzcGFjZSgpXVxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxyXG4gICAgaWYgKHJvdXRlICYmIHJvdXRlLnNjcmVlbnNob3QpIHtcclxuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNjcmVlbnNob3QpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnRjbGljaylcclxuICAgIH1cclxuICB9KVxyXG59XHJcbiIsICIvKiBnbG9iYWwgbG9jYXRpb24sIGhpc3RvcnksIGNocm9tZSwgRXZlbnQsIENzc1NlbGVjdG9yR2VuZXJhdG9yICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfd3NfbmFtZXNwYWNlID0gcmVxdWlyZSgnLi9fd3NfbmFtZXNwYWNlJylcclxuY29uc3QgX3dzX3ZlbmRvciA9IHJlcXVpcmUoJy4vX3dzX3ZlbmRvcicpXHJcbmNvbnN0IHdhaXQgPSBtcyA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcclxuY29uc3QgX2MgPSAnY29sb3I6ICNiYWRhNTUnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBjb25zdCBjb250YWluZXJTdHlsZTEgPSAncG9zaXRpb246IGZpeGVkO3otaW5kZXg6IDk5OTk5O3JpZ2h0OiAzcHg7J1xyXG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlMiA9ICdwb3NpdGlvbjogZml4ZWQ7ei1pbmRleDogOTk5OTk7bGVmdDogIDNweDsnXHJcbiAgY29uc3QgY29udGFpbmVyU3R5bGUzID0gJ3Bvc2l0aW9uOiBmaXhlZDt6LWluZGV4OiA5OTk5OTtyaWdodDogM3B4OyB0b3A6IDIwcHg7IHRleHQtYWxpZ246IGVuZDsnXHJcbiAgY29uc3QgYnV0dG9uU3R5bGUgPSAnJ1xyXG4gIGNvbnN0IHN0eWxlID0gYFxyXG4gIC5taXRtLWJ0biB7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBmb250LXNpemU6IDhweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICAgIGZvbnQtZmFtaWx5OiBtb25hY28sIENvbnNvbGFzLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZTtcclxuICB9XHJcbiAgLm1pdG0tYnRuOmhvdmVye1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtcclxuICB9XHJcbiAgLmJncm91cC1yaWdodCAubWl0bS1icixcclxuICAuYmdyb3VwLWxlZnQgLm1pdG0tYnJ7XHJcbiAgICBkaXNwbGF5OnRhYmxlO1xyXG4gIH1gXHJcbiAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3VybGNoYW5nZWQnKVxyXG4gIGxldCBjb250YWluZXIgPSB7XHJcbiAgICByaWdodDM6IHt9LFxyXG4gICAgcmlnaHQ6IHt9LFxyXG4gICAgbGVmdDoge30sXHJcbiAgfVxyXG4gIGxldCBjdHJsID0gZmFsc2VcclxuICBsZXQgYnV0dG9uID0ge31cclxuICBsZXQgYmdyb3VwID0ge1xyXG4gICAgcmlnaHQzOiB7fSxcclxuICAgIHJpZ2h0OiB7fSxcclxuICAgIGxlZnQ6IHt9LFxyXG4gIH1cclxuICBsZXQgaW50ZXJ2SWRcclxuICBsZXQgb2JzZXJ2ZXJmbiA9IFtdXHJcblxyXG4gIGZ1bmN0aW9uIHRvUmVnZXggKHBhdGhNc2cpIHtcclxuICAgIGxldCBbcGF0aCwgbXNnXSA9IHBhdGhNc2cuc3BsaXQoJz0+JykubWFwKGl0ZW0gPT4gaXRlbS50cmltKCkpXHJcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJykucmVwbGFjZSgvXFw/L2csICdcXFxcPycpXHJcbiAgICByZXR1cm4geyBwYXRoLCBtc2cgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQnV0dG9uKGJ1dHRvbnMsIHBvcykge1xyXG4gICAgbGV0IGJyXHJcbiAgICBmb3IgKGNvbnN0IGlkIGluIGJ1dHRvbnMpIHtcclxuICAgICAgY29uc3QgW2NhcHRpb24sIGNvbG9yLCBrbGFzXSA9IGlkLnNwbGl0KCd8JylcclxuICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcclxuICAgICAgY29uc3QgZm4gID0gYnV0dG9uc1tpZF1cclxuICAgICAgYnRuLm9uY2xpY2sgPSBhc3luYyBlID0+IHtcclxuICAgICAgICBsZXQgYXJyID0gZm4oZSlcclxuICAgICAgICBpZiAoYXJyIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG4gICAgICAgICAgYXJyID0gYXdhaXQgYXJyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcclxuICAgICAgICAgIGF3YWl0IHBsYXkoYXJyKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBidG4uaW5uZXJUZXh0ID0gY2FwdGlvblxyXG4gICAgICBidG4uY2xhc3NMaXN0LmFkZCgnbWl0bS1idG4nKVxyXG4gICAgICBidG4uY2xhc3NMaXN0LmFkZChgJHtwb3N9YClcclxuICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoa2xhcyB8fCBjYXB0aW9uKVxyXG4gICAgICBidG4uc3R5bGUgPSBidXR0b25TdHlsZSArIChjb2xvciA/IGBiYWNrZ3JvdW5kOiAke2NvbG9yfTtgIDogJycpXHJcbiAgICAgIGlmIChwb3M9PT0ncmlnaHQnKSB7XHJcbiAgICAgICAgYnIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcclxuICAgICAgICBici5pbm5lckhUTUwgPSAnJm5ic3A7J1xyXG4gICAgICAgIGJncm91cFtwb3NdLmFwcGVuZENoaWxkKGJyKVxyXG4gICAgICAgIGJncm91cFtwb3NdLmFwcGVuZENoaWxkKGJ0bilcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBiciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxyXG4gICAgICAgIGJyLmNsYXNzTmFtZSA9ICdtaXRtLWJyJ1xyXG4gICAgICAgIGJncm91cFtwb3NdLmFwcGVuZENoaWxkKGJ0bilcclxuICAgICAgICBiZ3JvdXBbcG9zXS5hcHBlbmRDaGlsZChicilcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0QnV0dG9ucyAoYnV0dG9ucywgcG9zaXRpb24pIHtcclxuICAgIGlmIChiZ3JvdXBbcG9zaXRpb25dKSB7XHJcbiAgICAgIGJncm91cFtwb3NpdGlvbl0uaW5uZXJIVE1MID0gJydcclxuICAgICAgY3JlYXRlQnV0dG9uKGJ1dHRvbnMsIHBvc2l0aW9uKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGRlYnVua1xyXG4gIGxldCBvbmNlcyA9IHt9IC8vIGZlYXQ6IG9uZXRpbWUgZm4gY2FsbFxyXG4gIGFzeW5jIGZ1bmN0aW9uIHVybENoYW5nZSAoZXZlbnQpIHtcclxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IF93c19uYW1lc3BhY2UoKVxyXG4gICAgaWYgKHdpbmRvdy5taXRtLmF1dG9maWxsKSB7XHJcbiAgICAgIGRlbGV0ZSB3aW5kb3cubWl0bS5hdXRvZmlsbFxyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5taXRtLmF1dG9pbnRlcnZhbCkge1xyXG4gICAgICBjbGVhckludGVydmFsKGludGVydklkKVxyXG4gICAgICBkZWxldGUgd2luZG93Lm1pdG0uYXV0b2ludGVydmFsXHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Lm1pdG0uYXV0b2J1dHRvbnMpIHtcclxuICAgICAgZGVsZXRlIHdpbmRvdy5taXRtLmF1dG9idXR0b25zXHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Lm1pdG0ucmlnaHRidXR0b25zKSB7XHJcbiAgICAgIGRlbGV0ZSB3aW5kb3cubWl0bS5yaWdodGJ1dHRvbnNcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cubWl0bS5sZWZ0YnV0dG9ucykge1xyXG4gICAgICBkZWxldGUgd2luZG93Lm1pdG0ubGVmdGJ1dHRvbnNcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cubWl0bS5tYWNyb2tleXMpIHtcclxuICAgICAgZGVsZXRlIHdpbmRvdy5taXRtLm1hY3Jva2V5c1xyXG4gICAgfVxyXG4gICAgaWYgKG5hbWVzcGFjZSkge1xyXG4gICAgICBjb25zdCB7aHJlZiwgb3JpZ2lufSA9IGxvY2F0aW9uXHJcbiAgICAgIGNvbnN0IF9ocmVmID0gaHJlZi5yZXBsYWNlKG9yaWdpbiwgJycpXHJcbiAgICAgIGNvbnN0IHtfbWFjcm9zXywgbWFjcm9zfSA9IHdpbmRvdy5taXRtXHJcbiAgICAgIG9ic2VydmVyZm4gPSBbXVxyXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBtYWNyb3MpIHtcclxuICAgICAgICBjb25zdCB7IHBhdGgsIG1zZyB9ID0gdG9SZWdleChrZXkpXHJcbiAgICAgICAgaWYgKF9ocmVmLm1hdGNoKHBhdGgpKSB7XHJcbiAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gbXNnIHx8ICdFbnRyeSdcclxuICAgICAgICAgIF9tYWNyb3NfICYmIF9tYWNyb3NfKClcclxuICAgICAgICAgIGxldCBmbiA9IG1hY3Jvc1trZXldKClcclxuICAgICAgICAgIGlmIChmbiBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgZm4gPSBhd2FpdCBmblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvYnNlcnZlcmZuLnB1c2goZm4pXHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgICAgZGVidW5rICYmIGNsZWFyVGltZW91dChkZWJ1bmspXHJcbiAgICAgICAgICBkZWJ1bmsgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgb25jZXMgPSB7fSAvLyBmZWF0OiBvbmV0aW1lIGZuIGNhbGxcclxuICAgICAgICAgICAgZGVidW5rID0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIGNvbnN0IHthdXRvYnV0dG9ucywgcmlnaHRidXR0b25zLCBsZWZ0YnV0dG9uc30gPSB3aW5kb3cubWl0bVxyXG4gICAgICAgICAgICByaWdodGJ1dHRvbnMgJiYgc2V0QnV0dG9ucyhyaWdodGJ1dHRvbnMsICdyaWdodDMnKVxyXG4gICAgICAgICAgICBsZWZ0YnV0dG9ucyAmJiBzZXRCdXR0b25zKGxlZnRidXR0b25zLCAnbGVmdCcpXHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cubWl0bS5hdXRvZmlsbCkge1xyXG4gICAgICAgICAgICAgIGF1dG9idXR0b25zICYmIHNldEJ1dHRvbnMoe1xyXG4gICAgICAgICAgICAgICAgLi4uYXV0b2J1dHRvbnMsXHJcbiAgICAgICAgICAgICAgICAnRW50cnknKCkge1xyXG4gICAgICAgICAgICAgICAgICBsZXQge2F1dG9maWxsfSA9IHdpbmRvdy5taXRtXHJcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXV0b2ZpbGwgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvZmlsbCA9IGF1dG9maWxsKClcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBwbGF5KGF1dG9maWxsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sICdyaWdodCcpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYXV0b2J1dHRvbnMgJiYgc2V0QnV0dG9ucyhhdXRvYnV0dG9ucywgJ3JpZ2h0JylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgMClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRhaW5lci5yaWdodDMuc3R5bGUgPSBjb250YWluZXJTdHlsZTNcclxuICAgIGNvbnRhaW5lci5yaWdodC5zdHlsZSA9IGNvbnRhaW5lclN0eWxlMVxyXG4gICAgY29udGFpbmVyLmxlZnQuc3R5bGUgID0gY29udGFpbmVyU3R5bGUyXHJcbiAgICBjb25zdCB2aXNpYmxlID0gKHdpbmRvdy5taXRtLmF1dG9maWxsKVxyXG4gICAgYnV0dG9uLnN0eWxlID0gYnV0dG9uU3R5bGUgKyAodmlzaWJsZSA/ICdiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTsnIDogJ2Rpc3BsYXk6IG5vbmU7JylcclxuICAgIGlmICh0eXBlb2YgKHdpbmRvdy5taXRtLmF1dG9pbnRlcnZhbCkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgaW50ZXJ2SWQgPSBzZXRJbnRlcnZhbCh3aW5kb3cubWl0bS5hdXRvaW50ZXJ2YWwsIDUwMClcclxuICAgIH1cclxuICAgIGN0cmwgPSBmYWxzZVxyXG4gIH1cclxuXHJcbiAgY29uc3QgdmVuZG9yID0gX3dzX3ZlbmRvcigpXHJcbiAgaWYgKFsnZmlyZWZveCcsICd3ZWJraXQnXS5pbmNsdWRlcyh2ZW5kb3IpIHx8IChjaHJvbWUgJiYgIWNocm9tZS50YWJzKSkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXliQ3RybClcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1cmxjaGFuZ2VkJywgdXJsQ2hhbmdlKVxyXG4gICAgaWYoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XHJcbiAgICAgIGluaXQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdClcclxuICAgIH0gICAgXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgY29uc3QgZm4gPSBoaXN0b3J5LnB1c2hTdGF0ZVxyXG4gIGhpc3RvcnkucHVzaFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm4uYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKVxyXG4gICAgY29tcGFyZUhyZWYoKVxyXG4gIH1cclxuXHJcbiAgX3BsYXkgPSBqc29uID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB3aW5kb3cud3NfX3NlbmQoJ2F1dG9maWxsJywganNvbiwgcmVzb2x2ZSlcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBfcG9zdCA9IGpzb24gPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShqc29uKVxyXG4gICAgICAgIH1cclxuICAgICAgICBmZXRjaCgnL21pdG0tcGxheS9wbGF5Lmpzb24nLCBjb25maWcpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgcmVzb2x2ZShyZXNwb25zZS5qc29uKCkpfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhICAgICkgeyByZXNvbHZlKGRhdGEpICAgICAgICAgICB9KVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcilcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIHBsYXkgKGF1dG9maWxsKSB7XHJcbiAgICBjb25zdCB7X19hcmdzfSA9IHdpbmRvdy5taXRtXHJcbiAgICBpZiAoYXV0b2ZpbGwpIHtcclxuICAgICAgaWYgKHR5cGVvZiAoYXV0b2ZpbGwpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgYXV0b2ZpbGwgPSBhdXRvZmlsbCgpXHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgYnJvd3NlciA9IF93c192ZW5kb3IoKVxyXG4gICAgICBjb25zdCBsZW50aCA9IGF1dG9maWxsLmxlbmd0aFxyXG4gICAgICBjb25zdCBfcGFnZSA9IHdpbmRvd1sneHBsYXktcGFnZSddXHJcbiAgICAgIGNvbnN0IF9mcmFtZSA9IHdpbmRvd1sneHBsYXktZnJhbWUnXVxyXG4gICAgICBjb25zdCBfanNvbiA9IHthdXRvZmlsbCwgYnJvd3NlciwgX3BhZ2UsIF9mcmFtZX1cclxuICAgICAgY29uc3QgbXNnID0gbGVudGggPT09IDEgPyBgICAke2F1dG9maWxsfWAgOiBKU09OLnN0cmluZ2lmeShhdXRvZmlsbCwgbnVsbCwgMilcclxuICAgICAgY29uc29sZS5sb2coYCVjTWFjcm9zOiAke21zZ31gLCBfYylcclxuICAgICAgbGV0IHJlc3VsdFxyXG4gICAgICBpZiAoW3RydWUsICdvZmYnXS5pbmNsdWRlcyhfX2FyZ3Mubm9zb2NrZXQpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgX3Bvc3QoX2pzb24pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgX3BsYXkoX2pzb24pXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgfVxyXG4gIH1cclxuICB3aW5kb3cubWl0bS5mbi5wbGF5ID0gcGxheVxyXG4gIHdpbmRvdy5taXRtLmZuLndhaXQgPSB3YWl0XHJcbiAgXHJcbiAgZnVuY3Rpb24ga2V5YkN0cmwgKGUpIHtcclxuICAgIGNvbnN0IHsgbWFjcm9rZXlzIH0gPSB3aW5kb3cubWl0bVxyXG4gICAgaWYgKGUuY3RybEtleSAmJiBlLmtleSA9PT0gJ1NoaWZ0Jykge1xyXG4gICAgICBjdHJsID0gIWN0cmxcclxuICAgICAgY29udGFpbmVyLnJpZ2h0My5zdHlsZSA9IGNvbnRhaW5lclN0eWxlMyArICghY3RybCA/ICcnIDogJ2Rpc3BsYXk6IG5vbmU7JylcclxuICAgICAgY29udGFpbmVyLnJpZ2h0LnN0eWxlICA9IGNvbnRhaW5lclN0eWxlMSArICghY3RybCA/ICcnIDogJ2Rpc3BsYXk6IG5vbmU7JylcclxuICAgICAgY29udGFpbmVyLmxlZnQuc3R5bGUgICA9IGNvbnRhaW5lclN0eWxlMiArICghY3RybCA/ICcnIDogJ2Rpc3BsYXk6IG5vbmU7JylcclxuICAgIH0gZWxzZSBpZiAoZS5jdHJsS2V5ICYmIGUuYWx0S2V5KSB7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGBjdHJsICsgYWx0ICsgJHtlLmNvZGV9YFxyXG4gICAgICBjb25zb2xlLmxvZyhgJWNNYWNyb3M6ICR7bXNnfWAsIF9jKVxyXG4gICAgICBpZiAobWFjcm9rZXlzKSB7XHJcbiAgICAgICAgbGV0IG1hY3JvID0gbWFjcm9rZXlzW2UuY29kZV1cclxuICAgICAgICBpZiAobWFjcm8pIHtcclxuICAgICAgICAgIG1hY3JvID0gbWFjcm8oZSlcclxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hY3JvKSkge1xyXG4gICAgICAgICAgICBsZXQgbWFjcm9JbmRleCA9IDBcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHNlbGVjdG9yID0gbWFjcm9bbWFjcm9JbmRleF1cclxuICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IubWF0Y2goL14gKls9LV0+LykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBDc3NTZWxlY3RvckdlbmVyYXRvci5nZXRDc3NTZWxlY3Rvcihkb2N1bWVudC5hY3RpdmVFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBgJHthY3RpdmVFbGVtZW50fSAke3NlbGVjdG9yfWBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcGxheShbc2VsZWN0b3JdKVxyXG5cclxuICAgICAgICAgICAgICBtYWNyb0luZGV4ICs9IDFcclxuICAgICAgICAgICAgICBpZiAobWFjcm9JbmRleCA+PSBtYWNyby5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAxMDApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCB7bG9jYXRpb259ID0gZG9jdW1lbnRcclxuICBsZXQgb2xkSHJlZiA9IGxvY2F0aW9uLmhyZWZcclxuICBsZXQgb0RlYnVuayA9IHVuZGVmaW5lZFxyXG4gIGZ1bmN0aW9uIGNvbXBhcmVIcmVmKG5vZGVzKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnJGNNYWNyb3M6IERPTSBtdXRhdGVkIScsIF9jKVxyXG4gICAgaWYgKG9sZEhyZWYgIT0gbG9jYXRpb24uaHJlZikge1xyXG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudClcclxuICAgICAgb2xkSHJlZiA9IGxvY2F0aW9uLmhyZWZcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvYnNlcnZlcmZuLmxlbmd0aCkge1xyXG4gICAgICAgIG9EZWJ1bmsgJiYgY2xlYXJUaW1lb3V0KG9EZWJ1bmspXHJcbiAgICAgICAgb0RlYnVuayA9IHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgICBvRGVidW5rID0gdW5kZWZpbmVkXHJcbiAgICAgICAgICBmb3IgKGNvbnN0IGZuIG9mIG9ic2VydmVyZm4pIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGZuLm5hbWVcclxuICAgICAgICAgICAgaWYgKG5hbWUgJiYgbmFtZS5tYXRjaCgvT25jZSQvKSkge1xyXG4gICAgICAgICAgICAgIGlmIChvbmNlc1tuYW1lXSkgeyAvLyBmZWF0OiBvbmV0aW1lIGZuIGNhbGxcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9uY2VzW25hbWVdID0gdHJ1ZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmbihub2RlcylcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IHthdXRvYnV0dG9ucywgcmlnaHRidXR0b25zLCBsZWZ0YnV0dG9uc30gPSB3aW5kb3cubWl0bVxyXG4gICAgICAgICAgcmlnaHRidXR0b25zICYmIHNldEJ1dHRvbnMocmlnaHRidXR0b25zLCAncmlnaHQzJylcclxuICAgICAgICAgIGxlZnRidXR0b25zICYmIHNldEJ1dHRvbnMobGVmdGJ1dHRvbnMsICdsZWZ0JylcclxuICAgICAgICAgIGNvbnN0IHsgYXV0b2ZpbGwgfSA9IHdpbmRvdy5taXRtXHJcbiAgICAgICAgICBpZiAoYXV0b2ZpbGwpIHtcclxuICAgICAgICAgICAgYXV0b2J1dHRvbnMgJiYgc2V0QnV0dG9ucyh7XHJcbiAgICAgICAgICAgICAgLi4uYXV0b2J1dHRvbnMsXHJcbiAgICAgICAgICAgICAgJ0VudHJ5JygpIHtwbGF5KGF1dG9maWxsKX1cclxuICAgICAgICAgICAgfSwgJ3JpZ2h0JylcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGF1dG9idXR0b25zICYmIHNldEJ1dHRvbnMoYXV0b2J1dHRvbnMsICdyaWdodCcpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sIDEwMClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJylcclxuICAgIGNvbnN0IGh0bWxyZWYgPSBodG1sLmZpcnN0RWxlbWVudENoaWxkXHJcbiAgICBjb25zdCBzdHlsZUJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXHJcbiAgICBjb25zdCBkaXZUb3BSaWdodDMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgY29uc3QgZGl2VG9wUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgY29uc3QgZGl2VG9wTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcblxyXG4gICAgc3R5bGVCdXR0b25zLmlubmVySFRNTCA9IHN0eWxlXHJcbiAgICBkaXZUb3BSaWdodDMuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwiYmdyb3VwLXJpZ2h0XCI+PC9zcGFuPmBcclxuICAgIGRpdlRvcFJpZ2h0LmlubmVySFRNTCAgPSBgPHNwYW4gY2xhc3M9XCJiZ3JvdXAtcmlnaHRcIj48L3NwYW4+YFxyXG4gICAgZGl2VG9wTGVmdC5pbm5lckhUTUwgICA9IGA8c3BhbiBjbGFzcz1cImJncm91cC1sZWZ0XCI+PC9zcGFuPmBcclxuICAgIGRpdlRvcFJpZ2h0LmNsYXNzTmFtZSAgPSAnbWl0bSBhdXRvZmlsbC1jb250YWluZXInXHJcbiAgICBkaXZUb3BMZWZ0LmNsYXNzTmFtZSAgID0gJ21pdG0gYXV0b2ZpbGwtY29udGFpbmVyJ1xyXG4gICAgZGl2VG9wUmlnaHQzLnN0eWxlID0gY29udGFpbmVyU3R5bGUzXHJcbiAgICBkaXZUb3BSaWdodC5zdHlsZSAgPSBjb250YWluZXJTdHlsZTFcclxuICAgIGRpdlRvcExlZnQuc3R5bGUgICA9IGNvbnRhaW5lclN0eWxlMlxyXG5cclxuICAgIGh0bWwuaW5zZXJ0QmVmb3JlKHN0eWxlQnV0dG9ucywgaHRtbHJlZilcclxuICAgIGh0bWwuaW5zZXJ0QmVmb3JlKGRpdlRvcFJpZ2h0MywgaHRtbHJlZilcclxuICAgIGh0bWwuaW5zZXJ0QmVmb3JlKGRpdlRvcFJpZ2h0LCBodG1scmVmKVxyXG4gICAgaHRtbC5pbnNlcnRCZWZvcmUoZGl2VG9wTGVmdCwgaHRtbHJlZilcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb250YWluZXIucmlnaHQzID0gZGl2VG9wUmlnaHQzXHJcbiAgICAgIGNvbnRhaW5lci5yaWdodCAgPSBkaXZUb3BSaWdodFxyXG4gICAgICBjb250YWluZXIubGVmdCAgID0gZGl2VG9wTGVmdFxyXG4gICAgICBidXR0b24uc3R5bGUgID0gYCR7YnV0dG9uU3R5bGV9YmFja2dyb3VuZC1jb2xvcjogYXp1cmU7YFxyXG4gICAgICBiZ3JvdXAucmlnaHQzID0gZGl2VG9wUmlnaHQzLmNoaWxkcmVuWzBdXHJcbiAgICAgIGJncm91cC5yaWdodCA9IGRpdlRvcFJpZ2h0LmNoaWxkcmVuWzBdXHJcbiAgICAgIGJncm91cC5sZWZ0ICA9IGRpdlRvcExlZnQuY2hpbGRyZW5bMF1cclxuICAgICAgdXJsQ2hhbmdlKGV2ZW50KVxyXG4gICAgICBvYnNlcnZlZCgpXHJcbiAgICB9LCAwKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihjb21wYXJlSHJlZik7XHJcbiAgd2luZG93Lm9ic2VydmVyID0gb2JzZXJ2ZXJcclxuICBmdW5jdGlvbiBvYnNlcnZlZCgpIHtcclxuICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKVxyXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7c3VidHJlZTogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlfSlcclxuICB9XHJcblxyXG59XHJcbiIsICJmdW5jdGlvbiBkZWJvdW5jZSAoZm4sIGRlbGF5ID0gNTAwKSB7XHJcbiAgbGV0IF90aW1lb3V0XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IF90aGlzID0gdGhpc1xyXG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50c1xyXG4gICAgX3RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KF90aW1lb3V0KVxyXG4gICAgX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgZm4uYXBwbHkoX3RoaXMsIGFyZ3MpXHJcbiAgICB9LCBkZWxheSlcclxuICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZVxyXG4iLCAiLyogZ2xvYmFsIGxvY2F0aW9uICovXHJcbmNvbnN0IF93c19uYW1lc3BhY2UgPSByZXF1aXJlKCcuL193c19uYW1lc3BhY2UnKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgbmFtZXNwYWNlID0gX3dzX25hbWVzcGFjZSgpXHJcbiAgbGV0IHJvdXRlID0gd2luZG93Lm1pdG0ucm91dGVzW25hbWVzcGFjZV1cclxuICBjb25zdCB7X3N1Ym5zOiBzfSA9IHJvdXRlLl9jaGlsZG5zXHJcbiAgaWYgKHMgJiYgbWl0bS5yb3V0ZXNbc10pIHtcclxuICAgIHJvdXRlPSBtaXRtLnJvdXRlc1tzXVxyXG4gIH1cclxuICByZXR1cm4gcm91dGVcclxufVxyXG4iLCAiLyogZ2xvYmFsIGxvY2F0aW9uLCBNdXRhdGlvbk9ic2VydmVyICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfc2NyZWVuc2hvdCA9IHJlcXVpcmUoJy4vX3NjcmVlbnNob3QnKVxyXG5jb25zdCBfd3NfbmFtZXNwYWNlID0gcmVxdWlyZSgnLi9fd3NfbmFtZXNwYWNlJylcclxuY29uc3QgX3dzX2RlYm91bmNlID0gcmVxdWlyZSgnLi9fd3NfZGVib3VuY2UnKVxyXG5jb25zdCBfd3NfdmVuZG9yID0gcmVxdWlyZSgnLi9fd3NfdmVuZG9yJylcclxuY29uc3QgX3dzX3JvdXRlID0gcmVxdWlyZSgnLi9fd3Nfcm91dGUnKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgaWYgKGxvY2F0aW9uLm9yaWdpbi5tYXRjaCgnY2hyb21lLWV4dGVuc2lvbicpKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgY29uc3QgaG9zdCA9IGxvY2F0aW9uLm9yaWdpbi5yZXBsYWNlKCc6Ly8nICwnfn4nKVxyXG4gIGNvbnN0IHNzaG90ID0ge31cclxuICBjb25zdCBub2RlcyA9IHt9XHJcblxyXG4gIGxldCByb3V0ZSA9IF93c19yb3V0ZSgpXHJcbiAgaWYgKHJvdXRlICYmIHJvdXRlLnNjcmVlbnNob3QpIHtcclxuICAgIGNvbnN0IHsgb2JzZXJ2ZXI6IG9iIH0gPSByb3V0ZS5zY3JlZW5zaG90XHJcbiAgICBmb3IgKGNvbnN0IGlkIGluIG9iKSB7XHJcbiAgICAgIGxldCBlbCA9IHt9XHJcbiAgICAgIGlmIChvYltpZF0gPT09IHRydWUpIHtcclxuICAgICAgICBlbCA9IHtcclxuICAgICAgICAgIHRpdGxlOiAnbm90aXRsZScsXHJcbiAgICAgICAgICBpbnNlcnQ6IHRydWUsXHJcbiAgICAgICAgICByZW1vdmU6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0gaWYgKHR5cGVvZiBvYltpZF0gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgZWwgPSB7XHJcbiAgICAgICAgICB0aXRsZTogJ25vY2FwdHVyZScsXHJcbiAgICAgICAgICBpbnNlcnQ6IGZhbHNlLFxyXG4gICAgICAgICAgcmVtb3ZlOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBhcnIgPSBvYltpZF0uc3BsaXQoJzonKVxyXG4gICAgICAgIGFyclsxXS5zcGxpdCgnLCcpLm1hcChlID0+IHtcclxuICAgICAgICAgIGVsW2VdID0gdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgZWwudGl0bGUgPSBhcnJbMF1cclxuICAgICAgfVxyXG4gICAgICBzc2hvdFtpZF0gPSBlbFxyXG4gICAgICBub2Rlc1tpZF0gPSB7XHJcbiAgICAgICAgaW5zZXJ0OiBmYWxzZSxcclxuICAgICAgICByZW1vdmU6IHRydWVcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IG9iXHJcbiAgbGV0IGZuYW1lXHJcbiAgY29uc3QgbmFtZXNwYWNlID0gX3dzX25hbWVzcGFjZSgpXHJcbiAgY29uc3QgYnJvd3NlciA9IF93c192ZW5kb3IoKVxyXG4gIGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHJvdXRlICYmIHJvdXRlLnNjcmVlbnNob3QpIHtcclxuICAgICAgb2IgPSByb3V0ZS5zY3JlZW5zaG90Lm9ic2VydmVyXHJcbiAgICB9XHJcbiAgICBjb25zdCBfcGFnZSA9IHdpbmRvd1sneHBsYXktcGFnZSddXHJcbiAgICBmb3IgKGNvbnN0IGlkIGluIG5vZGVzKSB7XHJcbiAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKGlkKVxyXG4gICAgICBpZiAoZWwubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKCFub2Rlc1tpZF0uaW5zZXJ0KSB7XHJcbiAgICAgICAgICBub2Rlc1tpZF0uaW5zZXJ0ID0gdHJ1ZVxyXG4gICAgICAgICAgaWYgKG5vZGVzW2lkXS5yZW1vdmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBub2Rlc1tpZF0ucmVtb3ZlID0gZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChvYiAmJiB0eXBlb2Ygb2JbaWRdPT09J2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjb25zdCBub2QgPSBlbFswXSB8fCBlbFxyXG4gICAgICAgICAgICBpZiAobm9kLl93c19jb3VudD09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIG5vZC5fd3NfY291bnQgPSAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbm9kLl93c19jb3VudCArPSAxXHJcbiAgICAgICAgICAgIGlmIChub2QuX3dzX2NvdW50PDIpIHtcclxuICAgICAgICAgICAgICBvYltpZF0obm9kKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgICAgaWYgKHNzaG90W2lkXS5pbnNlcnQpIHtcclxuICAgICAgICAgICAgZm5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgJycpLnJlcGxhY2UoL1xcLy9nLCAnLScpXHJcbiAgICAgICAgICAgIGZuYW1lID0gYH4ke2ZuYW1lfS0ke3NzaG90W2lkXS50aXRsZX0taW5zZXJ0YFxyXG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7IG5hbWVzcGFjZSwgX3BhZ2UsIGhvc3QsIGZuYW1lLCBicm93c2VyIH1cclxuICAgICAgICAgICAgX3NjcmVlbnNob3QocGFyYW1zKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIW5vZGVzW2lkXS5yZW1vdmUpIHtcclxuICAgICAgICAgIG5vZGVzW2lkXS5yZW1vdmUgPSB0cnVlXHJcbiAgICAgICAgICBub2Rlc1tpZF0uaW5zZXJ0ID0gZmFsc2VcclxuICAgICAgICAgIGlmIChzc2hvdFtpZF0ucmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGZuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sICcnKS5yZXBsYWNlKC9cXC8vZywgJy0nKVxyXG4gICAgICAgICAgICBmbmFtZSA9IGB+JHtmbmFtZX0tJHtzc2hvdFtpZF0udGl0bGV9LXJlbW92ZWBcclxuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geyBuYW1lc3BhY2UsIF9wYWdlLCBob3N0LCBmbmFtZSwgYnJvd3NlciB9XHJcbiAgICAgICAgICAgIF9zY3JlZW5zaG90KHBhcmFtcylcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKF93c19kZWJvdW5jZShjYWxsYmFjaywgMTAwKSlcclxuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge1xyXG4gICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgIHN1YnRyZWU6IHRydWVcclxuICAgIH0pXHJcbiAgfSkgIFxyXG59XHJcbiIsICJjb25zdCB0NjQgPSAnV2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaaCdcclxuY29uc3QgX2MgPSAnY29sb3I6ICNiYWRhNTUnXHJcblxyXG5jb25zdCBuYW5vaWQgPSAoc2l6ZSA9IDgpID0+IHtcclxuICBsZXQgaWQgPSAnJ1xyXG4gIHdoaWxlIChzaXplLS0gPiAwKSB7XHJcbiAgICBpZCArPSB0NjRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF1cclxuICB9XHJcbiAgcmV0dXJuIGlkXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgX3dzIH0gPSB3aW5kb3dcclxuXHJcbiAgLy8gZXg6IHdzX2Jyb2FkY2FzdCgnX3N0eWxle1wiZGF0YVwiOntcInFcIjpcIipcIixcImNzc1wiOlwiY29sb3I6Ymx1ZTtcIn19JylcclxuICAvLyBleDogd3NfYnJvYWRjYXN0KCdfcGluZ3tcImRhdGFcIjpcIkhpIVwifScpXHJcbiAgd2luZG93LndzX2Jyb2FkY2FzdCA9IChqc29uLCBfYWxsID0gdHJ1ZSkgPT4ge1xyXG4gICAgY29uc3QgbXNnID0geyBkYXRhOiBqc29uLCBfYWxsIH1cclxuICAgIF93cy5zZW5kKGBicm9hZGNhc3Qke0pTT04uc3RyaW5naWZ5KG1zZyl9YClcclxuICB9XHJcblxyXG4gIC8vIGV4OiB3c19lbWl0cGFnZSgnX3N0eWxle1wiZGF0YVwiOntcInFcIjpcIipcIixcImNzc1wiOlwiY29sb3I6Ymx1ZTtcIn19JylcclxuICAvLyBleDogd3NfZW1pdHBhZ2UoJ19waW5ne1wiZGF0YVwiOlwiSGkhXCJ9JylcclxuICB3aW5kb3cud3NfZW1pdHBhZ2UgPSAoanNvbiwgcmVnZXggPSAnJykgPT4ge1xyXG4gICAgY29uc3QgbXNnID0geyBkYXRhOiBqc29uLCByZWdleCB9XHJcbiAgICBfd3Muc2VuZChgZW1pdHBhZ2Uke0pTT04uc3RyaW5naWZ5KG1zZyl9YClcclxuICB9XHJcblxyXG4gIC8vIGV4OiB3c19fc3R5bGUoe1wicVwiOlwiKlwiLFwiY3NzXCI6XCJjb2xvcjpibHVlO1wifSlcclxuICB3aW5kb3cud3NfX3N0eWxlID0gKGpzb24sIF9hbGwgPSB0cnVlKSA9PiB7XHJcbiAgICBjb25zdCBtc2cgPSB7IGRhdGE6IGpzb24sIF9hbGwgfVxyXG4gICAgX3dzLnNlbmQoYF9zdHlsZSR7SlNPTi5zdHJpbmdpZnkobXNnKX1gKVxyXG4gIH1cclxuXHJcbiAgLy8gZXg6IHdzX19waW5nKCdIaSEnKVxyXG4gIHdpbmRvdy53c19fcGluZyA9IChqc29uKSA9PiB7XHJcbiAgICBjb25zdCBtc2cgPSB7IGRhdGE6IGpzb24gfVxyXG4gICAgX3dzLnNlbmQoYF9waW5nJHtKU09OLnN0cmluZ2lmeShtc2cpfWApXHJcbiAgfVxyXG5cclxuICAvLyBleDogd3NfX2hlbHAoKVxyXG4gIHdpbmRvdy53c19faGVscCA9ICgpID0+IHtcclxuICAgIF93cy5zZW5kKCdfaGVscHt9JylcclxuICB9XHJcblxyXG4gIC8vIGV4OiB3c19fb3Blbih7dXJsOidodHRwczovL2dvb2dsZS5jb20nfSlcclxuICB3aW5kb3cud3NfX29wZW4gPSAoanNvbikgPT4ge1xyXG4gICAgY29uc3QgbXNnID0geyBkYXRhOiBqc29uIH1cclxuICAgIF93cy5zZW5kKGBfb3BlbiR7SlNPTi5zdHJpbmdpZnkobXNnKX1gKVxyXG4gIH1cclxuXHJcbiAgd2luZG93LndzX19zZW5kID0gKGNtZCwgZGF0YSwgaGFuZGxlcikgPT4ge1xyXG4gICAgY29uc3QgeyBfX2ZsYWcgfSA9IHdpbmRvdy5taXRtXHJcbiAgICBjb25zdCBpZCA9IG5hbm9pZCgpXHJcbiAgICBjb25zdCBrZXkgPSBgJHtjbWR9OiR7aWR9YFxyXG4gICAgd2luZG93Ll93c19xdWV1ZVtrZXldID0gaGFuZGxlciB8fCAodyA9PiB7fSlcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHdpbmRvdy5fd3NfcXVldWVba2V5XSkge1xyXG4gICAgICAgIGRlbGV0ZSB3aW5kb3cuX3dzX3F1ZXVlW2tleV1cclxuICAgICAgICBjb25zb2xlLmxvZygnJWNXczogd3MgdGltZW91dCEnLCBfYywga2V5KVxyXG4gICAgICB9XHJcbiAgICB9LCA1MDAwKVxyXG4gICAgY29uc3QgcGFyYW1zID0gYCR7a2V5fSR7SlNPTi5zdHJpbmdpZnkoeyBkYXRhIH0pfWBcclxuICAgIF93cy5zZW5kKHBhcmFtcylcclxuICB9XHJcbn1cclxuIiwgIi8qIGdsb2JhbCBsb2NhdGlvbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cclxuY29uc3QgX3dzX25hbWVzcGFjZSA9IHJlcXVpcmUoJy4vX3dzX25hbWVzcGFjZScpXHJcblxyXG5sZXQgX3RpbWVvdXRcclxubGV0IF9jc3AgPSB7fVxyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBjb25zdCBjc3BFcnJvciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBjb25zdCB7IGhvc3RuYW1lOiBob3N0IH0gPSBsb2NhdGlvblxyXG4gICAgY29uc3QgbmFtZXNwYWNlID0gX3dzX25hbWVzcGFjZSgpXHJcbiAgICBjb25zdCBwYXRoID0gbG9jYXRpb24ucGF0aG5hbWVcclxuICAgICAgLnJlcGxhY2UoL15cXC8vLCAnJylcclxuICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnLScpXHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGJsb2NrZWRVUkksXHJcbiAgICAgIGRpc3Bvc2l0aW9uLFxyXG4gICAgICBkb2N1bWVudFVSSSxcclxuICAgICAgZWZmZWN0aXZlRGlyZWN0aXZlLFxyXG4gICAgICBvcmlnaW5hbFBvbGljeSxcclxuICAgICAgdGltZVN0YW1wLFxyXG4gICAgICB0eXBlLFxyXG4gICAgICB2aW9sYXRlZERpcmVjdGl2ZVxyXG4gICAgfSA9IGVcclxuICAgIGNvbnN0IHR5cCA9IGBbJHtkaXNwb3NpdGlvbn1dICR7ZG9jdW1lbnRVUkl9YFxyXG4gICAgaWYgKCFfY3NwW3R5cF0pIHtcclxuICAgICAgX2NzcFt0eXBdID0ge31cclxuICAgIH1cclxuICAgIGlmICghX2NzcFt0eXBdLl9nZW5lcmFsXykge1xyXG4gICAgICBfY3NwW3R5cF0uX2dlbmVyYWxfID0ge1xyXG4gICAgICAgIHBvbGljeTogb3JpZ2luYWxQb2xpY3ksXHJcbiAgICAgICAgbmFtZXNwYWNlLFxyXG4gICAgICAgIGhvc3QsXHJcbiAgICAgICAgcGF0aFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBfZG9jID0gX2NzcFt0eXBdXHJcbiAgICBpZiAoIV9kb2NbdmlvbGF0ZWREaXJlY3RpdmVdKSB7XHJcbiAgICAgIF9kb2NbdmlvbGF0ZWREaXJlY3RpdmVdID0ge31cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBfZXJyID0gX2RvY1t2aW9sYXRlZERpcmVjdGl2ZV1cclxuICAgIGlmICghX2VycltibG9ja2VkVVJJXSkge1xyXG4gICAgICBfZXJyW2Jsb2NrZWRVUkldID0ge31cclxuICAgIH1cclxuICAgIGNvbnN0IF9tYXRjaCA9IG9yaWdpbmFsUG9saWN5Lm1hdGNoKGAke3Zpb2xhdGVkRGlyZWN0aXZlfSBbXjtdKztgKVxyXG4gICAgY29uc3QgZGlyZWN0aXZlID0gX21hdGNoID8gX21hdGNoWzBdIDogZWZmZWN0aXZlRGlyZWN0aXZlXHJcbiAgICBfZXJyW2Jsb2NrZWRVUkldID0ge1xyXG4gICAgICBkaXJlY3RpdmUsXHJcbiAgICAgIHRpbWVTdGFtcCxcclxuICAgICAgdHlwZVxyXG4gICAgfVxyXG4gICAgX3RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KF90aW1lb3V0KVxyXG4gICAgX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJz4+PiBDU1A6JywgX2NzcClcclxuICAgICAgLy8gd2luZG93LndzX19zZW5kKCdjc3BfZXJyb3InLCB7XHJcbiAgICAgIC8vICAgbmFtZXNwYWNlLFxyXG4gICAgICAvLyAgIGhvc3QsXHJcbiAgICAgIC8vICAgcGF0aCxcclxuICAgICAgLy8gICBfY3NwLFxyXG4gICAgICAvLyB9KTtcclxuICAgICAgX2NzcCA9IHt9XHJcbiAgICB9LCA0MDAwKVxyXG4gIH1cclxuXHJcbiAgaWYgKHdpbmRvdy5taXRtLmNsaWVudC5jc3ApIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlY3VyaXR5cG9saWN5dmlvbGF0aW9uJywgY3NwRXJyb3IpXHJcbiAgfVxyXG59XHJcbi8vIGRpc3Bvc2l0aW9uOiBcInJlcG9ydFwiXHJcbi8vIGRvY3VtZW50VVJJOiBcImh0dHBzOi8vd2hhdC9odG1sL2NvbnRhaW4vY3NwXCJcclxuLy8gdmlvbGF0ZWREaXJlY3RpdmU6IFwiaW1nLXNyY1wiXHJcblxyXG4vLyBibG9ja2VkVVJJOiBcImh0dHBzOi8vd2hhdC91cmwvZ2V0dGluZy9ibG9ja2VkXCJcclxuLy8gZWZmZWN0aXZlRGlyZWN0aXZlOiBcImltZy1zcmNcIlxyXG4vLyBvcmlnaW5hbFBvbGljeTogXCJzY3JpcHQtc3JjIG51bGw7IGZyYW1lLXNyYyBudWxsOyBzdHlsZS1zcmMgbnVsbDsgc3R5bGUtc3JjLWVsZW0gbnVsbDsgaW1nLXNyYyBudWxsO1wiXHJcbi8vIHRpbWVTdGFtcDogMTkzMy44MjAwMDAwMDU2NTMxXHJcbi8vIHR5cGU6IFwic2VjdXJpdHlwb2xpY3l2aW9sYXRpb25cIlxyXG4iLCAiY29uc3QgX2MgPSAnY29sb3I6ICNiYWRhNTUnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAod2luZG93Ll93c19jb25uZWN0PT09dW5kZWZpbmVkKSB7XHJcbiAgICB3aW5kb3cuX3dzX2Nvbm5lY3QgPSB7fVxyXG4gIH1cclxuXHJcbiAgd2luZG93Lm1pdG0uZm4uaG90S2V5cyA9IG9iaiA9PiB7XHJcbiAgICB3aW5kb3cubWl0bS5tYWNyb2tleXMgPSB7XHJcbiAgICAgIC4uLndpbmRvdy5taXRtLm1hY3Jva2V5cyxcclxuICAgICAgLi4ub2JqXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHdpbmRvdy5taXRtLmZuLmF1dG9jbGljayA9ICgpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuLWF1dG9maWxsJykuY2xpY2soKVxyXG4gICAgfSwgMTAwMClcclxuICB9XHJcbiAgXHJcbiAgd2luZG93Lm1pdG0uZm4uZ2V0Q29va2llID0gbmFtZSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGA7ICR7ZG9jdW1lbnQuY29va2llfWA7XHJcbiAgICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNwbGl0KGA7ICR7bmFtZX09YCk7XHJcbiAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoJzsnKS5zaGlmdCgpO1xyXG4gIH1cclxuXHJcbiAgd2luZG93Lm1pdG0uX21hY3Jvc18gPSAoKSA9PiB7XHJcbiAgICB3aW5kb3cubWl0bS5tYWNyb2tleXMgPSB7fVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5pdChfZCkge1xyXG4gICAgbGV0IG1zZyA9ICdNYWNyb3M6IGV4ZWN1dGVkIGFmdGVyIHdzIG9wZW4nXHJcbiAgICBjb25zb2xlLmxvZyhgJWMke21zZ31gLCBfYywgX2QpXHJcbiAgfVxyXG4gIHdpbmRvdy5fd3NfY29ubmVjdC5tYWNyb3NPbk1vdW50ID0gaW5pdFxyXG59XHJcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cclxuY29uc3QgX3dzX3Bvc3RtZXNzYWdlID0gcmVxdWlyZSgnLi9fd3NfcG9zdG1lc3NhZ2UnKVxyXG5jb25zdCBfd3NfaW5pdFNvY2tldCA9IHJlcXVpcmUoJy4vX3dzX2luaXQtc29ja2V0JylcclxuY29uc3QgX3dzX3NjcmVlbnNob3QgPSByZXF1aXJlKCcuL193c19zY3JlZW5zaG90JylcclxuY29uc3QgX3dzX2xvY2F0aW9uID0gcmVxdWlyZSgnLi9fd3NfbG9jYXRpb24nKVxyXG5jb25zdCBfd3Nfb2JzZXJ2ZXIgPSByZXF1aXJlKCcuL193c19vYnNlcnZlcicpXHJcbmNvbnN0IF93c19nZW5lcmFsID0gcmVxdWlyZSgnLi9fd3NfZ2VuZXJhbCcpXHJcbmNvbnN0IF93c19jc3BFcnIgPSByZXF1aXJlKCcuL193c19jc3AtZXJyJylcclxuY29uc3QgX3dzX21hY3JvcyA9IHJlcXVpcmUoJy4vX3dzX21hY3JvcycpXHJcbmNvbnN0IF9jID0gJ2NvbG9yOiByZWQnXHJcblxyXG5fd3NfcG9zdG1lc3NhZ2UoKVxyXG5fd3NfaW5pdFNvY2tldCgpXHJcbl93c19zY3JlZW5zaG90KClcclxuX3dzX2xvY2F0aW9uKClcclxuX3dzX29ic2VydmVyKClcclxuX3dzX2dlbmVyYWwoKVxyXG5fd3NfY3NwRXJyKClcclxuX3dzX21hY3JvcygpXHJcbmNvbnNvbGUubG9nKCclY1dzOiB3cy1jbGllbnQgbG9hZGVkLi4uJywgX2MpIl0sCiAgIm1hcHBpbmdzIjogInEyQkFBQSwyRkFDQSxPQUFPLFFBQVUsSUFBTSxDQUNyQix3QkFBeUIsTUFBTyxDQUM5QixHQUFJLE9BQU8sS0FBSyxPQUFPLFlBQWEsQ0FDbEMsUUFBUSxJQUFJLG9CQUFvQixNQUFNLHFCQUFxQixTQUFTLE9BQVEsTUFBTSxPQUd0RixPQUFPLGlCQUFpQixVQUFXLGVBQWdCLFdDUHJELG9GQUFNLEtBQUssaUJBRVgsT0FBTyxRQUFVLElBQU0sQ0FDckIsR0FBSSxXQUNKLE1BQU8sQ0FFTCxNQUFPLENBQUUsTUFBUSxDQUNmLFFBQVEsSUFBSSxPQUdkLE1BQU8sQ0FBRSxNQUFRLENBQ2YsUUFBUSxJQUFJLE9BR2QsTUFBTyxDQUFFLE1BQVEsQ0FDZixLQUFNLFVBQVcsd0ZBQ2pCLFVBQVksT0FBTyxLQUFLLEtBQUssSUFBSyxRQUFTLFVBQzNDLFVBQVUsUUFHWixPQUFRLENBQUUsTUFBUSxDQUNoQixLQUFNLENBQUUsRUFBRyxLQUFRLEtBQ25CLFNBQVMsaUJBQWlCLEdBQUcsUUFDM0IsTUFBUyxLQUFLLE1BQU0sUUFBVSxNQUlsQyxVQUFXLENBQUUsUUFBVSxDQUNyQixHQUFJLENBQUMsU0FBUyxP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QUFJLENBQUMsS0FBSyxtQkFBb0IsQ0FDNUIsS0FBSyxtQkFBcUIsR0FHNUIsS0FBTSxNQUFPLEtBQUssbUJBQ2xCLEdBQUksQ0FBQyxLQUFLLFlBQWEsQ0FDckIsS0FBSyxZQUFjLEdBRXJCLEtBQU0sUUFBUyxlQUFlLE1BQU0sR0FBRyw0QkFDdkMsS0FBTSxXQUFZLE9BQVMsT0FBTyxHQUFLLG1CQUN2QyxLQUFLLFlBQWMsQ0FDakIsVUFDQSxVQUNBLE1BRUYsVUFBWSxhQUFhLFVBQ3pCLFNBQVcsV0FBVyxJQUFNLENBQzFCLFFBQVEsSUFBSSxXQUFZLE1BT3hCLEtBQU8sSUFDTixNQUdMLEdBQUksT0FBTyxLQUFLLE9BQU8sSUFBSyxDQUMxQixTQUFTLGlCQUFpQiwwQkFBMkIsZUNqRXpELG9GQUFNLEtBQUssaUJBRVgsT0FBTyxRQUFVLFVBQVksQ0FDM0IsR0FBSSxPQUFPLGNBQWMsT0FBVyxDQUNsQyxPQUFPLFlBQWMsR0FHdkIsT0FBTyxLQUFLLEdBQUcsUUFBVSxLQUFPLENBQzlCLE9BQU8sS0FBSyxVQUFZLGlDQUNuQixPQUFPLEtBQUssV0FDWixNQUlQLE9BQU8sS0FBSyxHQUFHLFVBQVksSUFBTSxDQUMvQixXQUFXLElBQU0sQ0FDZixTQUFTLGNBQWMsaUJBQWlCLFNBQ3ZDLE1BR0wsT0FBTyxLQUFLLEdBQUcsVUFBWSxNQUFRLENBQ2pDLEtBQU0sT0FBUSxLQUFLLFNBQVMsU0FDNUIsS0FBTSxPQUFRLE1BQU0sTUFBTSxLQUFLLFNBQy9CLEdBQUksTUFBTSxTQUFXLEVBQUcsTUFBTyxPQUFNLE1BQU0sTUFBTSxLQUFLLFNBR3hELE9BQU8sS0FBSyxTQUFXLElBQU0sQ0FDM0IsT0FBTyxLQUFLLFVBQVksSUFHMUIsY0FBYyxHQUFJLENBQ2hCLEdBQUksS0FBTSxpQ0FDVixRQUFRLElBQUksS0FBSyxNQUFPLElBQUksSUFFOUIsT0FBTyxZQUFZLGNBQWdCLFNDakNyQyxHQUFNLGlCQUFrQix5QkFDeEIsR0FBTSxnQkFBaUIseUJBQ3ZCLEdBQU0sZ0JBQWlCLHdCQUN2QixHQUFNLGNBQWUsc0JBQ3JCLEdBQU0sY0FBZSxzQkFDckIsR0FBTSxhQUFjLHFCQUNwQixHQUFNLFlBQWEscUJBQ25CLEdBQU0sWUFBYSxvQkFDbkIsR0FBTSxJQUFLLGFBRVgsa0JBQ0EsaUJBQ0EsaUJBQ0EsZUFDQSxlQUNBLGNBQ0EsYUFDQSxhQUNBLFFBQVEsSUFBSSw0QkFBNkIiLAogICJuYW1lcyI6IFtdCn0K
