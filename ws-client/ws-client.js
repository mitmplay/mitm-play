(()=>{var __defProp=Object.defineProperty;var __defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var require_ws_postmessage=__commonJS({"ws-client/_src/_ws_postmessage.js"(exports,module){module.exports=()=>{function receiveMessage(event){if(window.mitm.client.postmessage){console.log(`>>> Postmessage: ${event.origin} => https://${location.host}`,event.data)}}window.addEventListener("message",receiveMessage,false)}}});var require_ws_client=__commonJS({"ws-client/_src/_ws_client.js"(exports,module){module.exports=()=>{let windowRef;return{_help({data}){console.log(data)},_ping({data}){console.log(data)},_open({data}){const features="directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,width=800,height=600";windowRef=window.open(data.url,"_logs",features);windowRef.blur()},_style({data}){const{q,css}=data;document.querySelectorAll(q).forEach(node=>node.style.cssText=css)},_saveTags({routes}){if(!location.origin.match("chrome-extension")){console.log("Update routes");window.mitm.routes=routes}},_files({data,typ}){const{files}=window.mitm;console.warn(`receive brodcast ${typ}`);for(const key in files[`${typ}_events`]){console.warn(files[`${typ}_events`][key]+"");files[`${typ}_events`][key](data)}},_setClient({data}){console.log("_setClient",data);window.mitm.client=data}}}}});var require_ws_msg_parser=__commonJS({"ws-client/_src/_ws_msg-parser.js"(exports,module){var _ws_client=require_ws_client();var _ws_wccmd=_ws_client();module.exports=(event,msg)=>{if(window.mitm.argv.debug){if(msg.length>40){console.log(">>> ws-message: `%s...`",msg.slice(0,40))}else{console.log(">>> ws-message: `%s`",msg)}}const arr=msg.replace(/\s+$/,"").match(/^ *([\w:]+) *(\{.*)/);if(arr){let[,cmd,json]=arr;try{if(typeof json==="string"){json=JSON.parse(json)}}catch(error){console.error(json,error)}if(window._ws_queue[cmd]){const handler=window._ws_queue[cmd];delete window._ws_queue[cmd];handler(json.data)}else if(_ws_wccmd[cmd]){_ws_wccmd[cmd].call(event,json)}}}}});var require_ws_in_iframe=__commonJS({"ws-client/_src/_ws_in-iframe.js"(exports,module){module.exports=()=>{let ifrm;try{ifrm=window.self!==window.top}catch(e){ifrm=true}return ifrm?"iframe":"window"}}});var require_ws_vendor=__commonJS({"ws-client/_src/_ws_vendor.js"(exports,module){module.exports=()=>{const{vendor}=navigator;const browser={"":"firefox","Google Inc.":"chromium","Apple Computer, Inc.":"webkit"}[vendor];return browser}}});var require_ws_init_socket=__commonJS({"ws-client/_src/_ws_init-socket.js"(exports,module){var _ws_msgParser=require_ws_msg_parser();var _ws_inIframe=require_ws_in_iframe();var _ws_vendor=require_ws_vendor();var _c2="color: #bada55";module.exports=()=>{window._ws_queue={};window._ws_connected=false;const{__args,__flag}=window.mitm;if(window._ws_connect===void 0){window._ws_connect={}}const onopen=data=>{function ws_send(){for(const key in window._ws_connect){const fn=window._ws_connect[key];window._ws_connected_send=true;console.log(`%cWs: ${fn+""}`,_c2);fn(data)}}if(__flag["ws-connect"]){console.log("%cWs: open connection",_c2)}console.timeEnd("ws");window._ws_connected=true;setTimeout(ws_send,1);setTimeout(()=>{if(!window._ws_connected_send){console.error("RETRY..........");ws_send()}},10)};const onclose=function(){if(__flag["ws-connect"]){console.log("ws: close connection")}};const onmessage=function(e){if(__flag["on-message"]){console.log("on-message:",e.data)}_ws_msgParser(e,e.data)};const connect=__args.nosocket===void 0;if(connect||window.chrome&&chrome.tabs){const vendor=["firefox","webkit"].includes(_ws_vendor());const pre=vendor?"ws":"wss";const prt=vendor?"3002":"3001";const url=`${pre}://localhost:${prt}/ws?page=${_ws_inIframe()}&url=${document.URL.split("?")[0]}`;let ws;try{ws=new WebSocket(url)}catch(error){console.error(error)}console.time("ws");window._ws=ws;ws.onopen=onopen;ws.onclose=onclose;ws.onmessage=onmessage}if(__flag["ws-connect"]){console.log(`%cWs: ${connect?"init":"off"} connection`,_c2)}}}});var require_screenshot=__commonJS({"ws-client/_src/_screenshot.js"(exports,module){async function screnshot(json){const{__args}=window.mitm;if([true,"off"].includes(__args.nosocket)){return new Promise(function(resolve,reject){try{const config={method:"POST",headers:{"Accept":"application/json","Content-Type":"application/json"},body:JSON.stringify(json)};fetch("/mitm-play/screnshot.json",config).then(function(response){resolve(response.json())}).then(function(data){resolve(data)})}catch(error){reject(error)}})}else{return new Promise(function(resolve,reject){try{window.ws__send("screenshot",json,resolve)}catch(error){reject(error)}})}}module.exports=screnshot}});var require_ws_namespace=__commonJS({"ws-client/_src/_ws_namespace.js"(exports,module){module.exports=()=>{const{hostname:host}=location;let namespace;function toRegex(str){return str.replace(/\./g,"\\.").replace(/\?/g,"\\?")}for(const key in window.mitm.routes){if(host.match(toRegex(key.replace(/~/g,"[^.]*")))){namespace=key;break}}return namespace}}});var require_ws_screenshot=__commonJS({"ws-client/_src/_ws_screenshot.js"(exports,module){var _screenshot=require_screenshot();var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var act;function screenshot(e){if(mitm.argv.lazyclick){if(mitm.screenshot){window.mitm.screenshot=void 0;console.log(">>> delay action");return}if(act){act=void 0;return}}const namespace=_ws_namespace();const browser=_ws_vendor();const host=location.origin.replace("://","~~");const route=window.mitm.routes[namespace];const{selector}=route.screenshot;const arr=document.body.querySelectorAll(selector);const fname=location.pathname.replace(/^\//g,"~");const delay=mitm.argv.lazyclick===true?700:mitm.argv.lazyclick;for(const el of arr){let node=e.target;while(el!==node&&node!==null&&node!==document.body){node=node.parentNode}if(node!==document.body){const _page=window["xplay-page"];const params={namespace,_page,host,browser};params.fname=fname==="~"?"~_":fname;_screenshot(params);if(mitm.argv.lazyclick){window.mitm.screenshot=e.target;e.stopImmediatePropagation();e.stopPropagation();e.preventDefault();mitm.lastEvent=e;setTimeout(()=>{act=window.mitm.screenshot;if(act){act.click();act=void 0}else{console.log("delay action undefined")}},delay)}else{mitm.lastEvent=e}return}}}function eventclick(e){mitm.lastEvent=e}module.exports=()=>{const route=window.mitm.routes[_ws_namespace()];window.addEventListener("DOMContentLoaded",()=>{const body=document.querySelector("body");if(route&&route.screenshot){body.addEventListener("click",screenshot)}else{body.addEventListener("click",eventclick)}})}}});var require_ws_location=__commonJS({"ws-client/_src/_ws_location.js"(exports,module){var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var wait=ms=>new Promise(resolve=>setTimeout(resolve,ms));module.exports=()=>{const containerStyle1="position: fixed;z-index: 99999;right: 3px;";const containerStyle2="position: fixed;z-index: 99999;left:  3px;";const containerStyle3="position: fixed;z-index: 99999;right: 3px; top: 20px; text-align: end;";const buttonStyle="";const style=`
  .mitm-btn {
    border: none;
    font-size: 8px;
    cursor: pointer;
    border-radius: 3px;
    font-family: monaco, Consolas, "Lucida Console", monospace;
  }
  .mitm-btn:hover{
    text-decoration:underline;
  }
  .bgroup-right .mitm-br,
  .bgroup-left .mitm-br{
    display:table;
  }`;const event=new Event("urlchanged");let container={right3:{},right:{},left:{}};let ctrl=false;let button={};let bgroup={right3:{},right:{},left:{}};let intervId;let observerfn=[];function toRegex(pathMsg){let[path,msg]=pathMsg.split("=>").map(item=>item.trim());path=path.replace(/\./g,"\\.").replace(/\?/g,"\\?");return{path,msg}}function createButton(buttons,pos){let br;for(const id in buttons){const[caption,color,klas]=id.split("|");const btn=document.createElement("button");const fn2=buttons[id];btn.onclick=async e=>{let arr=fn2(e);if(arr instanceof Promise){arr=await arr}if(Array.isArray(arr)){await play(arr)}};btn.innerText=caption;btn.classList.add("mitm-btn");btn.classList.add(`${pos}`);btn.classList.add(klas||caption);btn.style=buttonStyle+(color?`background: ${color};`:"");if(pos==="right"){br=document.createElement("span");br.innerHTML="&nbsp;";bgroup[pos].appendChild(br);bgroup[pos].appendChild(btn)}else{br=document.createElement("span");br.className="mitm-br";bgroup[pos].appendChild(btn);bgroup[pos].appendChild(br)}}}function setButtons(buttons,position){if(bgroup[position]){bgroup[position].innerHTML="";createButton(buttons,position)}}let debunk;let onces={};async function urlChange(event2){const namespace=_ws_namespace();if(window.mitm.autofill){delete window.mitm.autofill}if(window.mitm.autointerval){clearInterval(intervId);delete window.mitm.autointerval}if(window.mitm.autobuttons){delete window.mitm.autobuttons}if(window.mitm.rightbuttons){delete window.mitm.rightbuttons}if(window.mitm.leftbuttons){delete window.mitm.leftbuttons}if(window.mitm.macrokeys){delete window.mitm.macrokeys}if(namespace){const{href,origin}=location2;const _href=href.replace(origin,"");const{_macros_,macros}=window.mitm;observerfn=[];for(const key in macros){const{path,msg}=toRegex(key);if(_href.match(path)){button.innerHTML=msg||"Entry";_macros_&&_macros_();let fn2=macros[key]();if(fn2 instanceof Promise){fn2=await fn2}if(typeof fn2==="function"){observerfn.push(fn2)}debunk&&clearTimeout(debunk);debunk=setTimeout(()=>{onces={};debunk=void 0;const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");if(window.mitm.autofill){autobuttons&&setButtons(__spreadProps(__spreadValues({},autobuttons),{"Entry"(){let{autofill}=window.mitm;if(typeof autofill==="function"){autofill=autofill()}play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},0)}}}container.right3.style=containerStyle3;container.right.style=containerStyle1;container.left.style=containerStyle2;const visible=window.mitm.autofill;button.style=buttonStyle+(visible?"background-color: azure;":"display: none;");if(typeof window.mitm.autointerval==="function"){intervId=setInterval(window.mitm.autointerval,500)}ctrl=false}const vendor=_ws_vendor();if(["firefox","webkit"].includes(vendor)||chrome&&!chrome.tabs){document.querySelector("html").addEventListener("keydown",keybCtrl);window.addEventListener("urlchanged",urlChange);if(document.readyState!=="loading"){init()}else{window.addEventListener("DOMContentLoaded",init)}}else{return}const fn=history.pushState;history.pushState=function(){fn.apply(history,arguments);compareHref()};_play=json=>{return new Promise(function(resolve,reject){try{window.ws__send("autofill",json,resolve)}catch(error){reject(error)}})};_post=json=>{return new Promise(function(resolve,reject){try{const config={method:"POST",headers:{"Accept":"application/json","Content-Type":"application/json"},body:JSON.stringify(json)};fetch("/mitm-play/play.json",config).then(function(response){resolve(response.json())}).then(function(data){resolve(data)})}catch(error){reject(error)}})};async function play(autofill){const{__args}=window.mitm;if(autofill){if(typeof autofill==="function"){autofill=autofill()}const browser=_ws_vendor();const lenth=autofill.length;const _page=window["xplay-page"];const _frame=window["xplay-frame"];const _json={autofill,browser,_page,_frame};console.log(lenth===1?`  ${autofill}`:JSON.stringify(autofill,null,2));let result;if([true,"off"].includes(__args.nosocket)){result=await _post(_json)}else{result=await _play(_json)}return result}}window.mitm.fn.play=play;window.mitm.fn.wait=wait;function keybCtrl(e){const{macrokeys}=window.mitm;if(e.ctrlKey&&e.key==="Shift"){ctrl=!ctrl;container.right3.style=containerStyle3+(!ctrl?"":"display: none;");container.right.style=containerStyle1+(!ctrl?"":"display: none;");container.left.style=containerStyle2+(!ctrl?"":"display: none;")}else if(e.ctrlKey&&e.altKey){console.log({macro:`ctrl + alt + ${e.code}`});if(macrokeys){let macro=macrokeys[e.code];if(macro){macro=macro();if(Array.isArray(macro)){let macroIndex=0;const interval=setInterval(()=>{let selector=macro[macroIndex];if(selector.match(/^ *[=-]>/)){const activeElement=CssSelectorGenerator.getCssSelector(document.activeElement);selector=`${activeElement} ${selector}`}play([selector]);macroIndex+=1;if(macroIndex>=macro.length){clearInterval(interval)}},100)}}}}}const{location:location2}=document;let oldHref=location2.href;let oDebunk=void 0;function compareHref(nodes){if(oldHref!=location2.href){window.dispatchEvent(event);oldHref=location2.href}else{if(observerfn.length){oDebunk&&clearTimeout(oDebunk);oDebunk=setTimeout(()=>{oDebunk=void 0;for(const fn2 of observerfn){const name=fn2.name;if(name&&name.match(/Once$/)){if(onces[name]){continue}else{onces[name]=true}}fn2(nodes)}const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");const{autofill}=window.mitm;if(autofill){autobuttons&&setButtons(__spreadProps(__spreadValues({},autobuttons),{"Entry"(){play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},100)}}}function init(){const html=document.querySelector("html");const htmlref=html.firstElementChild;const styleButtons=document.createElement("style");const divTopRight3=document.createElement("div");const divTopRight=document.createElement("div");const divTopLeft=document.createElement("div");styleButtons.innerHTML=style;divTopRight3.innerHTML=`<span class="bgroup-right"></span>`;divTopRight.innerHTML=`<span class="bgroup-right"></span>`;divTopLeft.innerHTML=`<span class="bgroup-left"></span>`;divTopRight.className="mitm autofill-container";divTopLeft.className="mitm autofill-container";divTopRight3.style=containerStyle3;divTopRight.style=containerStyle1;divTopLeft.style=containerStyle2;html.insertBefore(styleButtons,htmlref);html.insertBefore(divTopRight3,htmlref);html.insertBefore(divTopRight,htmlref);html.insertBefore(divTopLeft,htmlref);setTimeout(()=>{container.right3=divTopRight3;container.right=divTopRight;container.left=divTopLeft;button.style=`${buttonStyle}background-color: azure;`;bgroup.right3=divTopRight3.children[0];bgroup.right=divTopRight.children[0];bgroup.left=divTopLeft.children[0];urlChange(event);observed()},0)}const observer=new MutationObserver(compareHref);window.observer=observer;function observed(){observer.disconnect();observer.observe(document.body,{subtree:true,childList:true})}}}});var require_ws_debounce=__commonJS({"ws-client/_src/_ws_debounce.js"(exports,module){function debounce(fn,delay=500){let _timeout;return function(){const _this=this;const args=arguments;_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{fn.apply(_this,args)},delay)}}module.exports=debounce}});var require_ws_route=__commonJS({"ws-client/_src/_ws_route.js"(exports,module){var _ws_namespace=require_ws_namespace();module.exports=()=>{const namespace=_ws_namespace();let route=window.mitm.routes[namespace];const{_subns:s}=route._childns;if(s&&mitm.routes[s]){route=mitm.routes[s]}return route}}});var require_ws_observer=__commonJS({"ws-client/_src/_ws_observer.js"(exports,module){var _screenshot=require_screenshot();var _ws_namespace=require_ws_namespace();var _ws_debounce=require_ws_debounce();var _ws_vendor=require_ws_vendor();var _ws_route=require_ws_route();module.exports=()=>{if(location.origin.match("chrome-extension")){return}const host=location.origin.replace("://","~~");const sshot={};const nodes={};let route=_ws_route();if(route&&route.screenshot){const{observer:ob2}=route.screenshot;for(const id in ob2){let el={};if(ob2[id]===true){el={title:"notitle",insert:true,remove:true}}if(typeof ob2[id]!=="string"){el={title:"nocapture",insert:false,remove:false}}else{const arr=ob2[id].split(":");arr[1].split(",").map(e=>{el[e]=true});el.title=arr[0]}sshot[id]=el;nodes[id]={insert:false,remove:true}}}let ob;let fname;const namespace=_ws_namespace();const browser=_ws_vendor();const callback=function(){if(route&&route.screenshot){ob=route.screenshot.observer}const _page=window["xplay-page"];for(const id in nodes){const el=document.body.querySelectorAll(id);if(el.length){if(!nodes[id].insert){nodes[id].insert=true;if(nodes[id].remove!==void 0){nodes[id].remove=false}if(ob&&typeof ob[id]==="function"){const nod=el[0]||el;if(nod._ws_count===void 0){nod._ws_count=0}nod._ws_count+=1;if(nod._ws_count<2){ob[id](nod)}}if(sshot[id].insert){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`~${fname}-${sshot[id].title}-insert`;const params={namespace,_page,host,fname,browser};_screenshot(params)}}}else{if(!nodes[id].remove){nodes[id].remove=true;nodes[id].insert=false;if(sshot[id].remove){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`~${fname}-${sshot[id].title}-remove`;const params={namespace,_page,host,fname,browser};_screenshot(params)}}}}};document.addEventListener("DOMContentLoaded",()=>{const observer=new MutationObserver(_ws_debounce(callback,100));observer.observe(document.body,{attributes:true,childList:true,subtree:true})})}}});var require_ws_general=__commonJS({"ws-client/_src/_ws_general.js"(exports,module){var t64="Wabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZh";var nanoid=(size=8)=>{let id="";while(size-- >0){id+=t64[Math.random()*64|0]}return id};module.exports=()=>{const{_ws}=window;window.ws_broadcast=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`broadcast${JSON.stringify(msg)}`)};window.ws_emitpage=(json,regex="")=>{const msg={data:json,regex};_ws.send(`emitpage${JSON.stringify(msg)}`)};window.ws__style=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`_style${JSON.stringify(msg)}`)};window.ws__ping=json=>{const msg={data:json};_ws.send(`_ping${JSON.stringify(msg)}`)};window.ws__help=()=>{_ws.send("_help{}")};window.ws__open=json=>{const msg={data:json};_ws.send(`_open${JSON.stringify(msg)}`)};window.ws__send=(cmd,data,handler)=>{const{__flag}=window.mitm;const id=nanoid();const key=`${cmd}:${id}`;window._ws_queue[key]=handler||(w=>{});setTimeout(function(){if(window._ws_queue[key]){delete window._ws_queue[key];console.log(">>> ws timeout!",key)}},5e3);const params=`${key}${JSON.stringify({data})}`;_ws.send(params)}}}});var require_ws_csp_err=__commonJS({"ws-client/_src/_ws_csp-err.js"(exports,module){var _ws_namespace=require_ws_namespace();var _timeout;var _csp={};module.exports=()=>{const cspError=function(e){const{hostname:host}=location;const namespace=_ws_namespace();const path=location.pathname.replace(/^\//,"").replace(/\//g,"-");const{blockedURI,disposition,documentURI,effectiveDirective,originalPolicy,timeStamp,type,violatedDirective}=e;const typ=`[${disposition}] ${documentURI}`;if(!_csp[typ]){_csp[typ]={}}if(!_csp[typ]._general_){_csp[typ]._general_={policy:originalPolicy,namespace,host,path}}const _doc=_csp[typ];if(!_doc[violatedDirective]){_doc[violatedDirective]={}}const _err=_doc[violatedDirective];if(!_err[blockedURI]){_err[blockedURI]={}}const _match=originalPolicy.match(`${violatedDirective} [^;]+;`);const directive=_match?_match[0]:effectiveDirective;_err[blockedURI]={directive,timeStamp,type};_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{console.log(">>> CSP:",_csp);_csp={}},4e3)};if(window.mitm.client.csp){document.addEventListener("securitypolicyviolation",cspError)}}}});var _ws_postmessage=require_ws_postmessage();var _ws_initSocket=require_ws_init_socket();var _ws_screenshot=require_ws_screenshot();var _ws_location=require_ws_location();var _ws_observer=require_ws_observer();var _ws_general=require_ws_general();var _ws_cspErr=require_ws_csp_err();var _c="color: red";_ws_postmessage();_ws_initSocket();_ws_screenshot();_ws_location();_ws_observer();_ws_general();_ws_cspErr();console.log("%cWs: ws-client loaded...",_c);})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiX3NyYy9fd3NfcG9zdG1lc3NhZ2UuanMiLCAiX3NyYy9fd3NfY2xpZW50LmpzIiwgIl9zcmMvX3dzX21zZy1wYXJzZXIuanMiLCAiX3NyYy9fd3NfaW4taWZyYW1lLmpzIiwgIl9zcmMvX3dzX3ZlbmRvci5qcyIsICJfc3JjL193c19pbml0LXNvY2tldC5qcyIsICJfc3JjL19zY3JlZW5zaG90LmpzIiwgIl9zcmMvX3dzX25hbWVzcGFjZS5qcyIsICJfc3JjL193c19zY3JlZW5zaG90LmpzIiwgIl9zcmMvX3dzX2xvY2F0aW9uLmpzIiwgIl9zcmMvX3dzX2RlYm91bmNlLmpzIiwgIl9zcmMvX3dzX3JvdXRlLmpzIiwgIl9zcmMvX3dzX29ic2VydmVyLmpzIiwgIl9zcmMvX3dzX2dlbmVyYWwuanMiLCAiX3NyYy9fd3NfY3NwLWVyci5qcyIsICJfc3JjL3dzLWNsaWVudC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyogZ2xvYmFsIGxvY2F0aW9uICovXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlIChldmVudCkge1xyXG4gICAgaWYgKHdpbmRvdy5taXRtLmNsaWVudC5wb3N0bWVzc2FnZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgPj4+IFBvc3RtZXNzYWdlOiAke2V2ZW50Lm9yaWdpbn0gPT4gaHR0cHM6Ly8ke2xvY2F0aW9uLmhvc3R9YCwgZXZlbnQuZGF0YSlcclxuICAgIH1cclxuICB9XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCByZWNlaXZlTWVzc2FnZSwgZmFsc2UpXHJcblxyXG4gIC8vIGlmICghY2hyb21lLndpbmRvd3MpIHtcclxuICAvLyAgIGZ1bmN0aW9uIHJlcG9ydFdpbmRvd1NpemUoKSB7XHJcbiAgLy8gICAgIGNvbnN0IHtpbm5lcldpZHRoLCBpbm5lckhlaWdodH0gPSB3aW5kb3c7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKHtpbm5lcldpZHRoLCBpbm5lckhlaWdodH0pO1xyXG4gIC8vICAgfVxyXG4gIC8vICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVwb3J0V2luZG93U2l6ZSk7XHJcbiAgLy8gfVxyXG59XHJcbiIsICJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBsZXQgd2luZG93UmVmXHJcbiAgcmV0dXJuIHtcclxuICAgIC8vIGV4OiB3c19faGVscCgpXHJcbiAgICBfaGVscCAoeyBkYXRhIH0pIHtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgIH0sXHJcbiAgICAvLyBleDogd3NfX3BpbmcoXCJ0aGVyZVwiKVxyXG4gICAgX3BpbmcgKHsgZGF0YSB9KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcbiAgICB9LFxyXG4gICAgLy8gZXg6IHdzX19vcGVuKHt1cmw6IFwiaHR0cHM6Ly9nb29nbGUuY29tXCJ9KVxyXG4gICAgX29wZW4gKHsgZGF0YSB9KSB7XHJcbiAgICAgIGNvbnN0IGZlYXR1cmVzID0gJ2RpcmVjdG9yaWVzPTAsdGl0bGViYXI9MCx0b29sYmFyPTAsbG9jYXRpb249MCxzdGF0dXM9MCxtZW51YmFyPTAsd2lkdGg9ODAwLGhlaWdodD02MDAnXHJcbiAgICAgIHdpbmRvd1JlZiA9IHdpbmRvdy5vcGVuKGRhdGEudXJsLCAnX2xvZ3MnLCBmZWF0dXJlcylcclxuICAgICAgd2luZG93UmVmLmJsdXIoKVxyXG4gICAgfSxcclxuICAgIC8vIGV4OiB3c19fc3R5bGUoJy5pbnRybz0+YmFja2dyb3VuZDpyZWQ7JylcclxuICAgIF9zdHlsZSAoeyBkYXRhIH0pIHtcclxuICAgICAgY29uc3QgeyBxLCBjc3MgfSA9IGRhdGFcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxKS5mb3JFYWNoKFxyXG4gICAgICAgIG5vZGUgPT4gKG5vZGUuc3R5bGUuY3NzVGV4dCA9IGNzcylcclxuICAgICAgKVxyXG4gICAgfSxcclxuICAgIC8vIGV4OiB3c19fXHJcbiAgICBfc2F2ZVRhZ3MgKHsgcm91dGVzIH0pIHtcclxuICAgICAgaWYgKCFsb2NhdGlvbi5vcmlnaW4ubWF0Y2goJ2Nocm9tZS1leHRlbnNpb24nKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGUgcm91dGVzJylcclxuICAgICAgICB3aW5kb3cubWl0bS5yb3V0ZXMgPSByb3V0ZXNcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIGV4OiB3c19fXHJcbiAgICBfZmlsZXMgKHsgZGF0YSwgdHlwIH0pIHtcclxuICAgICAgY29uc3QgeyBmaWxlcyB9ID0gd2luZG93Lm1pdG1cclxuICAgICAgY29uc29sZS53YXJuKGByZWNlaXZlIGJyb2RjYXN0ICR7dHlwfWApXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBldmVudCBoYW5kbGVyIGFmdGVyIHJlY2VpdmluZyB3cyBwYWNrZXRcclxuICAgICAgICogaWU6IHdpbmRvdy5taXRtLmZpbGVzLnJvdXRlX2V2ZW50cyA9IHtldmVudE9iamVjdC4uLn1cclxuICAgICAgICovXHJcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGZpbGVzW2Ake3R5cH1fZXZlbnRzYF0pIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oZmlsZXNbYCR7dHlwfV9ldmVudHNgXVtrZXldICsgJycpXHJcbiAgICAgICAgZmlsZXNbYCR7dHlwfV9ldmVudHNgXVtrZXldKGRhdGEpXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfc2V0Q2xpZW50ICh7IGRhdGEgfSkge1xyXG4gICAgICBjb25zb2xlLmxvZygnX3NldENsaWVudCcsIGRhdGEpXHJcbiAgICAgIHdpbmRvdy5taXRtLmNsaWVudCA9IGRhdGFcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwgIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfd3NfY2xpZW50ID0gcmVxdWlyZSgnLi9fd3NfY2xpZW50JylcclxuY29uc3QgX3dzX3djY21kID0gX3dzX2NsaWVudCgpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChldmVudCwgbXNnKSA9PiB7XHJcbiAgaWYgKHdpbmRvdy5taXRtLmFyZ3YuZGVidWcpIHtcclxuICAgIGlmIChtc2cubGVuZ3RoID4gNDApIHtcclxuICAgICAgY29uc29sZS5sb2coJz4+PiB3cy1tZXNzYWdlOiBgJXMuLi5gJywgbXNnLnNsaWNlKDAsIDQwKSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCc+Pj4gd3MtbWVzc2FnZTogYCVzYCcsIG1zZylcclxuICAgIH1cclxuICB9XHJcbiAgY29uc3QgYXJyID0gbXNnLnJlcGxhY2UoL1xccyskLywgJycpLm1hdGNoKC9eICooW1xcdzpdKykgKihcXHsuKikvKVxyXG4gIGlmIChhcnIpIHtcclxuICAgIGxldCBbLCBjbWQsIGpzb25dID0gYXJyXHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAodHlwZW9mIChqc29uKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGpzb24sIGVycm9yKVxyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5fd3NfcXVldWVbY21kXSkge1xyXG4gICAgICBjb25zdCBoYW5kbGVyID0gd2luZG93Ll93c19xdWV1ZVtjbWRdXHJcbiAgICAgIGRlbGV0ZSB3aW5kb3cuX3dzX3F1ZXVlW2NtZF1cclxuICAgICAgaGFuZGxlcihqc29uLmRhdGEpXHJcbiAgICB9IGVsc2UgaWYgKF93c193Y2NtZFtjbWRdKSB7XHJcbiAgICAgIF93c193Y2NtZFtjbWRdLmNhbGwoZXZlbnQsIGpzb24pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsICJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBsZXQgaWZybVxyXG4gIHRyeSB7XHJcbiAgICBpZnJtID0gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3BcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBpZnJtID0gdHJ1ZVxyXG4gIH1cclxuICByZXR1cm4gaWZybSA/ICdpZnJhbWUnIDogJ3dpbmRvdydcclxufVxyXG4iLCAibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgeyB2ZW5kb3IgfSA9IG5hdmlnYXRvclxyXG4gIGNvbnN0IGJyb3dzZXIgPSB7XHJcbiAgICAnJzogJ2ZpcmVmb3gnLFxyXG4gICAgJ0dvb2dsZSBJbmMuJzogJ2Nocm9taXVtJyxcclxuICAgICdBcHBsZSBDb21wdXRlciwgSW5jLic6ICd3ZWJraXQnXHJcbiAgfVt2ZW5kb3JdXHJcbiAgcmV0dXJuIGJyb3dzZXJcclxufVxyXG4iLCAiLyogZ2xvYmFsIFdlYlNvY2tldCAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cclxuY29uc3QgX3dzX21zZ1BhcnNlciA9IHJlcXVpcmUoJy4vX3dzX21zZy1wYXJzZXInKVxyXG5jb25zdCBfd3NfaW5JZnJhbWUgPSByZXF1aXJlKCcuL193c19pbi1pZnJhbWUnKVxyXG5jb25zdCBfd3NfdmVuZG9yID0gcmVxdWlyZSgnLi9fd3NfdmVuZG9yJylcclxuY29uc3QgX2MgPSAnY29sb3I6ICNiYWRhNTUnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICB3aW5kb3cuX3dzX3F1ZXVlID0ge31cclxuICB3aW5kb3cuX3dzX2Nvbm5lY3RlZCA9IGZhbHNlXHJcbiAgY29uc3Qge19fYXJncywgX19mbGFnfSA9IHdpbmRvdy5taXRtXHJcblxyXG4gIGlmICh3aW5kb3cuX3dzX2Nvbm5lY3Q9PT11bmRlZmluZWQpIHtcclxuICAgIHdpbmRvdy5fd3NfY29ubmVjdCA9IHt9XHJcbiAgfVxyXG5cclxuICBjb25zdCBvbm9wZW4gPSBkYXRhID0+IHtcclxuICAgIGZ1bmN0aW9uIHdzX3NlbmQoKSB7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHdpbmRvdy5fd3NfY29ubmVjdCkge1xyXG4gICAgICAgIGNvbnN0IGZuID0gd2luZG93Ll93c19jb25uZWN0W2tleV1cclxuICAgICAgICB3aW5kb3cuX3dzX2Nvbm5lY3RlZF9zZW5kID0gdHJ1ZVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGAlY1dzOiAke2ZuKycnfWAsIF9jKVxyXG4gICAgICAgIGZuKGRhdGEpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoX19mbGFnWyd3cy1jb25uZWN0J10pIHtcclxuICAgICAgY29uc29sZS5sb2coJyVjV3M6IG9wZW4gY29ubmVjdGlvbicsIF9jKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUudGltZUVuZCgnd3MnKVxyXG4gICAgd2luZG93Ll93c19jb25uZWN0ZWQgPSB0cnVlXHJcblxyXG4gICAgc2V0VGltZW91dCh3c19zZW5kLCAxKSAvLyBtaW5pbWl6ZSBpbnRlcm1pdHRlblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmICghd2luZG93Ll93c19jb25uZWN0ZWRfc2VuZCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1JFVFJZLi4uLi4uLi4uLicpXHJcbiAgICAgICAgd3Nfc2VuZCgpXHJcbiAgICAgIH1cclxuICAgIH0sIDEwKSAvLyBtaW5pbWl6ZSBpbnRlcm1pdHRlbiAgICAgXHJcbiAgfVxyXG5cclxuICBjb25zdCBvbmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKF9fZmxhZ1snd3MtY29ubmVjdCddKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd3czogY2xvc2UgY29ubmVjdGlvbicpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBvbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKF9fZmxhZ1snb24tbWVzc2FnZSddKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdvbi1tZXNzYWdlOicsIGUuZGF0YSlcclxuICAgIH1cclxuICAgIF93c19tc2dQYXJzZXIoZSwgZS5kYXRhKVxyXG4gIH1cclxuICBcclxuICBjb25zdCBjb25uZWN0ID0gX19hcmdzLm5vc29ja2V0PT09dW5kZWZpbmVkXHJcbiAgaWYgKGNvbm5lY3QgfHwgKHdpbmRvdy5jaHJvbWUgJiYgY2hyb21lLnRhYnMpKSB7XHJcbiAgICBjb25zdCB2ZW5kb3IgPSBbJ2ZpcmVmb3gnLCAnd2Via2l0J10uaW5jbHVkZXMoX3dzX3ZlbmRvcigpKVxyXG4gICAgY29uc3QgcHJlID0gdmVuZG9yID8gJ3dzJyA6ICd3c3MnXHJcbiAgICBjb25zdCBwcnQgPSB2ZW5kb3IgPyAnMzAwMicgOiAnMzAwMSdcclxuICAgIGNvbnN0IHVybCA9IGAke3ByZX06Ly9sb2NhbGhvc3Q6JHtwcnR9L3dzP3BhZ2U9JHtfd3NfaW5JZnJhbWUoKX0mdXJsPSR7ZG9jdW1lbnQuVVJMLnNwbGl0KCc/JylbMF19YFxyXG4gICAgbGV0IHdzXHJcbiAgICB0cnkge1xyXG4gICAgICB3cyA9IG5ldyBXZWJTb2NrZXQodXJsKSAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLnRpbWUoJ3dzJylcclxuICAgIHdpbmRvdy5fd3MgPSB3c1xyXG4gIFxyXG4gICAgd3Mub25vcGVuID0gb25vcGVuXHJcbiAgICB3cy5vbmNsb3NlID0gb25jbG9zZVxyXG4gICAgd3Mub25tZXNzYWdlID0gb25tZXNzYWdlICBcclxuICB9XHJcbiAgaWYgKF9fZmxhZ1snd3MtY29ubmVjdCddKSB7XHJcbiAgICBjb25zb2xlLmxvZyhgJWNXczogJHtjb25uZWN0ID8gJ2luaXQnIDogJ29mZid9IGNvbm5lY3Rpb25gLCBfYylcclxuICB9XHJcbn1cclxuIiwgImFzeW5jIGZ1bmN0aW9uIHNjcmVuc2hvdChqc29uKSB7XHJcbiAgY29uc3Qge19fYXJnc30gPSB3aW5kb3cubWl0bVxyXG4gIGlmIChbdHJ1ZSwgJ29mZiddLmluY2x1ZGVzKF9fYXJncy5ub3NvY2tldCkpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoanNvbilcclxuICAgICAgICB9XHJcbiAgICAgICAgZmV0Y2goJy9taXRtLXBsYXkvc2NyZW5zaG90Lmpzb24nLCBjb25maWcpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgcmVzb2x2ZShyZXNwb25zZS5qc29uKCkpfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhICAgICkgeyByZXNvbHZlKGRhdGEpICAgICAgICAgICB9KVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcilcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgeyAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgd2luZG93LndzX19zZW5kKCdzY3JlZW5zaG90JywganNvbiwgcmVzb2x2ZSlcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgIH1cclxuICAgIH0pICBcclxuICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBzY3JlbnNob3QiLCAiLyogZ2xvYmFsIGxvY2F0aW9uICovXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgaG9zdG5hbWU6IGhvc3QgfSA9IGxvY2F0aW9uXHJcbiAgbGV0IG5hbWVzcGFjZVxyXG5cclxuICBmdW5jdGlvbiB0b1JlZ2V4IChzdHIpIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFwuL2csICdcXFxcLicpLnJlcGxhY2UoL1xcPy9nLCAnXFxcXD8nKVxyXG4gIH1cclxuXHJcbiAgZm9yIChjb25zdCBrZXkgaW4gd2luZG93Lm1pdG0ucm91dGVzKSB7XHJcbiAgICBpZiAoaG9zdC5tYXRjaCh0b1JlZ2V4KGtleS5yZXBsYWNlKC9+L2csICdbXi5dKicpKSkpIHtcclxuICAgICAgbmFtZXNwYWNlID0ga2V5XHJcbiAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuYW1lc3BhY2VcclxufVxyXG4iLCAiLyogZ2xvYmFsIGxvY2F0aW9uLCBtaXRtICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfc2NyZWVuc2hvdCA9IHJlcXVpcmUoJy4vX3NjcmVlbnNob3QnKVxyXG5jb25zdCBfd3NfbmFtZXNwYWNlID0gcmVxdWlyZSgnLi9fd3NfbmFtZXNwYWNlJylcclxuY29uc3QgX3dzX3ZlbmRvciA9IHJlcXVpcmUoJy4vX3dzX3ZlbmRvcicpXHJcblxyXG5sZXQgYWN0XHJcbmZ1bmN0aW9uIHNjcmVlbnNob3QgKGUpIHtcclxuICBpZiAobWl0bS5hcmd2LmxhenljbGljaykge1xyXG4gICAgaWYgKG1pdG0uc2NyZWVuc2hvdCkge1xyXG4gICAgICB3aW5kb3cubWl0bS5zY3JlZW5zaG90ID0gdW5kZWZpbmVkXHJcbiAgICAgIGNvbnNvbGUubG9nKCc+Pj4gZGVsYXkgYWN0aW9uJylcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZiAoYWN0KSB7XHJcbiAgICAgIGFjdCA9IHVuZGVmaW5lZFxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICB9XHJcbiAgY29uc3QgbmFtZXNwYWNlID0gX3dzX25hbWVzcGFjZSgpXHJcbiAgY29uc3QgYnJvd3NlciA9IF93c192ZW5kb3IoKVxyXG4gIGNvbnN0IGhvc3QgPSBsb2NhdGlvbi5vcmlnaW4ucmVwbGFjZSgnOi8vJyAsJ35+JylcclxuICBjb25zdCByb3V0ZSA9IHdpbmRvdy5taXRtLnJvdXRlc1tuYW1lc3BhY2VdXHJcbiAgY29uc3QgeyBzZWxlY3RvciB9ID0gcm91dGUuc2NyZWVuc2hvdFxyXG5cclxuICBjb25zdCBhcnIgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXHJcbiAgY29uc3QgZm5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9eXFwvL2csICd+JylcclxuICBjb25zdCBkZWxheSA9IG1pdG0uYXJndi5sYXp5Y2xpY2sgPT09IHRydWUgPyA3MDAgOiBtaXRtLmFyZ3YubGF6eWNsaWNrXHJcbiAgZm9yIChjb25zdCBlbCBvZiBhcnIpIHtcclxuICAgIGxldCBub2RlID0gZS50YXJnZXRcclxuICAgIHdoaWxlIChlbCAhPT0gbm9kZSAmJiBub2RlICE9PSBudWxsICYmIG5vZGUgIT09IGRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZVxyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUgIT09IGRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgY29uc3QgX3BhZ2UgPSB3aW5kb3dbJ3hwbGF5LXBhZ2UnXVxyXG4gICAgICBjb25zdCBwYXJhbXMgPSB7IG5hbWVzcGFjZSwgX3BhZ2UsIGhvc3QsIGJyb3dzZXIgfVxyXG4gICAgICBwYXJhbXMuZm5hbWUgPSBmbmFtZT09PSd+JyA/ICd+XycgOiBmbmFtZVxyXG4gICAgICBfc2NyZWVuc2hvdChwYXJhbXMpXHJcbiAgICAgIGlmIChtaXRtLmFyZ3YubGF6eWNsaWNrKSB7XHJcbiAgICAgICAgLy8gZGVsYXkgYWN0aW9uIHRvIGZpbmlzaCBzY3JlZW5zaG90XHJcbiAgICAgICAgd2luZG93Lm1pdG0uc2NyZWVuc2hvdCA9IGUudGFyZ2V0XHJcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBtaXRtLmxhc3RFdmVudCA9IGVcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGFjdCA9IHdpbmRvdy5taXRtLnNjcmVlbnNob3RcclxuICAgICAgICAgIGlmIChhY3QpIHtcclxuICAgICAgICAgICAgYWN0LmNsaWNrKClcclxuICAgICAgICAgICAgYWN0ID0gdW5kZWZpbmVkXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsYXkgYWN0aW9uIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIGRlbGF5KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1pdG0ubGFzdEV2ZW50ID0gZVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXZlbnRjbGljayhlKSB7XHJcbiAgbWl0bS5sYXN0RXZlbnQgPSBlXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlID0gd2luZG93Lm1pdG0ucm91dGVzW193c19uYW1lc3BhY2UoKV1cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JylcclxuICAgIGlmIChyb3V0ZSAmJiByb3V0ZS5zY3JlZW5zaG90KSB7XHJcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzY3JlZW5zaG90KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50Y2xpY2spXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG4iLCAiLyogZ2xvYmFsIGxvY2F0aW9uLCBoaXN0b3J5LCBjaHJvbWUsIEV2ZW50LCBDc3NTZWxlY3RvckdlbmVyYXRvciAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cclxuY29uc3QgX3dzX25hbWVzcGFjZSA9IHJlcXVpcmUoJy4vX3dzX25hbWVzcGFjZScpXHJcbmNvbnN0IF93c192ZW5kb3IgPSByZXF1aXJlKCcuL193c192ZW5kb3InKVxyXG5jb25zdCB3YWl0ID0gbXMgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcclxuICBjb25zdCBjb250YWluZXJTdHlsZTEgPSAncG9zaXRpb246IGZpeGVkO3otaW5kZXg6IDk5OTk5O3JpZ2h0OiAzcHg7J1xyXG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlMiA9ICdwb3NpdGlvbjogZml4ZWQ7ei1pbmRleDogOTk5OTk7bGVmdDogIDNweDsnXHJcbiAgY29uc3QgY29udGFpbmVyU3R5bGUzID0gJ3Bvc2l0aW9uOiBmaXhlZDt6LWluZGV4OiA5OTk5OTtyaWdodDogM3B4OyB0b3A6IDIwcHg7IHRleHQtYWxpZ246IGVuZDsnXHJcbiAgY29uc3QgYnV0dG9uU3R5bGUgPSAnJ1xyXG4gIGNvbnN0IHN0eWxlID0gYFxyXG4gIC5taXRtLWJ0biB7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBmb250LXNpemU6IDhweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICAgIGZvbnQtZmFtaWx5OiBtb25hY28sIENvbnNvbGFzLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZTtcclxuICB9XHJcbiAgLm1pdG0tYnRuOmhvdmVye1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtcclxuICB9XHJcbiAgLmJncm91cC1yaWdodCAubWl0bS1icixcclxuICAuYmdyb3VwLWxlZnQgLm1pdG0tYnJ7XHJcbiAgICBkaXNwbGF5OnRhYmxlO1xyXG4gIH1gXHJcbiAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ3VybGNoYW5nZWQnKVxyXG4gIGxldCBjb250YWluZXIgPSB7XHJcbiAgICByaWdodDM6IHt9LFxyXG4gICAgcmlnaHQ6IHt9LFxyXG4gICAgbGVmdDoge30sXHJcbiAgfVxyXG4gIGxldCBjdHJsID0gZmFsc2VcclxuICBsZXQgYnV0dG9uID0ge31cclxuICBsZXQgYmdyb3VwID0ge1xyXG4gICAgcmlnaHQzOiB7fSxcclxuICAgIHJpZ2h0OiB7fSxcclxuICAgIGxlZnQ6IHt9LFxyXG4gIH1cclxuICBsZXQgaW50ZXJ2SWRcclxuICBsZXQgb2JzZXJ2ZXJmbiA9IFtdXHJcblxyXG4gIGZ1bmN0aW9uIHRvUmVnZXggKHBhdGhNc2cpIHtcclxuICAgIGxldCBbcGF0aCwgbXNnXSA9IHBhdGhNc2cuc3BsaXQoJz0+JykubWFwKGl0ZW0gPT4gaXRlbS50cmltKCkpXHJcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJykucmVwbGFjZSgvXFw/L2csICdcXFxcPycpXHJcbiAgICByZXR1cm4geyBwYXRoLCBtc2cgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQnV0dG9uKGJ1dHRvbnMsIHBvcykge1xyXG4gICAgbGV0IGJyXHJcbiAgICBmb3IgKGNvbnN0IGlkIGluIGJ1dHRvbnMpIHtcclxuICAgICAgY29uc3QgW2NhcHRpb24sIGNvbG9yLCBrbGFzXSA9IGlkLnNwbGl0KCd8JylcclxuICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcclxuICAgICAgY29uc3QgZm4gID0gYnV0dG9uc1tpZF1cclxuICAgICAgYnRuLm9uY2xpY2sgPSBhc3luYyBlID0+IHtcclxuICAgICAgICBsZXQgYXJyID0gZm4oZSlcclxuICAgICAgICBpZiAoYXJyIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG4gICAgICAgICAgYXJyID0gYXdhaXQgYXJyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcclxuICAgICAgICAgIGF3YWl0IHBsYXkoYXJyKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBidG4uaW5uZXJUZXh0ID0gY2FwdGlvblxyXG4gICAgICBidG4uY2xhc3NMaXN0LmFkZCgnbWl0bS1idG4nKVxyXG4gICAgICBidG4uY2xhc3NMaXN0LmFkZChgJHtwb3N9YClcclxuICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoa2xhcyB8fCBjYXB0aW9uKVxyXG4gICAgICBidG4uc3R5bGUgPSBidXR0b25TdHlsZSArIChjb2xvciA/IGBiYWNrZ3JvdW5kOiAke2NvbG9yfTtgIDogJycpXHJcbiAgICAgIGlmIChwb3M9PT0ncmlnaHQnKSB7XHJcbiAgICAgICAgYnIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcclxuICAgICAgICBici5pbm5lckhUTUwgPSAnJm5ic3A7J1xyXG4gICAgICAgIGJncm91cFtwb3NdLmFwcGVuZENoaWxkKGJyKVxyXG4gICAgICAgIGJncm91cFtwb3NdLmFwcGVuZENoaWxkKGJ0bilcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBiciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxyXG4gICAgICAgIGJyLmNsYXNzTmFtZSA9ICdtaXRtLWJyJ1xyXG4gICAgICAgIGJncm91cFtwb3NdLmFwcGVuZENoaWxkKGJ0bilcclxuICAgICAgICBiZ3JvdXBbcG9zXS5hcHBlbmRDaGlsZChicilcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0QnV0dG9ucyAoYnV0dG9ucywgcG9zaXRpb24pIHtcclxuICAgIGlmIChiZ3JvdXBbcG9zaXRpb25dKSB7XHJcbiAgICAgIGJncm91cFtwb3NpdGlvbl0uaW5uZXJIVE1MID0gJydcclxuICAgICAgY3JlYXRlQnV0dG9uKGJ1dHRvbnMsIHBvc2l0aW9uKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGRlYnVua1xyXG4gIGxldCBvbmNlcyA9IHt9IC8vIGZlYXQ6IG9uZXRpbWUgZm4gY2FsbFxyXG4gIGFzeW5jIGZ1bmN0aW9uIHVybENoYW5nZSAoZXZlbnQpIHtcclxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IF93c19uYW1lc3BhY2UoKVxyXG4gICAgaWYgKHdpbmRvdy5taXRtLmF1dG9maWxsKSB7XHJcbiAgICAgIGRlbGV0ZSB3aW5kb3cubWl0bS5hdXRvZmlsbFxyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5taXRtLmF1dG9pbnRlcnZhbCkge1xyXG4gICAgICBjbGVhckludGVydmFsKGludGVydklkKVxyXG4gICAgICBkZWxldGUgd2luZG93Lm1pdG0uYXV0b2ludGVydmFsXHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Lm1pdG0uYXV0b2J1dHRvbnMpIHtcclxuICAgICAgZGVsZXRlIHdpbmRvdy5taXRtLmF1dG9idXR0b25zXHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93Lm1pdG0ucmlnaHRidXR0b25zKSB7XHJcbiAgICAgIGRlbGV0ZSB3aW5kb3cubWl0bS5yaWdodGJ1dHRvbnNcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cubWl0bS5sZWZ0YnV0dG9ucykge1xyXG4gICAgICBkZWxldGUgd2luZG93Lm1pdG0ubGVmdGJ1dHRvbnNcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cubWl0bS5tYWNyb2tleXMpIHtcclxuICAgICAgZGVsZXRlIHdpbmRvdy5taXRtLm1hY3Jva2V5c1xyXG4gICAgfVxyXG4gICAgaWYgKG5hbWVzcGFjZSkge1xyXG4gICAgICBjb25zdCB7aHJlZiwgb3JpZ2lufSA9IGxvY2F0aW9uXHJcbiAgICAgIGNvbnN0IF9ocmVmID0gaHJlZi5yZXBsYWNlKG9yaWdpbiwgJycpXHJcbiAgICAgIGNvbnN0IHtfbWFjcm9zXywgbWFjcm9zfSA9IHdpbmRvdy5taXRtXHJcbiAgICAgIG9ic2VydmVyZm4gPSBbXVxyXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBtYWNyb3MpIHtcclxuICAgICAgICBjb25zdCB7IHBhdGgsIG1zZyB9ID0gdG9SZWdleChrZXkpXHJcbiAgICAgICAgaWYgKF9ocmVmLm1hdGNoKHBhdGgpKSB7XHJcbiAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gbXNnIHx8ICdFbnRyeSdcclxuICAgICAgICAgIF9tYWNyb3NfICYmIF9tYWNyb3NfKClcclxuICAgICAgICAgIGxldCBmbiA9IG1hY3Jvc1trZXldKClcclxuICAgICAgICAgIGlmIChmbiBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgZm4gPSBhd2FpdCBmblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvYnNlcnZlcmZuLnB1c2goZm4pXHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgICAgZGVidW5rICYmIGNsZWFyVGltZW91dChkZWJ1bmspXHJcbiAgICAgICAgICBkZWJ1bmsgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgb25jZXMgPSB7fSAvLyBmZWF0OiBvbmV0aW1lIGZuIGNhbGxcclxuICAgICAgICAgICAgZGVidW5rID0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIGNvbnN0IHthdXRvYnV0dG9ucywgcmlnaHRidXR0b25zLCBsZWZ0YnV0dG9uc30gPSB3aW5kb3cubWl0bVxyXG4gICAgICAgICAgICByaWdodGJ1dHRvbnMgJiYgc2V0QnV0dG9ucyhyaWdodGJ1dHRvbnMsICdyaWdodDMnKVxyXG4gICAgICAgICAgICBsZWZ0YnV0dG9ucyAmJiBzZXRCdXR0b25zKGxlZnRidXR0b25zLCAnbGVmdCcpXHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cubWl0bS5hdXRvZmlsbCkge1xyXG4gICAgICAgICAgICAgIGF1dG9idXR0b25zICYmIHNldEJ1dHRvbnMoe1xyXG4gICAgICAgICAgICAgICAgLi4uYXV0b2J1dHRvbnMsXHJcbiAgICAgICAgICAgICAgICAnRW50cnknKCkge1xyXG4gICAgICAgICAgICAgICAgICBsZXQge2F1dG9maWxsfSA9IHdpbmRvdy5taXRtXHJcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXV0b2ZpbGwgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvZmlsbCA9IGF1dG9maWxsKClcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBwbGF5KGF1dG9maWxsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sICdyaWdodCcpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYXV0b2J1dHRvbnMgJiYgc2V0QnV0dG9ucyhhdXRvYnV0dG9ucywgJ3JpZ2h0JylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgMClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRhaW5lci5yaWdodDMuc3R5bGUgPSBjb250YWluZXJTdHlsZTNcclxuICAgIGNvbnRhaW5lci5yaWdodC5zdHlsZSA9IGNvbnRhaW5lclN0eWxlMVxyXG4gICAgY29udGFpbmVyLmxlZnQuc3R5bGUgID0gY29udGFpbmVyU3R5bGUyXHJcbiAgICBjb25zdCB2aXNpYmxlID0gKHdpbmRvdy5taXRtLmF1dG9maWxsKVxyXG4gICAgYnV0dG9uLnN0eWxlID0gYnV0dG9uU3R5bGUgKyAodmlzaWJsZSA/ICdiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTsnIDogJ2Rpc3BsYXk6IG5vbmU7JylcclxuICAgIGlmICh0eXBlb2YgKHdpbmRvdy5taXRtLmF1dG9pbnRlcnZhbCkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgaW50ZXJ2SWQgPSBzZXRJbnRlcnZhbCh3aW5kb3cubWl0bS5hdXRvaW50ZXJ2YWwsIDUwMClcclxuICAgIH1cclxuICAgIGN0cmwgPSBmYWxzZVxyXG4gIH1cclxuXHJcbiAgY29uc3QgdmVuZG9yID0gX3dzX3ZlbmRvcigpXHJcbiAgaWYgKFsnZmlyZWZveCcsICd3ZWJraXQnXS5pbmNsdWRlcyh2ZW5kb3IpIHx8IChjaHJvbWUgJiYgIWNocm9tZS50YWJzKSkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXliQ3RybClcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1cmxjaGFuZ2VkJywgdXJsQ2hhbmdlKVxyXG4gICAgaWYoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XHJcbiAgICAgIGluaXQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdClcclxuICAgIH0gICAgXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgY29uc3QgZm4gPSBoaXN0b3J5LnB1c2hTdGF0ZVxyXG4gIGhpc3RvcnkucHVzaFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm4uYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKVxyXG4gICAgY29tcGFyZUhyZWYoKVxyXG4gIH1cclxuXHJcbiAgX3BsYXkgPSBqc29uID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB3aW5kb3cud3NfX3NlbmQoJ2F1dG9maWxsJywganNvbiwgcmVzb2x2ZSlcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBfcG9zdCA9IGpzb24gPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShqc29uKVxyXG4gICAgICAgIH1cclxuICAgICAgICBmZXRjaCgnL21pdG0tcGxheS9wbGF5Lmpzb24nLCBjb25maWcpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgcmVzb2x2ZShyZXNwb25zZS5qc29uKCkpfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhICAgICkgeyByZXNvbHZlKGRhdGEpICAgICAgICAgICB9KVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcilcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIHBsYXkgKGF1dG9maWxsKSB7XHJcbiAgICBjb25zdCB7X19hcmdzfSA9IHdpbmRvdy5taXRtXHJcbiAgICBpZiAoYXV0b2ZpbGwpIHtcclxuICAgICAgaWYgKHR5cGVvZiAoYXV0b2ZpbGwpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgYXV0b2ZpbGwgPSBhdXRvZmlsbCgpXHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgYnJvd3NlciA9IF93c192ZW5kb3IoKVxyXG4gICAgICBjb25zdCBsZW50aCA9IGF1dG9maWxsLmxlbmd0aFxyXG4gICAgICBjb25zdCBfcGFnZSA9IHdpbmRvd1sneHBsYXktcGFnZSddXHJcbiAgICAgIGNvbnN0IF9mcmFtZSA9IHdpbmRvd1sneHBsYXktZnJhbWUnXVxyXG4gICAgICBjb25zdCBfanNvbiA9IHthdXRvZmlsbCwgYnJvd3NlciwgX3BhZ2UsIF9mcmFtZX1cclxuICAgICAgY29uc29sZS5sb2cobGVudGggPT09IDEgPyBgICAke2F1dG9maWxsfWAgOiBKU09OLnN0cmluZ2lmeShhdXRvZmlsbCwgbnVsbCwgMikpXHJcbiAgICAgIGxldCByZXN1bHRcclxuICAgICAgaWYgKFt0cnVlLCAnb2ZmJ10uaW5jbHVkZXMoX19hcmdzLm5vc29ja2V0KSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IF9wb3N0KF9qc29uKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IF9wbGF5KF9qc29uKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH1cclxuICB9XHJcbiAgd2luZG93Lm1pdG0uZm4ucGxheSA9IHBsYXlcclxuICB3aW5kb3cubWl0bS5mbi53YWl0ID0gd2FpdFxyXG4gIFxyXG4gIGZ1bmN0aW9uIGtleWJDdHJsIChlKSB7XHJcbiAgICBjb25zdCB7IG1hY3Jva2V5cyB9ID0gd2luZG93Lm1pdG1cclxuICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXkgPT09ICdTaGlmdCcpIHtcclxuICAgICAgY3RybCA9ICFjdHJsXHJcbiAgICAgIGNvbnRhaW5lci5yaWdodDMuc3R5bGUgPSBjb250YWluZXJTdHlsZTMgKyAoIWN0cmwgPyAnJyA6ICdkaXNwbGF5OiBub25lOycpXHJcbiAgICAgIGNvbnRhaW5lci5yaWdodC5zdHlsZSAgPSBjb250YWluZXJTdHlsZTEgKyAoIWN0cmwgPyAnJyA6ICdkaXNwbGF5OiBub25lOycpXHJcbiAgICAgIGNvbnRhaW5lci5sZWZ0LnN0eWxlICAgPSBjb250YWluZXJTdHlsZTIgKyAoIWN0cmwgPyAnJyA6ICdkaXNwbGF5OiBub25lOycpXHJcbiAgICB9IGVsc2UgaWYgKGUuY3RybEtleSAmJiBlLmFsdEtleSkge1xyXG4gICAgICBjb25zb2xlLmxvZyh7IG1hY3JvOiBgY3RybCArIGFsdCArICR7ZS5jb2RlfWAgfSlcclxuICAgICAgaWYgKG1hY3Jva2V5cykge1xyXG4gICAgICAgIGxldCBtYWNybyA9IG1hY3Jva2V5c1tlLmNvZGVdXHJcbiAgICAgICAgaWYgKG1hY3JvKSB7XHJcbiAgICAgICAgICBtYWNybyA9IG1hY3JvKClcclxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hY3JvKSkge1xyXG4gICAgICAgICAgICBsZXQgbWFjcm9JbmRleCA9IDBcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHNlbGVjdG9yID0gbWFjcm9bbWFjcm9JbmRleF1cclxuICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IubWF0Y2goL14gKls9LV0+LykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBDc3NTZWxlY3RvckdlbmVyYXRvci5nZXRDc3NTZWxlY3Rvcihkb2N1bWVudC5hY3RpdmVFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBgJHthY3RpdmVFbGVtZW50fSAke3NlbGVjdG9yfWBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcGxheShbc2VsZWN0b3JdKVxyXG5cclxuICAgICAgICAgICAgICBtYWNyb0luZGV4ICs9IDFcclxuICAgICAgICAgICAgICBpZiAobWFjcm9JbmRleCA+PSBtYWNyby5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAxMDApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCB7bG9jYXRpb259ID0gZG9jdW1lbnRcclxuICBsZXQgb2xkSHJlZiA9IGxvY2F0aW9uLmhyZWZcclxuICBsZXQgb0RlYnVuayA9IHVuZGVmaW5lZFxyXG4gIGZ1bmN0aW9uIGNvbXBhcmVIcmVmKG5vZGVzKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnRE9NIG11dGF0ZWQhJylcclxuICAgIGlmIChvbGRIcmVmICE9IGxvY2F0aW9uLmhyZWYpIHtcclxuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpXHJcbiAgICAgIG9sZEhyZWYgPSBsb2NhdGlvbi5ocmVmXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAob2JzZXJ2ZXJmbi5sZW5ndGgpIHtcclxuICAgICAgICBvRGVidW5rICYmIGNsZWFyVGltZW91dChvRGVidW5rKVxyXG4gICAgICAgIG9EZWJ1bmsgPSBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgb0RlYnVuayA9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgZm9yIChjb25zdCBmbiBvZiBvYnNlcnZlcmZuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBmbi5uYW1lXHJcbiAgICAgICAgICAgIGlmIChuYW1lICYmIG5hbWUubWF0Y2goL09uY2UkLykpIHtcclxuICAgICAgICAgICAgICBpZiAob25jZXNbbmFtZV0pIHsgLy8gZmVhdDogb25ldGltZSBmbiBjYWxsXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvbmNlc1tuYW1lXSA9IHRydWVcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm4obm9kZXMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCB7YXV0b2J1dHRvbnMsIHJpZ2h0YnV0dG9ucywgbGVmdGJ1dHRvbnN9ID0gd2luZG93Lm1pdG1cclxuICAgICAgICAgIHJpZ2h0YnV0dG9ucyAmJiBzZXRCdXR0b25zKHJpZ2h0YnV0dG9ucywgJ3JpZ2h0MycpXHJcbiAgICAgICAgICBsZWZ0YnV0dG9ucyAmJiBzZXRCdXR0b25zKGxlZnRidXR0b25zLCAnbGVmdCcpXHJcbiAgICAgICAgICBjb25zdCB7IGF1dG9maWxsIH0gPSB3aW5kb3cubWl0bVxyXG4gICAgICAgICAgaWYgKGF1dG9maWxsKSB7XHJcbiAgICAgICAgICAgIGF1dG9idXR0b25zICYmIHNldEJ1dHRvbnMoe1xyXG4gICAgICAgICAgICAgIC4uLmF1dG9idXR0b25zLFxyXG4gICAgICAgICAgICAgICdFbnRyeScoKSB7cGxheShhdXRvZmlsbCl9XHJcbiAgICAgICAgICAgIH0sICdyaWdodCcpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhdXRvYnV0dG9ucyAmJiBzZXRCdXR0b25zKGF1dG9idXR0b25zLCAncmlnaHQnKVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LCAxMDApXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICBjb25zdCBodG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpXHJcbiAgICBjb25zdCBodG1scmVmID0gaHRtbC5maXJzdEVsZW1lbnRDaGlsZFxyXG4gICAgY29uc3Qgc3R5bGVCdXR0b25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxyXG4gICAgY29uc3QgZGl2VG9wUmlnaHQzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgIGNvbnN0IGRpdlRvcFJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgIGNvbnN0IGRpdlRvcExlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG5cclxuICAgIHN0eWxlQnV0dG9ucy5pbm5lckhUTUwgPSBzdHlsZVxyXG4gICAgZGl2VG9wUmlnaHQzLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cImJncm91cC1yaWdodFwiPjwvc3Bhbj5gXHJcbiAgICBkaXZUb3BSaWdodC5pbm5lckhUTUwgID0gYDxzcGFuIGNsYXNzPVwiYmdyb3VwLXJpZ2h0XCI+PC9zcGFuPmBcclxuICAgIGRpdlRvcExlZnQuaW5uZXJIVE1MICAgPSBgPHNwYW4gY2xhc3M9XCJiZ3JvdXAtbGVmdFwiPjwvc3Bhbj5gXHJcbiAgICBkaXZUb3BSaWdodC5jbGFzc05hbWUgID0gJ21pdG0gYXV0b2ZpbGwtY29udGFpbmVyJ1xyXG4gICAgZGl2VG9wTGVmdC5jbGFzc05hbWUgICA9ICdtaXRtIGF1dG9maWxsLWNvbnRhaW5lcidcclxuICAgIGRpdlRvcFJpZ2h0My5zdHlsZSA9IGNvbnRhaW5lclN0eWxlM1xyXG4gICAgZGl2VG9wUmlnaHQuc3R5bGUgID0gY29udGFpbmVyU3R5bGUxXHJcbiAgICBkaXZUb3BMZWZ0LnN0eWxlICAgPSBjb250YWluZXJTdHlsZTJcclxuXHJcbiAgICBodG1sLmluc2VydEJlZm9yZShzdHlsZUJ1dHRvbnMsIGh0bWxyZWYpXHJcbiAgICBodG1sLmluc2VydEJlZm9yZShkaXZUb3BSaWdodDMsIGh0bWxyZWYpXHJcbiAgICBodG1sLmluc2VydEJlZm9yZShkaXZUb3BSaWdodCwgaHRtbHJlZilcclxuICAgIGh0bWwuaW5zZXJ0QmVmb3JlKGRpdlRvcExlZnQsIGh0bWxyZWYpXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29udGFpbmVyLnJpZ2h0MyA9IGRpdlRvcFJpZ2h0M1xyXG4gICAgICBjb250YWluZXIucmlnaHQgID0gZGl2VG9wUmlnaHRcclxuICAgICAgY29udGFpbmVyLmxlZnQgICA9IGRpdlRvcExlZnRcclxuICAgICAgYnV0dG9uLnN0eWxlICA9IGAke2J1dHRvblN0eWxlfWJhY2tncm91bmQtY29sb3I6IGF6dXJlO2BcclxuICAgICAgYmdyb3VwLnJpZ2h0MyA9IGRpdlRvcFJpZ2h0My5jaGlsZHJlblswXVxyXG4gICAgICBiZ3JvdXAucmlnaHQgPSBkaXZUb3BSaWdodC5jaGlsZHJlblswXVxyXG4gICAgICBiZ3JvdXAubGVmdCAgPSBkaXZUb3BMZWZ0LmNoaWxkcmVuWzBdXHJcbiAgICAgIHVybENoYW5nZShldmVudClcclxuICAgICAgb2JzZXJ2ZWQoKVxyXG4gICAgfSwgMClcclxuICB9XHJcblxyXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY29tcGFyZUhyZWYpO1xyXG4gIHdpbmRvdy5vYnNlcnZlciA9IG9ic2VydmVyXHJcbiAgZnVuY3Rpb24gb2JzZXJ2ZWQoKSB7XHJcbiAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcclxuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZX0pXHJcbiAgfVxyXG5cclxufVxyXG4iLCAiZnVuY3Rpb24gZGVib3VuY2UgKGZuLCBkZWxheSA9IDUwMCkge1xyXG4gIGxldCBfdGltZW91dFxyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXNcclxuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNcclxuICAgIF90aW1lb3V0ICYmIGNsZWFyVGltZW91dChfdGltZW91dClcclxuICAgIF90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGZuLmFwcGx5KF90aGlzLCBhcmdzKVxyXG4gICAgfSwgZGVsYXkpXHJcbiAgfVxyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2VcclxuIiwgIi8qIGdsb2JhbCBsb2NhdGlvbiAqL1xyXG5jb25zdCBfd3NfbmFtZXNwYWNlID0gcmVxdWlyZSgnLi9fd3NfbmFtZXNwYWNlJylcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IG5hbWVzcGFjZSA9IF93c19uYW1lc3BhY2UoKVxyXG4gIGxldCByb3V0ZSA9IHdpbmRvdy5taXRtLnJvdXRlc1tuYW1lc3BhY2VdXHJcbiAgY29uc3Qge19zdWJuczogc30gPSByb3V0ZS5fY2hpbGRuc1xyXG4gIGlmIChzICYmIG1pdG0ucm91dGVzW3NdKSB7XHJcbiAgICByb3V0ZT0gbWl0bS5yb3V0ZXNbc11cclxuICB9XHJcbiAgcmV0dXJuIHJvdXRlXHJcbn1cclxuIiwgIi8qIGdsb2JhbCBsb2NhdGlvbiwgTXV0YXRpb25PYnNlcnZlciAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cclxuY29uc3QgX3NjcmVlbnNob3QgPSByZXF1aXJlKCcuL19zY3JlZW5zaG90JylcclxuY29uc3QgX3dzX25hbWVzcGFjZSA9IHJlcXVpcmUoJy4vX3dzX25hbWVzcGFjZScpXHJcbmNvbnN0IF93c19kZWJvdW5jZSA9IHJlcXVpcmUoJy4vX3dzX2RlYm91bmNlJylcclxuY29uc3QgX3dzX3ZlbmRvciA9IHJlcXVpcmUoJy4vX3dzX3ZlbmRvcicpXHJcbmNvbnN0IF93c19yb3V0ZSA9IHJlcXVpcmUoJy4vX3dzX3JvdXRlJylcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGlmIChsb2NhdGlvbi5vcmlnaW4ubWF0Y2goJ2Nocm9tZS1leHRlbnNpb24nKSkge1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGNvbnN0IGhvc3QgPSBsb2NhdGlvbi5vcmlnaW4ucmVwbGFjZSgnOi8vJyAsJ35+JylcclxuICBjb25zdCBzc2hvdCA9IHt9XHJcbiAgY29uc3Qgbm9kZXMgPSB7fVxyXG5cclxuICBsZXQgcm91dGUgPSBfd3Nfcm91dGUoKVxyXG4gIGlmIChyb3V0ZSAmJiByb3V0ZS5zY3JlZW5zaG90KSB7XHJcbiAgICBjb25zdCB7IG9ic2VydmVyOiBvYiB9ID0gcm91dGUuc2NyZWVuc2hvdFxyXG4gICAgZm9yIChjb25zdCBpZCBpbiBvYikge1xyXG4gICAgICBsZXQgZWwgPSB7fVxyXG4gICAgICBpZiAob2JbaWRdID09PSB0cnVlKSB7XHJcbiAgICAgICAgZWwgPSB7XHJcbiAgICAgICAgICB0aXRsZTogJ25vdGl0bGUnLFxyXG4gICAgICAgICAgaW5zZXJ0OiB0cnVlLFxyXG4gICAgICAgICAgcmVtb3ZlOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGlmICh0eXBlb2Ygb2JbaWRdICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGVsID0ge1xyXG4gICAgICAgICAgdGl0bGU6ICdub2NhcHR1cmUnLFxyXG4gICAgICAgICAgaW5zZXJ0OiBmYWxzZSxcclxuICAgICAgICAgIHJlbW92ZTogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gb2JbaWRdLnNwbGl0KCc6JylcclxuICAgICAgICBhcnJbMV0uc3BsaXQoJywnKS5tYXAoZSA9PiB7XHJcbiAgICAgICAgICBlbFtlXSA9IHRydWVcclxuICAgICAgICB9KVxyXG4gICAgICAgIGVsLnRpdGxlID0gYXJyWzBdXHJcbiAgICAgIH1cclxuICAgICAgc3Nob3RbaWRdID0gZWxcclxuICAgICAgbm9kZXNbaWRdID0ge1xyXG4gICAgICAgIGluc2VydDogZmFsc2UsXHJcbiAgICAgICAgcmVtb3ZlOiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBvYlxyXG4gIGxldCBmbmFtZVxyXG4gIGNvbnN0IG5hbWVzcGFjZSA9IF93c19uYW1lc3BhY2UoKVxyXG4gIGNvbnN0IGJyb3dzZXIgPSBfd3NfdmVuZG9yKClcclxuICBjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChyb3V0ZSAmJiByb3V0ZS5zY3JlZW5zaG90KSB7XHJcbiAgICAgIG9iID0gcm91dGUuc2NyZWVuc2hvdC5vYnNlcnZlclxyXG4gICAgfVxyXG4gICAgY29uc3QgX3BhZ2UgPSB3aW5kb3dbJ3hwbGF5LXBhZ2UnXVxyXG4gICAgZm9yIChjb25zdCBpZCBpbiBub2Rlcykge1xyXG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChpZClcclxuICAgICAgaWYgKGVsLmxlbmd0aCkge1xyXG4gICAgICAgIGlmICghbm9kZXNbaWRdLmluc2VydCkge1xyXG4gICAgICAgICAgbm9kZXNbaWRdLmluc2VydCA9IHRydWVcclxuICAgICAgICAgIGlmIChub2Rlc1tpZF0ucmVtb3ZlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbm9kZXNbaWRdLnJlbW92ZSA9IGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAob2IgJiYgdHlwZW9mIG9iW2lkXT09PSdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kID0gZWxbMF0gfHwgZWxcclxuICAgICAgICAgICAgaWYgKG5vZC5fd3NfY291bnQ9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBub2QuX3dzX2NvdW50ID0gMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5vZC5fd3NfY291bnQgKz0gMVxyXG4gICAgICAgICAgICBpZiAobm9kLl93c19jb3VudDwyKSB7XHJcbiAgICAgICAgICAgICAgb2JbaWRdKG5vZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBcclxuICAgICAgICAgIGlmIChzc2hvdFtpZF0uaW5zZXJ0KSB7XHJcbiAgICAgICAgICAgIGZuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sICcnKS5yZXBsYWNlKC9cXC8vZywgJy0nKVxyXG4gICAgICAgICAgICBmbmFtZSA9IGB+JHtmbmFtZX0tJHtzc2hvdFtpZF0udGl0bGV9LWluc2VydGBcclxuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geyBuYW1lc3BhY2UsIF9wYWdlLCBob3N0LCBmbmFtZSwgYnJvd3NlciB9XHJcbiAgICAgICAgICAgIF9zY3JlZW5zaG90KHBhcmFtcylcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCFub2Rlc1tpZF0ucmVtb3ZlKSB7XHJcbiAgICAgICAgICBub2Rlc1tpZF0ucmVtb3ZlID0gdHJ1ZVxyXG4gICAgICAgICAgbm9kZXNbaWRdLmluc2VydCA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoc3Nob3RbaWRdLnJlbW92ZSkge1xyXG4gICAgICAgICAgICBmbmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCAnJykucmVwbGFjZSgvXFwvL2csICctJylcclxuICAgICAgICAgICAgZm5hbWUgPSBgfiR7Zm5hbWV9LSR7c3Nob3RbaWRdLnRpdGxlfS1yZW1vdmVgXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHsgbmFtZXNwYWNlLCBfcGFnZSwgaG9zdCwgZm5hbWUsIGJyb3dzZXIgfVxyXG4gICAgICAgICAgICBfc2NyZWVuc2hvdChwYXJhbXMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihfd3NfZGVib3VuY2UoY2FsbGJhY2ssIDEwMCkpXHJcbiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcclxuICAgICAgYXR0cmlidXRlczogdHJ1ZSxcclxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICBzdWJ0cmVlOiB0cnVlXHJcbiAgICB9KVxyXG4gIH0pICBcclxufVxyXG4iLCAiY29uc3QgdDY0ID0gJ1dhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmgnXHJcblxyXG5jb25zdCBuYW5vaWQgPSAoc2l6ZSA9IDgpID0+IHtcclxuICBsZXQgaWQgPSAnJ1xyXG4gIHdoaWxlIChzaXplLS0gPiAwKSB7XHJcbiAgICBpZCArPSB0NjRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF1cclxuICB9XHJcbiAgcmV0dXJuIGlkXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgX3dzIH0gPSB3aW5kb3dcclxuXHJcbiAgLy8gZXg6IHdzX2Jyb2FkY2FzdCgnX3N0eWxle1wiZGF0YVwiOntcInFcIjpcIipcIixcImNzc1wiOlwiY29sb3I6Ymx1ZTtcIn19JylcclxuICAvLyBleDogd3NfYnJvYWRjYXN0KCdfcGluZ3tcImRhdGFcIjpcIkhpIVwifScpXHJcbiAgd2luZG93LndzX2Jyb2FkY2FzdCA9IChqc29uLCBfYWxsID0gdHJ1ZSkgPT4ge1xyXG4gICAgY29uc3QgbXNnID0geyBkYXRhOiBqc29uLCBfYWxsIH1cclxuICAgIF93cy5zZW5kKGBicm9hZGNhc3Qke0pTT04uc3RyaW5naWZ5KG1zZyl9YClcclxuICB9XHJcblxyXG4gIC8vIGV4OiB3c19lbWl0cGFnZSgnX3N0eWxle1wiZGF0YVwiOntcInFcIjpcIipcIixcImNzc1wiOlwiY29sb3I6Ymx1ZTtcIn19JylcclxuICAvLyBleDogd3NfZW1pdHBhZ2UoJ19waW5ne1wiZGF0YVwiOlwiSGkhXCJ9JylcclxuICB3aW5kb3cud3NfZW1pdHBhZ2UgPSAoanNvbiwgcmVnZXggPSAnJykgPT4ge1xyXG4gICAgY29uc3QgbXNnID0geyBkYXRhOiBqc29uLCByZWdleCB9XHJcbiAgICBfd3Muc2VuZChgZW1pdHBhZ2Uke0pTT04uc3RyaW5naWZ5KG1zZyl9YClcclxuICB9XHJcblxyXG4gIC8vIGV4OiB3c19fc3R5bGUoe1wicVwiOlwiKlwiLFwiY3NzXCI6XCJjb2xvcjpibHVlO1wifSlcclxuICB3aW5kb3cud3NfX3N0eWxlID0gKGpzb24sIF9hbGwgPSB0cnVlKSA9PiB7XHJcbiAgICBjb25zdCBtc2cgPSB7IGRhdGE6IGpzb24sIF9hbGwgfVxyXG4gICAgX3dzLnNlbmQoYF9zdHlsZSR7SlNPTi5zdHJpbmdpZnkobXNnKX1gKVxyXG4gIH1cclxuXHJcbiAgLy8gZXg6IHdzX19waW5nKCdIaSEnKVxyXG4gIHdpbmRvdy53c19fcGluZyA9IChqc29uKSA9PiB7XHJcbiAgICBjb25zdCBtc2cgPSB7IGRhdGE6IGpzb24gfVxyXG4gICAgX3dzLnNlbmQoYF9waW5nJHtKU09OLnN0cmluZ2lmeShtc2cpfWApXHJcbiAgfVxyXG5cclxuICAvLyBleDogd3NfX2hlbHAoKVxyXG4gIHdpbmRvdy53c19faGVscCA9ICgpID0+IHtcclxuICAgIF93cy5zZW5kKCdfaGVscHt9JylcclxuICB9XHJcblxyXG4gIC8vIGV4OiB3c19fb3Blbih7dXJsOidodHRwczovL2dvb2dsZS5jb20nfSlcclxuICB3aW5kb3cud3NfX29wZW4gPSAoanNvbikgPT4ge1xyXG4gICAgY29uc3QgbXNnID0geyBkYXRhOiBqc29uIH1cclxuICAgIF93cy5zZW5kKGBfb3BlbiR7SlNPTi5zdHJpbmdpZnkobXNnKX1gKVxyXG4gIH1cclxuXHJcbiAgd2luZG93LndzX19zZW5kID0gKGNtZCwgZGF0YSwgaGFuZGxlcikgPT4ge1xyXG4gICAgY29uc3QgeyBfX2ZsYWcgfSA9IHdpbmRvdy5taXRtXHJcbiAgICBjb25zdCBpZCA9IG5hbm9pZCgpXHJcbiAgICBjb25zdCBrZXkgPSBgJHtjbWR9OiR7aWR9YFxyXG4gICAgd2luZG93Ll93c19xdWV1ZVtrZXldID0gaGFuZGxlciB8fCAodyA9PiB7fSlcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHdpbmRvdy5fd3NfcXVldWVba2V5XSkge1xyXG4gICAgICAgIGRlbGV0ZSB3aW5kb3cuX3dzX3F1ZXVlW2tleV1cclxuICAgICAgICBjb25zb2xlLmxvZygnPj4+IHdzIHRpbWVvdXQhJywga2V5KVxyXG4gICAgICB9XHJcbiAgICB9LCA1MDAwKVxyXG4gICAgY29uc3QgcGFyYW1zID0gYCR7a2V5fSR7SlNPTi5zdHJpbmdpZnkoeyBkYXRhIH0pfWBcclxuICAgIC8vIGlmIChfX2ZsYWdbJ3dzLW1lc3NhZ2UnXSkge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygnX3dzLnNlbmQnLCBjbWQpXHJcbiAgICAvLyB9XHJcbiAgICBfd3Muc2VuZChwYXJhbXMpXHJcbiAgfVxyXG59XHJcbi8vIHdzX19zZW5kKCdfcGluZycsICdMT0wnLCB3PT5jb25zb2xlLmxvZygnPnJlc3VsdCcsdykpO1xyXG4iLCAiLyogZ2xvYmFsIGxvY2F0aW9uICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5jb25zdCBfd3NfbmFtZXNwYWNlID0gcmVxdWlyZSgnLi9fd3NfbmFtZXNwYWNlJylcclxuXHJcbmxldCBfdGltZW91dFxyXG5sZXQgX2NzcCA9IHt9XHJcbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNzcEVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGNvbnN0IHsgaG9zdG5hbWU6IGhvc3QgfSA9IGxvY2F0aW9uXHJcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBfd3NfbmFtZXNwYWNlKClcclxuICAgIGNvbnN0IHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZVxyXG4gICAgICAucmVwbGFjZSgvXlxcLy8sICcnKVxyXG4gICAgICAucmVwbGFjZSgvXFwvL2csICctJylcclxuICAgIGNvbnN0IHtcclxuICAgICAgYmxvY2tlZFVSSSxcclxuICAgICAgZGlzcG9zaXRpb24sXHJcbiAgICAgIGRvY3VtZW50VVJJLFxyXG4gICAgICBlZmZlY3RpdmVEaXJlY3RpdmUsXHJcbiAgICAgIG9yaWdpbmFsUG9saWN5LFxyXG4gICAgICB0aW1lU3RhbXAsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIHZpb2xhdGVkRGlyZWN0aXZlXHJcbiAgICB9ID0gZVxyXG4gICAgY29uc3QgdHlwID0gYFske2Rpc3Bvc2l0aW9ufV0gJHtkb2N1bWVudFVSSX1gXHJcbiAgICBpZiAoIV9jc3BbdHlwXSkge1xyXG4gICAgICBfY3NwW3R5cF0gPSB7fVxyXG4gICAgfVxyXG4gICAgaWYgKCFfY3NwW3R5cF0uX2dlbmVyYWxfKSB7XHJcbiAgICAgIF9jc3BbdHlwXS5fZ2VuZXJhbF8gPSB7XHJcbiAgICAgICAgcG9saWN5OiBvcmlnaW5hbFBvbGljeSxcclxuICAgICAgICBuYW1lc3BhY2UsXHJcbiAgICAgICAgaG9zdCxcclxuICAgICAgICBwYXRoXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IF9kb2MgPSBfY3NwW3R5cF1cclxuICAgIGlmICghX2RvY1t2aW9sYXRlZERpcmVjdGl2ZV0pIHtcclxuICAgICAgX2RvY1t2aW9sYXRlZERpcmVjdGl2ZV0gPSB7fVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IF9lcnIgPSBfZG9jW3Zpb2xhdGVkRGlyZWN0aXZlXVxyXG4gICAgaWYgKCFfZXJyW2Jsb2NrZWRVUkldKSB7XHJcbiAgICAgIF9lcnJbYmxvY2tlZFVSSV0gPSB7fVxyXG4gICAgfVxyXG4gICAgY29uc3QgX21hdGNoID0gb3JpZ2luYWxQb2xpY3kubWF0Y2goYCR7dmlvbGF0ZWREaXJlY3RpdmV9IFteO10rO2ApXHJcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBfbWF0Y2ggPyBfbWF0Y2hbMF0gOiBlZmZlY3RpdmVEaXJlY3RpdmVcclxuICAgIF9lcnJbYmxvY2tlZFVSSV0gPSB7XHJcbiAgICAgIGRpcmVjdGl2ZSxcclxuICAgICAgdGltZVN0YW1wLFxyXG4gICAgICB0eXBlXHJcbiAgICB9XHJcbiAgICBfdGltZW91dCAmJiBjbGVhclRpbWVvdXQoX3RpbWVvdXQpXHJcbiAgICBfdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnPj4+IENTUDonLCBfY3NwKVxyXG4gICAgICAvLyB3aW5kb3cud3NfX3NlbmQoJ2NzcF9lcnJvcicsIHtcclxuICAgICAgLy8gICBuYW1lc3BhY2UsXHJcbiAgICAgIC8vICAgaG9zdCxcclxuICAgICAgLy8gICBwYXRoLFxyXG4gICAgICAvLyAgIF9jc3AsXHJcbiAgICAgIC8vIH0pO1xyXG4gICAgICBfY3NwID0ge31cclxuICAgIH0sIDQwMDApXHJcbiAgfVxyXG5cclxuICBpZiAod2luZG93Lm1pdG0uY2xpZW50LmNzcCkge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VjdXJpdHlwb2xpY3l2aW9sYXRpb24nLCBjc3BFcnJvcilcclxuICB9XHJcbn1cclxuLy8gZGlzcG9zaXRpb246IFwicmVwb3J0XCJcclxuLy8gZG9jdW1lbnRVUkk6IFwiaHR0cHM6Ly93aGF0L2h0bWwvY29udGFpbi9jc3BcIlxyXG4vLyB2aW9sYXRlZERpcmVjdGl2ZTogXCJpbWctc3JjXCJcclxuXHJcbi8vIGJsb2NrZWRVUkk6IFwiaHR0cHM6Ly93aGF0L3VybC9nZXR0aW5nL2Jsb2NrZWRcIlxyXG4vLyBlZmZlY3RpdmVEaXJlY3RpdmU6IFwiaW1nLXNyY1wiXHJcbi8vIG9yaWdpbmFsUG9saWN5OiBcInNjcmlwdC1zcmMgbnVsbDsgZnJhbWUtc3JjIG51bGw7IHN0eWxlLXNyYyBudWxsOyBzdHlsZS1zcmMtZWxlbSBudWxsOyBpbWctc3JjIG51bGw7XCJcclxuLy8gdGltZVN0YW1wOiAxOTMzLjgyMDAwMDAwNTY1MzFcclxuLy8gdHlwZTogXCJzZWN1cml0eXBvbGljeXZpb2xhdGlvblwiXHJcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cclxuY29uc3QgX3dzX3Bvc3RtZXNzYWdlID0gcmVxdWlyZSgnLi9fd3NfcG9zdG1lc3NhZ2UnKVxyXG5jb25zdCBfd3NfaW5pdFNvY2tldCA9IHJlcXVpcmUoJy4vX3dzX2luaXQtc29ja2V0JylcclxuY29uc3QgX3dzX3NjcmVlbnNob3QgPSByZXF1aXJlKCcuL193c19zY3JlZW5zaG90JylcclxuY29uc3QgX3dzX2xvY2F0aW9uID0gcmVxdWlyZSgnLi9fd3NfbG9jYXRpb24nKVxyXG5jb25zdCBfd3Nfb2JzZXJ2ZXIgPSByZXF1aXJlKCcuL193c19vYnNlcnZlcicpXHJcbmNvbnN0IF93c19nZW5lcmFsID0gcmVxdWlyZSgnLi9fd3NfZ2VuZXJhbCcpXHJcbmNvbnN0IF93c19jc3BFcnIgPSByZXF1aXJlKCcuL193c19jc3AtZXJyJylcclxuY29uc3QgX2MgPSAnY29sb3I6IHJlZCdcclxuXHJcbl93c19wb3N0bWVzc2FnZSgpXHJcbl93c19pbml0U29ja2V0KClcclxuX3dzX3NjcmVlbnNob3QoKVxyXG5fd3NfbG9jYXRpb24oKVxyXG5fd3Nfb2JzZXJ2ZXIoKVxyXG5fd3NfZ2VuZXJhbCgpXHJcbl93c19jc3BFcnIoKVxyXG5jb25zb2xlLmxvZygnJWNXczogd3MtY2xpZW50IGxvYWRlZC4uLicsIF9jKSJdLAogICJtYXBwaW5ncyI6ICJxMkJBQUEsMkZBQ0EsT0FBTyxRQUFVLElBQU0sQ0FDckIsd0JBQXlCLE1BQU8sQ0FDOUIsR0FBSSxPQUFPLEtBQUssT0FBTyxZQUFhLENBQ2xDLFFBQVEsSUFBSSxvQkFBb0IsTUFBTSxxQkFBcUIsU0FBUyxPQUFRLE1BQU0sT0FHdEYsT0FBTyxpQkFBaUIsVUFBVyxlQUFnQixXQ1ByRCx3RkFBTyxRQUFVLElBQU0sQ0FDckIsR0FBSSxXQUNKLE1BQU8sQ0FFTCxNQUFPLENBQUUsTUFBUSxDQUNmLFFBQVEsSUFBSSxPQUdkLE1BQU8sQ0FBRSxNQUFRLENBQ2YsUUFBUSxJQUFJLE9BR2QsTUFBTyxDQUFFLE1BQVEsQ0FDZixLQUFNLFVBQVcsd0ZBQ2pCLFVBQVksT0FBTyxLQUFLLEtBQUssSUFBSyxRQUFTLFVBQzNDLFVBQVUsUUFHWixPQUFRLENBQUUsTUFBUSxDQUNoQixLQUFNLENBQUUsRUFBRyxLQUFRLEtBQ25CLFNBQVMsaUJBQWlCLEdBQUcsUUFDM0IsTUFBUyxLQUFLLE1BQU0sUUFBVSxNQUlsQyxVQUFXLENBQUUsUUFBVSxDQUNyQixHQUFJLENBQUMsU0FBUyxPQUFPLE1BQU0sb0JBQXFCLENBQzlDLFFBQVEsSUFBSSxpQkFDWixPQUFPLEtBQUssT0FBUyxTQUl6QixPQUFRLENBQUUsS0FBTSxLQUFPLENBQ3JCLEtBQU0sQ0FBRSxPQUFVLE9BQU8sS0FDekIsUUFBUSxLQUFLLG9CQUFvQixPQUtqQyxTQUFXLE9BQU8sT0FBTSxHQUFHLGNBQWUsQ0FDeEMsUUFBUSxLQUFLLE1BQU0sR0FBRyxjQUFjLEtBQU8sSUFDM0MsTUFBTSxHQUFHLGNBQWMsS0FBSyxRQUdoQyxXQUFZLENBQUUsTUFBUSxD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QixNQUFPLFFBQU8sVUFBVSxLQUN4QixRQUFRLElBQUksa0JBQW1CLE9BRWhDLEtBQ0gsS0FBTSxRQUFTLEdBQUcsTUFBTSxLQUFLLFVBQVUsQ0FBRSxTQUl6QyxJQUFJLEtBQUssYUNsRWIsbUZBRUEsR0FBTSxlQUFnQix1QkFFdEIsR0FBSSxVQUNKLEdBQUksTUFBTyxHQUNYLE9BQU8sUUFBVSxJQUFNLENBQ3JCLEtBQU0sVUFBVyxTQUFVLEVBQUcsQ0FDNUIsS0FBTSxDQUFFLFNBQVUsTUFBUyxTQUMzQixLQUFNLFdBQVksZ0JBQ2xCLEtBQU0sTUFBTyxTQUFTLFNBQ25CLFFBQVEsTUFBTyxJQUNmLFFBQVEsTUFBTyxLQUNsQixLQUFNLENBQ0osV0FDQSxZQUNBLFlBQ0EsbUJBQ0EsZUFDQSxVQUNBLEtBQ0EsbUJBQ0UsRUFDSixLQUFNLEtBQU0sSUFBSSxnQkFBZ0IsY0FDaEMsR0FBSSxDQUFDLEtBQUssS0FBTSxDQUNkLEtBQUssS0FBTyxHQUVkLEdBQUksQ0FBQyxLQUFLLEtBQUssVUFBVyxDQUN4QixLQUFLLEtBQUssVUFBWSxDQUNwQixPQUFRLGVBQ1IsVUFDQSxLQUNBLE1BR0osS0FBTSxNQUFPLEtBQUssS0FDbEIsR0FBSSxDQUFDLEtBQUssbUJBQW9CLENBQzVCLEtBQUssbUJBQXFCLEdBRzVCLEtBQU0sTUFBTyxLQUFLLG1CQUNsQixHQUFJLENBQUMsS0FBSyxZQUFhLENBQ3JCLEtBQUssWUFBYyxHQUVyQixLQUFNLFFBQVMsZUFBZSxNQUFNLEdBQUcsNEJBQ3ZDLEtBQU0sV0FBWSxPQUFTLE9BQU8sR0FBSyxtQkFDdkMsS0FBSyxZQUFjLENBQ2pCLFVBQ0EsVUFDQSxNQUVGLFVBQVksYUFBYSxVQUN6QixTQUFXLFdBQVcsSUFBTSxDQUMxQixRQUFRLElBQUksV0FBWSxNQU94QixLQUFPLElBQ04sTUFHTCxHQUFJLE9BQU8sS0FBSyxPQUFPLElBQUssQ0FDMUIsU0FBUyxpQkFBaUIsMEJBQTJCLGVDaEV6RCxHQUFNLGlCQUFrQix5QkFDeEIsR0FBTSxnQkFBaUIseUJBQ3ZCLEdBQU0sZ0JBQWlCLHdCQUN2QixHQUFNLGNBQWUsc0JBQ3JCLEdBQU0sY0FBZSxzQkFDckIsR0FBTSxhQUFjLHFCQUNwQixHQUFNLFlBQWEscUJBQ25CLEdBQU0sSUFBSyxhQUVYLGtCQUNBLGlCQUNBLGlCQUNBLGVBQ0EsZUFDQSxjQUNBLGFBQ0EsUUFBUSxJQUFJLDRCQUE2QiIsCiAgIm5hbWVzIjogW10KfQo=
