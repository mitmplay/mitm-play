(()=>{var __defProp=Object.defineProperty;var __defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var require_ws_postmessage=__commonJS({"ws-client/_src/_ws_postmessage.js"(exports,module){module.exports=()=>{function receiveMessage(event){if(window.mitm.client.postmessage){console.log(`>>> Postmessage: ${event.origin} => https://${location.host}`,event.data)}}window.addEventListener("message",receiveMessage,false)}}});var require_ws_client=__commonJS({"ws-client/_src/_ws_client.js"(exports,module){var _c2="color: #bada55";module.exports=()=>{let windowRef;return{_help({data}){console.log(data)},_ping({data}){console.log(data)},_open({data}){const features="directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,width=800,height=600";windowRef=window.open(data.url,"_logs",features);windowRef.blur()},_style({data}){const{q,css}=data;document.querySelectorAll(q).forEach(node=>node.style.cssText=css)},_saveTags({routes}){if(!location.origin.match("chrome-extension")){console.log("%cWs: Update routes",_c2);window.mitm.routes=routes}},_files({data,typ}){const{files}=window.mitm;console.warn(`receive brodcast ${typ}`);for(const key in files[`${typ}_events`]){console.warn(files[`${typ}_events`][key]+"");files[`${typ}_events`][key](data)}},_setClient({data}){console.log("%cWs: _setClient",_c2,data);window.mitm.client=data}}}}});var require_ws_msg_parser=__commonJS({"ws-client/_src/_ws_msg-parser.js"(exports,module){var _ws_client=require_ws_client();var _ws_wccmd=_ws_client();module.exports=(event,msg)=>{if(window.mitm.argv.debug){if(msg.length>40){console.log(">>> ws-message: `%s...`",msg.slice(0,40))}else{console.log(">>> ws-message: `%s`",msg)}}const arr=msg.replace(/\s+$/,"").match(/^ *([\w:]+) *(\{.*)/);if(arr){let[,cmd,json]=arr;try{if(typeof json==="string"){json=JSON.parse(json)}}catch(error){console.error(json,error)}if(window._ws_queue[cmd]){const handler=window._ws_queue[cmd];delete window._ws_queue[cmd];handler(json.data)}else if(_ws_wccmd[cmd]){_ws_wccmd[cmd].call(event,json)}}}}});var require_ws_in_iframe=__commonJS({"ws-client/_src/_ws_in-iframe.js"(exports,module){module.exports=()=>{let ifrm;try{ifrm=window.self!==window.top}catch(e){ifrm=true}return ifrm?"iframe":"window"}}});var require_ws_vendor=__commonJS({"ws-client/_src/_ws_vendor.js"(exports,module){module.exports=()=>{const{vendor}=navigator;const browser={"":"firefox","Google Inc.":"chromium","Apple Computer, Inc.":"webkit"}[vendor];return browser}}});var require_ws_init_socket=__commonJS({"ws-client/_src/_ws_init-socket.js"(exports,module){var _ws_msgParser=require_ws_msg_parser();var _ws_inIframe=require_ws_in_iframe();var _ws_vendor=require_ws_vendor();var _c2="color: #bada55";module.exports=()=>{window._ws_queue={};window._ws_connected=false;const{__args,__flag}=window.mitm;if(window._ws_connect===void 0){window._ws_connect={}}const onopen=data=>{function ws_send(){for(const key in window._ws_connect){const fn=window._ws_connect[key];window._ws_connected_send=true;console.log(`%cWs: ${fn+""}`,_c2);fn(data)}}if(__flag["ws-connect"]){console.log("%cWs: open connection",_c2)}console.timeEnd("ws");window._ws_connected=true;setTimeout(ws_send,1);setTimeout(()=>{if(!window._ws_connected_send){console.error("RETRY..........");ws_send()}},10)};const onclose=function(){if(__flag["ws-connect"]){console.log("%cWs: close connection",_c2)}};const onmessage=function(e){if(__flag["on-message"]){console.log("%cWs: on-message:",_c2,e.data)}_ws_msgParser(e,e.data)};const connect=__args.nosocket===void 0;if(connect||window.chrome&&chrome.tabs){const vendor=["firefox","webkit"].includes(_ws_vendor());const pre=vendor?"ws":"wss";const prt=vendor?"3002":"3001";const url=`${pre}://localhost:${prt}/ws?page=${_ws_inIframe()}&url=${document.URL.split("?")[0]}`;let ws;try{ws=new WebSocket(url)}catch(error){console.error(error)}console.time("ws");window._ws=ws;ws.onopen=onopen;ws.onclose=onclose;ws.onmessage=onmessage}if(__flag["ws-connect"]){console.log(`%cWs: ${connect?"init":"off"} connection`,_c2)}}}});var require_screenshot=__commonJS({"ws-client/_src/_screenshot.js"(exports,module){async function screnshot(json){const{__args}=window.mitm;if([true,"off"].includes(__args.nosocket)){return new Promise(function(resolve,reject){try{const config={method:"POST",headers:{"Accept":"application/json","Content-Type":"application/json"},body:JSON.stringify(json)};fetch("/mitm-play/screnshot.json",config).then(function(response){resolve(response.json())}).then(function(data){resolve(data)})}catch(error){reject(error)}})}else{return new Promise(function(resolve,reject){try{window.ws__send("screenshot",json,resolve)}catch(error){reject(error)}})}}module.exports=screnshot}});var require_ws_namespace=__commonJS({"ws-client/_src/_ws_namespace.js"(exports,module){module.exports=()=>{const{hostname:host}=location;let namespace;function toRegex(str){return str.replace(/\./g,"\\.").replace(/\?/g,"\\?")}for(const key in window.mitm.routes){if(host.match(toRegex(key.replace(/~/g,"[^.]*")))){namespace=key;break}}return namespace}}});var require_ws_screenshot=__commonJS({"ws-client/_src/_ws_screenshot.js"(exports,module){var _screenshot=require_screenshot();var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var _c2="color: #bada55";var act;function screenshot(e){if(mitm.argv.lazyclick){if(mitm.screenshot){window.mitm.screenshot=void 0;console.log(">>> delay action");return}if(act){act=void 0;return}}const namespace=_ws_namespace();const browser=_ws_vendor();const host=location.origin.replace("://","~~");const route=window.mitm.routes[namespace];const{selector}=route.screenshot;const arr=document.body.querySelectorAll(selector);const fname=location.pathname.replace(/^\//g,"~");const delay=mitm.argv.lazyclick===true?700:mitm.argv.lazyclick;for(const el of arr){let node=e.target;while(el!==node&&node!==null&&node!==document.body){node=node.parentNode}if(node!==document.body){const _page=window["xplay-page"];const params={namespace,_page,host,browser};params.fname=fname==="~"?"~_":fname;_screenshot(params);if(mitm.argv.lazyclick){window.mitm.screenshot=e.target;e.stopImmediatePropagation();e.stopPropagation();e.preventDefault();mitm.lastEvent=e;setTimeout(()=>{act=window.mitm.screenshot;if(act){act.click();act=void 0}else{console.log("%cWs: delay action undefined",_c2)}},delay)}else{mitm.lastEvent=e}return}}}function eventclick(e){mitm.lastEvent=e}module.exports=()=>{const route=window.mitm.routes[_ws_namespace()];window.addEventListener("DOMContentLoaded",()=>{const body=document.querySelector("body");if(route&&route.screenshot){body.addEventListener("click",screenshot)}else{body.addEventListener("click",eventclick)}})}}});var require_keyboard=__commonJS({"ws-client/_src/_keyboard.js"(exports,module){var kcode1={Backquote:"`",BracketLeft:"[",BracketRight:"]",Backslash:"\\",Comma:",",Period:".",Quote:"'",Semicolon:";",Slash:"/",Space:" ",Minus:"-",Equal:"="};var kcode2={Backquote:"~",BracketLeft:"{",BracketRight:"}",Backslash:"|",Comma:"<",Period:">",Quote:'"',Semicolon:":",Slash:"?",Space:" ",Minus:"_",Equal:"+"};var kcode3={1:"!",2:"@",3:"#",4:"$",5:"%",6:"^",7:"&",8:"*",9:"(",10:")"};module.exports=(evn,opt={codeOnly:false})=>{const{code,shiftKey}=evn;const{codeOnly}=opt;let match;let char="";match=code.match(/Key(.)/);if(match){char=match.pop();if(!codeOnly&&!shiftKey){char=char.toLowerCase()}}else{match=code.match(/(Digit|Numpad)(.)/);if(match){char=match.pop();if(!codeOnly&&shiftKey){char=kcode3[char]}}else{if(!codeOnly&&shiftKey){char=kcode2[code]}else{char=kcode1[code]}}}return char}}});var require_ws_location=__commonJS({"ws-client/_src/_ws_location.js"(exports,module){var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var _key=require_keyboard();var wait=ms=>new Promise(resolve=>setTimeout(resolve,ms));var _c2="color: #bada55";module.exports=()=>{const containerStyle1="position: fixed;z-index: 99999;right: 3px;";const containerStyle2="position: fixed;z-index: 99999;left:  3px;";const containerStyle3="position: fixed;z-index: 99999;right: 3px; top: 20px; text-align: end;";const buttonStyle="";const style=`
  .mitm-btn {
    border: none;
    font-size: 8px;
    cursor: pointer;
    border-radius: 3px;
    font-family: monaco, Consolas, "Lucida Console", monospace;
  }
  .mitm-btn:hover{
    text-decoration:underline;
  }
  .bgroup-right .mitm-br,
  .bgroup-left .mitm-br{
    display:table;
  }`;const event=new Event("urlchanged");let container={right3:{},right:{},left:{}};let ctrl=false;let button={};let bgroup={right3:{},right:{},left:{}};let intervId;let observerfn=[];function toRegex(pathMsg){let[path,msg]=pathMsg.split("=>").map(item=>item.trim());path=path.replace(/\./g,"\\.").replace(/\?/g,"\\?");return{path,msg}}function createButton(buttons,pos){let br;for(const id in buttons){const[caption,color,klas]=id.split("|");const btn=document.createElement("button");const fn2=buttons[id];btn.onclick=async e=>{let arr=fn2(e);if(arr instanceof Promise){arr=await arr}if(Array.isArray(arr)){await play(arr)}};btn.innerText=caption;btn.classList.add("mitm-btn");btn.classList.add(`${pos}`);btn.classList.add(klas||caption);btn.style=buttonStyle+(color?`background: ${color};`:"");if(pos==="right"){br=document.createElement("span");br.innerHTML="&nbsp;";bgroup[pos].appendChild(br);bgroup[pos].appendChild(btn)}else{br=document.createElement("span");br.className="mitm-br";bgroup[pos].appendChild(btn);bgroup[pos].appendChild(br)}}}function setButtons(buttons,position){if(bgroup[position]){bgroup[position].innerHTML="";createButton(buttons,position)}}let debunk;let onces={};async function urlChange(event2){const namespace=_ws_namespace();if(window.mitm.autofill){delete window.mitm.autofill}if(window.mitm.autointerval){clearInterval(intervId);delete window.mitm.autointerval}if(window.mitm.autobuttons){delete window.mitm.autobuttons}if(window.mitm.rightbuttons){delete window.mitm.rightbuttons}if(window.mitm.leftbuttons){delete window.mitm.leftbuttons}if(window.mitm.macrokeys){delete window.mitm.macrokeys}if(namespace){const{href,origin}=location2;const _href=href.replace(origin,"");const{_macros_,macros}=window.mitm;observerfn=[];_macros_&&_macros_();for(const key in macros){const{path,msg}=toRegex(key);if(_href.match(path)){button.innerHTML=msg||"Entry";let fns=macros[key]();if(fns instanceof Promise){fns=await fns}if(typeof fns==="function"){observerfn.push(fns)}else if(Array.isArray(fns)){for(const fn2 of fns){if(typeof fn2==="function"){observerfn.push(fn2)}}}debunk&&clearTimeout(debunk);debunk=setTimeout(()=>{onces={};debunk=void 0;const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");if(window.mitm.autofill){autobuttons&&setButtons(__spreadProps(__spreadValues({},autobuttons),{"Entry"(){let{autofill}=window.mitm;if(typeof autofill==="function"){autofill=autofill()}play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},0)}}}container.right3.style=containerStyle3;container.right.style=containerStyle1;container.left.style=containerStyle2;const visible=window.mitm.autofill;button.style=buttonStyle+(visible?"background-color: azure;":"display: none;");if(typeof window.mitm.autointerval==="function"){intervId=setInterval(window.mitm.autointerval,500)}ctrl=false}const vendor=_ws_vendor();if(["firefox","webkit"].includes(vendor)||chrome&&!chrome.tabs){document.querySelector("html").addEventListener("keydown",keybCtrl);document.querySelector("html").addEventListener("keyup",keybUp);window.addEventListener("urlchanged",urlChange);if(document.readyState!=="loading"){init()}else{window.addEventListener("DOMContentLoaded",init)}}else{return}const fn=history.pushState;history.pushState=function(){fn.apply(history,arguments);compareHref()};_play=json=>{return new Promise(function(resolve,reject){try{window.ws__send("autofill",json,resolve)}catch(error){reject(error)}})};_post=json=>{return new Promise(function(resolve,reject){try{const config={method:"POST",headers:{"Accept":"application/json","Content-Type":"application/json"},body:JSON.stringify(json)};fetch("/mitm-play/play.json",config).then(function(response){resolve(response.json())}).then(function(data){resolve(data)})}catch(error){reject(error)}})};async function play(autofill){const{__args}=window.mitm;if(autofill){if(typeof autofill==="function"){autofill=autofill()}const browser=_ws_vendor();const lenth=autofill.length;const _page=window["xplay-page"];const _frame=window["xplay-frame"];const _json={autofill,browser,_page,_frame};const msg=lenth===1?`  ${autofill}`:JSON.stringify(autofill,null,2);console.log(`%cMacros: ${msg}`,_c2);let result;if([true,"off"].includes(__args.nosocket)){result=await _post(_json)}else{result=await _play(_json)}return result}}window.mitm.fn.play=play;window.mitm.fn.wait=wait;function macroAutomation(macro2){if(Array.isArray(macro2)){let macroIndex=0;const interval=setInterval(()=>{let selector=macro2[macroIndex];if(selector.match(/^ *[=-]>/)){const activeElement=CssSelectorGenerator.getCssSelector(document.activeElement);selector=`${activeElement} ${selector}`}play([selector]);macroIndex+=1;if(macroIndex>=macro2.length){clearInterval(interval)}},100)}}let stdDbl=[];let hghDbl=[];let stdCtl=[];let hghCtl=[];let stdAlt=[];let hghAlt=[];let saveKey="";const kdelay=1e3;let debounceDbl=void 0;function macroDbl(){const key1=`key:${stdDbl.join("")}`;const key2=`code:${hghDbl.join(":")}`;const{macrokeys,lastKey:e}=window.mitm;stdDbl=[];hghDbl=[];saveKey="";debounceDbl=void 0;macro=macrokeys[key1]||macrokeys[key2];console.log(`%cMacros: ctrl + alt  +  ${key1}  |  ${key2}`,_c2);if(macro){macro=macro(e);macroAutomation(macro);return true}}let debounceCtl=void 0;function macroCtl(){const key1=`key:<${stdCtl.join("")}>`;const key2=`code:<${hghCtl.join(":")}>`;const{macrokeys,lastKey:e}=window.mitm;stdCtl=[];hghCtl=[];saveKey="";debounceCtl=void 0;macro=macrokeys[key1]||macrokeys[key2];console.log(`%cMacros: .... + ctrl + ${key1} | ${key2}`,"color: #baeaf1");if(macro){macro=macro(e);macroAutomation(macro);return true}}let debounceAlt=void 0;function macroAlt(){const key1=`key:{${stdAlt.join("")}}`;const key2=`code:{${hghAlt.join(":")}}`;const{macrokeys,lastKey:e}=window.mitm;stdAlt=[];hghAlt=[];saveKey="";debounceAlt=void 0;macro=macrokeys[key1]||macrokeys[key2];console.log(`%cMacros: .... + alt  + ${key1} | ${key2}`,"color: #badaf1");if(macro){macro=macro(e);macroAutomation(macro);return true}}function keybUp(e){if(!e.altKey){if(debounceDbl||debounceCtl&&!e.ctrlKey||debounceAlt){clearTimeout(debounceDbl);clearTimeout(debounceCtl);clearTimeout(debounceAlt);if(debounceDbl){macroDbl()}else if(debounceCtl){macroCtl()}else{macroAlt()}debounceDbl=void 0;debounceCtl=void 0;debounceAlt=void 0}}}function keybCtrl(e){if(["Alt","Control","Meta"].includes(e.key)){return}else{const{macrokeys}=window.mitm;if(e.key==="Shift"){if(e.ctrlKey){ctrl=!ctrl;container.right3.style=containerStyle3+(!ctrl?"":"display: none;");container.right.style=containerStyle1+(!ctrl?"":"display: none;");container.left.style=containerStyle2+(!ctrl?"":"display: none;")}}else{let char=_key(e);if(e.ctrlKey&&e.altKey){if(e.shiftKey){char=_key(e,{codeOnly:true});clearTimeout(debounceDbl);clearTimeout(debounceCtl);clearTimeout(debounceAlt);saveKey+=char;return}stdDbl.push(char);hghDbl.push(e.code);clearTimeout(debounceDbl);debounceDbl=setTimeout(macroDbl,kdelay)}else if(e.ctrlKey){stdCtl.push(char);hghCtl.push(e.code);clearTimeout(debounceCtl);debounceCtl=setTimeout(macroCtl,kdelay)}else if(e.altKey){stdAlt.push(char);hghAlt.push(e.code);clearTimeout(debounceAlt);debounceAlt=setTimeout(macroAlt,kdelay)}e._keys=saveKey;mitm.lastKey=e}}}const{location:location2}=document;let oldHref=location2.href;let oDebunk=void 0;function compareHref(nodes){if(oldHref!=location2.href){window.dispatchEvent(event);oldHref=location2.href}else{if(observerfn.length){oDebunk&&clearTimeout(oDebunk);oDebunk=setTimeout(()=>{oDebunk=void 0;for(const fn2 of observerfn){const name=fn2.name;if(name&&name.match(/Once$/)){if(onces[name]){continue}else{onces[name]=true}}fn2(nodes)}const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");const{autofill}=window.mitm;if(autofill){autobuttons&&setButtons(__spreadProps(__spreadValues({},autobuttons),{"Entry"(){play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},100)}}}function init(){const html=document.querySelector("html");const htmlref=html.firstElementChild;const styleButtons=document.createElement("style");const divTopRight3=document.createElement("div");const divTopRight=document.createElement("div");const divTopLeft=document.createElement("div");styleButtons.innerHTML=style;divTopRight3.innerHTML=`<span class="bgroup-right"></span>`;divTopRight.innerHTML=`<span class="bgroup-right"></span>`;divTopLeft.innerHTML=`<span class="bgroup-left"></span>`;divTopRight.className="mitm autofill-container";divTopLeft.className="mitm autofill-container";divTopRight3.style=containerStyle3;divTopRight.style=containerStyle1;divTopLeft.style=containerStyle2;html.insertBefore(styleButtons,htmlref);html.insertBefore(divTopRight3,htmlref);html.insertBefore(divTopRight,htmlref);html.insertBefore(divTopLeft,htmlref);setTimeout(()=>{container.right3=divTopRight3;container.right=divTopRight;container.left=divTopLeft;button.style=`${buttonStyle}background-color: azure;`;bgroup.right3=divTopRight3.children[0];bgroup.right=divTopRight.children[0];bgroup.left=divTopLeft.children[0];urlChange(event);observed()},0)}const observer=new MutationObserver(compareHref);window.observer=observer;function observed(){observer.disconnect();observer.observe(document.body,{subtree:true,childList:true})}}}});var require_ws_debounce=__commonJS({"ws-client/_src/_ws_debounce.js"(exports,module){function debounce(fn,delay=500){let _timeout;return function(){const _this=this;const args=arguments;_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{fn.apply(_this,args)},delay)}}module.exports=debounce}});var require_ws_route=__commonJS({"ws-client/_src/_ws_route.js"(exports,module){var _ws_namespace=require_ws_namespace();module.exports=()=>{const namespace=_ws_namespace();let route=window.mitm.routes[namespace];const{_subns:s}=route._childns;if(s&&mitm.routes[s]){route=mitm.routes[s]}return route}}});var require_ws_observer=__commonJS({"ws-client/_src/_ws_observer.js"(exports,module){var _screenshot=require_screenshot();var _ws_namespace=require_ws_namespace();var _ws_debounce=require_ws_debounce();var _ws_vendor=require_ws_vendor();var _ws_route=require_ws_route();module.exports=()=>{if(location.origin.match("chrome-extension")){return}const host=location.origin.replace("://","~~");const sshot={};const nodes={};let route=_ws_route();if(route&&route.screenshot){const{observer:ob2}=route.screenshot;for(const id in ob2){let el={};if(ob2[id]===true){el={title:"notitle",insert:true,remove:true}}if(typeof ob2[id]!=="string"){el={title:"nocapture",insert:false,remove:false}}else{const arr=ob2[id].split(":");arr[1].split(",").map(e=>{el[e]=true});el.title=arr[0]}sshot[id]=el;nodes[id]={insert:false,remove:true}}}let ob;let fname;const namespace=_ws_namespace();const browser=_ws_vendor();const callback=function(){if(route&&route.screenshot){ob=route.screenshot.observer}const _page=window["xplay-page"];for(const id in nodes){const el=document.body.querySelectorAll(id);if(el.length){if(!nodes[id].insert){nodes[id].insert=true;if(nodes[id].remove!==void 0){nodes[id].remove=false}if(ob&&typeof ob[id]==="function"){const nod=el[0]||el;if(nod._ws_count===void 0){nod._ws_count=0}nod._ws_count+=1;if(nod._ws_count<2){ob[id](nod)}}if(sshot[id].insert){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`~${fname}-${sshot[id].title}-insert`;const params={namespace,_page,host,fname,browser};_screenshot(params)}}}else{if(!nodes[id].remove){nodes[id].remove=true;nodes[id].insert=false;if(sshot[id].remove){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`~${fname}-${sshot[id].title}-remove`;const params={namespace,_page,host,fname,browser};_screenshot(params)}}}}};document.addEventListener("DOMContentLoaded",()=>{const observer=new MutationObserver(_ws_debounce(callback,100));observer.observe(document.body,{attributes:true,childList:true,subtree:true})})}}});var require_ws_general=__commonJS({"ws-client/_src/_ws_general.js"(exports,module){var t64="Wabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZh";var _c2="color: #bada55";var nanoid=(size=8)=>{let id="";while(size-- >0){id+=t64[Math.random()*64|0]}return id};module.exports=()=>{const{_ws}=window;window.ws_broadcast=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`broadcast${JSON.stringify(msg)}`)};window.ws_emitpage=(json,regex="")=>{const msg={data:json,regex};_ws.send(`emitpage${JSON.stringify(msg)}`)};window.ws__style=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`_style${JSON.stringify(msg)}`)};window.ws__ping=json=>{const msg={data:json};_ws.send(`_ping${JSON.stringify(msg)}`)};window.ws__help=()=>{_ws.send("_help{}")};window.ws__open=json=>{const msg={data:json};_ws.send(`_open${JSON.stringify(msg)}`)};window.ws__send=(cmd,data,handler)=>{const{__flag}=window.mitm;const id=nanoid();const key=`${cmd}:${id}`;window._ws_queue[key]=handler||(w=>{});setTimeout(function(){if(window._ws_queue[key]){delete window._ws_queue[key];console.log("%cWs: ws timeout!",_c2,key)}},5e3);const params=`${key}${JSON.stringify({data})}`;_ws.send(params)}}}});var require_ws_csp_err=__commonJS({"ws-client/_src/_ws_csp-err.js"(exports,module){var _ws_namespace=require_ws_namespace();var _timeout;var _csp={};module.exports=()=>{const cspError=function(e){const{hostname:host}=location;const namespace=_ws_namespace();const path=location.pathname.replace(/^\//,"").replace(/\//g,"-");const{blockedURI,disposition,documentURI,effectiveDirective,originalPolicy,timeStamp,type,violatedDirective}=e;const typ=`[${disposition}] ${documentURI}`;if(!_csp[typ]){_csp[typ]={}}if(!_csp[typ]._general_){_csp[typ]._general_={policy:originalPolicy,namespace,host,path}}const _doc=_csp[typ];if(!_doc[violatedDirective]){_doc[violatedDirective]={}}const _err=_doc[violatedDirective];if(!_err[blockedURI]){_err[blockedURI]={}}const _match=originalPolicy.match(`${violatedDirective} [^;]+;`);const directive=_match?_match[0]:effectiveDirective;_err[blockedURI]={directive,timeStamp,type};_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{console.log(">>> CSP:",_csp);_csp={}},4e3)};if(window.mitm.client.csp){document.addEventListener("securitypolicyviolation",cspError)}}}});var require_ws_macros=__commonJS({"ws-client/_src/_ws_macros.js"(exports,module){var _c2="color: #bada55";module.exports=function(){if(window._ws_connect===void 0){window._ws_connect={}}window.mitm.fn.hotKeys=obj=>{window.mitm.macrokeys=__spreadValues(__spreadValues({},window.mitm.macrokeys),obj)};window.mitm.fn.autoclick=()=>{setTimeout(()=>{document.querySelector(".btn-autofill").click()},1e3)};window.mitm.fn.getCookie=name=>{const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2)return parts.pop().split(";").shift()};window.mitm._macros_=()=>{window.mitm.macrokeys={}};function init(_d){let msg="Macros: executed after ws open";console.log(`%c${msg}`,_c2,_d)}window._ws_connect.macrosOnMount=init}}});var _ws_postmessage=require_ws_postmessage();var _ws_initSocket=require_ws_init_socket();var _ws_screenshot=require_ws_screenshot();var _ws_location=require_ws_location();var _ws_observer=require_ws_observer();var _ws_general=require_ws_general();var _ws_cspErr=require_ws_csp_err();var _ws_macros=require_ws_macros();var _c="color: red";_ws_postmessage();_ws_initSocket();_ws_screenshot();_ws_location();_ws_observer();_ws_general();_ws_cspErr();_ws_macros();console.log("%cWs: ws-client loaded...",_c);})();
//# sourceMappingURL=data:application/json;base64,
