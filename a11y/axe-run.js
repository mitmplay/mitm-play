var a11y = (function () {
  'use strict';

  var axeRun = {};

  // https://www.a11yproject.com/checklist/
  const criterionMap = {
    wcag111:{id:'1.1.1',desc:'Non-text Content'      ,link:'Understanding/non-text-content'      },
    wcag131:{id:'1.3.1',desc:'Info and Relationships',link:'Understanding/info-and-relationships'},
    wcag132:{id:'1.3.2',desc:'Meaningful Sequence'   ,link:'Understanding/meaningful-sequence'   },
    wcag135:{id:'1.3.5',desc:'Identify Input Purpose',link:'Understanding/identify-input-purpose'},
    wcag141:{id:'1.4.1',desc:'Use of Color'          ,link:'Understanding/use-of-color'          },
    wcag143:{id:'1.4.3',desc:'Contrast (Minimum)'    ,link:'Understanding/contrast-minimum'      },
    wcag144:{id:'1.4.4',desc:'Resize text'           ,link:'Understanding/resize-text'           },
    wcag146:{id:'1.4.6',desc:'Contrast (Enhanced)'   ,link:'Understanding/contrast-enhanced'     },
    wcag148:{id:'1.4.8',desc:'Visual Presentation'   ,link:'Understanding/visual-presentation'   },
    wcag241:{id:'2.4.1',desc:'Bypass Blocks'         ,link:'Understanding/bypass-blocks'         },
    wcag242:{id:'2.4.2',desc:'Page Titled'           ,link:'Understanding/page-titled'           },
    wcag243:{id:'2.4.3',desc:'Focus Order'           ,link:'Understanding/focus-order'           },
    wcag246:{id:'2.4.6',desc:'Headings and Labels'   ,link:'Understanding/headings-and-labels'   },
    wcag247:{id:'2.4.7',desc:'Focus Visible'         ,link:'Understanding/focus-visible'         },
    wcag311:{id:'3.1.1',desc:'Language of Page'      ,link:'Understanding/language-of-page'      },
    wcag312:{id:'3.1.2',desc:'On Input'              ,link:'Understanding/on-input'              },
    wcag331:{id:'3.3.1',desc:'Error Identification'  ,link:'Understanding/error-identification'  },
    wcag411:{id:'4.1.1',desc:'Parsing'               ,link:'Understanding/parsing'               },
    wcag412:{id:'4.1.2',desc:'Name, Role, Value'     ,link:'Understanding/name-role-value'       },
  };
  function criterion(tags) {
    for(const tag of tags) {
      if (criterionMap[tag]) {
        const {id, desc, link} = criterionMap[tag];
        return {
          name: `WCAG ${id}`,
          desc,
          link: `https://www.w3.org/WAI/WCAG21/${link}`,
        }
      }
    }
  }

  var criterion_1 = criterion;

  const _criterion = criterion_1;
  //mitm.axerun.results.violations[0].nodes[0].target
  function violationHilight$1(popup) {
    const rect = document.body.getBoundingClientRect();
    const r = mitm.axerun.results;
    iterate(r.violations, popup, rect);
    iterate(r.incomplete, popup, rect, true);
  }

  function iterate(arr, popup, {x,y}, incomplete) {
    let elNode  = {};
    for (const violation of arr) {
      const {
        description,
        helpUrl,
        impact,
        nodes,
        help,
        tags,
        id: grp, 
      } = violation;
      const tgs = tags.join(', ');
      for (const node of nodes) {
        const {html,target,all,any} = node;
        const el = document.querySelector(target);
        const dv = document.createElement('div');
        const rc = el.getClientRects()[0];
        if (rc===undefined) {
          continue
        }
        popup.appendChild(dv);
        const criterion = _criterion(tags);
        const {top:t, left:l, width:w, height:h} = rc;
        const left= -x + l;
        const top = -y + t; 
        dv._axe_= {
          description,
          incomplete,
          criterion,
          helpUrl,
          impact,
          html,
          all,
          any,
          help,
          tgs,
          grp,
        };

        let style;
        if (grp.match(/page-/)) {
          style = `left:0;top:0;width:100vw;height:10px;`;
        } else {
          style = `left:${left}px;top:${top}px;width:10px;height:10px;`;
          // style = `left:${left}px;top:${top}px;width:${w}px;height:${h}px;`
        }
        dv.style  = style;
        dv.classList.add('axe-run-violation');
        dv.classList.add(`axe-grp-${grp}`);
        if (incomplete) {
          dv.classList.add(`axe-incomplete`);
        }
        dv.onmouseover = function(e) {
          const node   = e.target;
          if (target && elNode.target!==target) {
            document.querySelectorAll('.a11y-popup').forEach(n=>n.remove());
            const {mitm: {svelte: {A11yPopup}, fn}} = window;
            fn.svelte(A11yPopup, {popup: true, node});
            mitm.axerun.elNode = elNode;
            elNode.target = target;
            elNode.node   = node;
          }
        };
      }
    }
  }

  var violationHilight_1 = violationHilight$1;

  function getColor$1(el) {
    const {color, backgroundColor} = getComputedStyle(el);
    // const color = getComputedStyle(el).color
    // const backg = backgroundColor (el)
    return [color, backgroundColor]
  }

  // function backgroundColor(el) {
  //   const defBackground = defaultBackground()
  //   const bgcolor = getComputedStyle(el).backgroundColor
  //   if (bgcolor != defBackground) {
  //     return bgcolor
  //   }
  //   if (!el.parentElement) {
  //     return defBackground
  //   }
  //   return backgroundColor(el.parentElement)
  // }

  // function defaultBackground() {
  //   const div = document.createElement("div")
  //   document.head.appendChild(div)
  //   const bg = window.getComputedStyle(div).backgroundColor
  //   document.head.removeChild(div)
  //   return bg
  // }

  function _rgb(rgb) {
    const [r,g,b] = rgb.match(/\d+/g).map(x=>+x);
    return [r,g,b]
  }

  function _check(color) {
    if (color <= 0.03928) {
      return (color / 12.92);
    } else {
      return (Math.pow(((color + 0.055)/1.055), 2.4));
    }
  }

  function rgbToHex(rgb) {
    return '#' + _rgb(rgb).map(x => {
      const hex = x.toString(16);
      return hex.length === 1 ? '0' + hex : hex
    }).join('')
  }

  function luminance(rgb) {
    let [r,g,b] = _rgb(rgb);
    r = 0.2126  * _check(r/255);
    g = 0.7152  * _check(g/255);
    b = 0.0722  * _check(b/255);
    return r + g + b
  }

  function contrast$1(rgbF, rgbB) {
    const f = rgbToHex(rgbF);
    const b = rgbToHex(rgbB);
    let lght;
    let dark;

    const luminanceF = luminance(rgbF);
    const luminanceB = luminance(rgbB);

    if (luminanceF >= luminanceB) {
      lght = luminanceF;
      dark = luminanceB;
    } else {
      lght = luminanceB;
      dark = luminanceF;
    }
    const _ratio = (
      (lght + 0.05) / 
      (dark + 0.05)
    ).toFixed(2);
    
    console.log(`f:${rgbF}-> ${f}, b:${rgbB}-> ${b} => ${_ratio}`);
    return _ratio
  }

  var contrast_1 = {
    getColor: getColor$1,
    contrast: contrast$1,
    rgbToHex,
    luminance,
  };

  const violationHilight = violationHilight_1;
  const {getColor, contrast} = contrast_1;
  const {fn}  = window.mitm; 
  fn.getColor = getColor;
  fn.contrast = contrast;
  const wcag2 = [
    'wcag2a',
    'wcag21a',
    'wcag2aa',
    'wcag21aa',
  ];
  const wcag3 = [
    ...wcag2,
    'wcag2aaa',
    'wcag21aaa',
    'best-practice',
  ];
  const rulesObj = {
    'color-contrast': { enabled: true },
  };

  window.mitm.left2buttons = {
    'a11y---[y---]|lightsalmon'() {fn.axerun(     );},
    'wcag:aa[yaa-]|lightsalmon'() {fn.axerun(wcag2);},
    'strict-[yaaa]|lightsalmon'() {fn.axerun(wcag3, rulesObj);},
    'clear--[yc--]|lightsalmon'() {clearPopup(    );},
    // 'cat.aria                   |salmon'(){fn.axerun(['cat.aria'                   ])},
    // 'cat.color                  |salmon'(){fn.axerun(['cat.color'                  ])},
    // 'cat.forms                  |salmon'(){fn.axerun(['cat.forms'                  ])},
    // 'cat.keyboard               |salmon'(){fn.axerun(['cat.keyboard'               ])},
    // 'cat.language               |salmon'(){fn.axerun(['cat.language'               ])},
    // 'cat.name-role-value        |salmon'(){fn.axerun(['cat.name-role-value'        ])},
    // 'cat.parsing                |salmon'(){fn.axerun(['cat.parsing'                ])},
    // 'cat.semantics              |salmon'(){fn.axerun(['cat.semantics'              ])},
    // 'cat.sensory-and-visual-cues|salmon'(){fn.axerun(['cat.sensory-and-visual-cues'])},
    // 'cat.structure              |salmon'(){fn.axerun(['cat.structure'              ])},
    // 'cat.tables                 |salmon'(){fn.axerun(['cat.tables'                 ])},
    // 'cat.text-alternatives      |salmon'(){fn.axerun(['cat.text-alternatives'      ])},
    // 'cat.time-and-media         |salmon'(){fn.axerun(['cat.time-and-media'         ])},
  };

  //https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#getting-started
  window.mitm.fn.axerun = (values, rules) => { //# a11y
    console.log('a11y/axe-run!');
    const {__args} = window.mitm;
    const popup = clearPopup();
    const type  = 'tag';
    const runOpt= {};
    if (Array.isArray(values)) {
      runOpt.runOnly= {type,values};
    } else if (Array.isArray(__args.a11y)) {
      runOpt.runOnly= {type,values:__args.a11y};
    }
    if (rules) {
      runOpt.rules = rules;
    }
    runOpt.exclude = [['.mitm-btn']];
    window.axe
    .run(runOpt)
    .then(results => {
      if (results.violations.length) {
        window.mitm.axerun.results = results;
        violationHilight(popup);
        console.error('Accessibility issues found');
      }
    })
    .catch(err => {
      window.mitm.axerun.err = err;
      console.error('Something bad happened:', err.message);
    });
  };

  function clearPopup() {
    const popup = document.querySelector('.mitm-container.popup');
    popup.innerText = '';
    return popup
  }

  return axeRun;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
